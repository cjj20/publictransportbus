// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gtfs_2drealtime_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gtfs_2drealtime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h> // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/port_undef.inc>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gtfs_2drealtime_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField
      entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField
      aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable
      schema[28] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata
      field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable
      serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_gtfs_2drealtime_2eproto;
namespace transit_realtime {
class Alert;
class AlertDefaultTypeInternal;
extern AlertDefaultTypeInternal _Alert_default_instance_;
class EntitySelector;
class EntitySelectorDefaultTypeInternal;
extern EntitySelectorDefaultTypeInternal _EntitySelector_default_instance_;
class FeedEntity;
class FeedEntityDefaultTypeInternal;
extern FeedEntityDefaultTypeInternal _FeedEntity_default_instance_;
class FeedHeader;
class FeedHeaderDefaultTypeInternal;
extern FeedHeaderDefaultTypeInternal _FeedHeader_default_instance_;
class FeedMessage;
class FeedMessageDefaultTypeInternal;
extern FeedMessageDefaultTypeInternal _FeedMessage_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class ReplacementStop;
class ReplacementStopDefaultTypeInternal;
extern ReplacementStopDefaultTypeInternal _ReplacementStop_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
class Stop;
class StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class StopSelector;
class StopSelectorDefaultTypeInternal;
extern StopSelectorDefaultTypeInternal _StopSelector_default_instance_;
class TimeRange;
class TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
class TranslatedImage;
class TranslatedImageDefaultTypeInternal;
extern TranslatedImageDefaultTypeInternal _TranslatedImage_default_instance_;
class TranslatedImage_LocalizedImage;
class TranslatedImage_LocalizedImageDefaultTypeInternal;
extern TranslatedImage_LocalizedImageDefaultTypeInternal
    _TranslatedImage_LocalizedImage_default_instance_;
class TranslatedString;
class TranslatedStringDefaultTypeInternal;
extern TranslatedStringDefaultTypeInternal _TranslatedString_default_instance_;
class TranslatedString_Translation;
class TranslatedString_TranslationDefaultTypeInternal;
extern TranslatedString_TranslationDefaultTypeInternal
    _TranslatedString_Translation_default_instance_;
class TripDescriptor;
class TripDescriptorDefaultTypeInternal;
extern TripDescriptorDefaultTypeInternal _TripDescriptor_default_instance_;
class TripDescriptor_ModifiedTripSelector;
class TripDescriptor_ModifiedTripSelectorDefaultTypeInternal;
extern TripDescriptor_ModifiedTripSelectorDefaultTypeInternal
    _TripDescriptor_ModifiedTripSelector_default_instance_;
class TripModifications;
class TripModificationsDefaultTypeInternal;
extern TripModificationsDefaultTypeInternal
    _TripModifications_default_instance_;
class TripModifications_Modification;
class TripModifications_ModificationDefaultTypeInternal;
extern TripModifications_ModificationDefaultTypeInternal
    _TripModifications_Modification_default_instance_;
class TripModifications_SelectedTrips;
class TripModifications_SelectedTripsDefaultTypeInternal;
extern TripModifications_SelectedTripsDefaultTypeInternal
    _TripModifications_SelectedTrips_default_instance_;
class TripUpdate;
class TripUpdateDefaultTypeInternal;
extern TripUpdateDefaultTypeInternal _TripUpdate_default_instance_;
class TripUpdate_StopTimeEvent;
class TripUpdate_StopTimeEventDefaultTypeInternal;
extern TripUpdate_StopTimeEventDefaultTypeInternal
    _TripUpdate_StopTimeEvent_default_instance_;
class TripUpdate_StopTimeUpdate;
class TripUpdate_StopTimeUpdateDefaultTypeInternal;
extern TripUpdate_StopTimeUpdateDefaultTypeInternal
    _TripUpdate_StopTimeUpdate_default_instance_;
class TripUpdate_StopTimeUpdate_StopTimeProperties;
class TripUpdate_StopTimeUpdate_StopTimePropertiesDefaultTypeInternal;
extern TripUpdate_StopTimeUpdate_StopTimePropertiesDefaultTypeInternal
    _TripUpdate_StopTimeUpdate_StopTimeProperties_default_instance_;
class TripUpdate_TripProperties;
class TripUpdate_TripPropertiesDefaultTypeInternal;
extern TripUpdate_TripPropertiesDefaultTypeInternal
    _TripUpdate_TripProperties_default_instance_;
class VehicleDescriptor;
class VehicleDescriptorDefaultTypeInternal;
extern VehicleDescriptorDefaultTypeInternal
    _VehicleDescriptor_default_instance_;
class VehiclePosition;
class VehiclePositionDefaultTypeInternal;
extern VehiclePositionDefaultTypeInternal _VehiclePosition_default_instance_;
class VehiclePosition_CarriageDetails;
class VehiclePosition_CarriageDetailsDefaultTypeInternal;
extern VehiclePosition_CarriageDetailsDefaultTypeInternal
    _VehiclePosition_CarriageDetails_default_instance_;
} // namespace transit_realtime
PROTOBUF_NAMESPACE_OPEN
template <>
::transit_realtime::Alert *
Arena::CreateMaybeMessage<::transit_realtime::Alert>(Arena *);
template <>
::transit_realtime::EntitySelector *
Arena::CreateMaybeMessage<::transit_realtime::EntitySelector>(Arena *);
template <>
::transit_realtime::FeedEntity *
Arena::CreateMaybeMessage<::transit_realtime::FeedEntity>(Arena *);
template <>
::transit_realtime::FeedHeader *
Arena::CreateMaybeMessage<::transit_realtime::FeedHeader>(Arena *);
template <>
::transit_realtime::FeedMessage *
Arena::CreateMaybeMessage<::transit_realtime::FeedMessage>(Arena *);
template <>
::transit_realtime::Position *
Arena::CreateMaybeMessage<::transit_realtime::Position>(Arena *);
template <>
::transit_realtime::ReplacementStop *
Arena::CreateMaybeMessage<::transit_realtime::ReplacementStop>(Arena *);
template <>
::transit_realtime::Shape *
Arena::CreateMaybeMessage<::transit_realtime::Shape>(Arena *);
template <>
::transit_realtime::Stop *
Arena::CreateMaybeMessage<::transit_realtime::Stop>(Arena *);
template <>
::transit_realtime::StopSelector *
Arena::CreateMaybeMessage<::transit_realtime::StopSelector>(Arena *);
template <>
::transit_realtime::TimeRange *
Arena::CreateMaybeMessage<::transit_realtime::TimeRange>(Arena *);
template <>
::transit_realtime::TranslatedImage *
Arena::CreateMaybeMessage<::transit_realtime::TranslatedImage>(Arena *);
template <>
::transit_realtime::TranslatedImage_LocalizedImage *
Arena::CreateMaybeMessage<::transit_realtime::TranslatedImage_LocalizedImage>(
    Arena *);
template <>
::transit_realtime::TranslatedString *
Arena::CreateMaybeMessage<::transit_realtime::TranslatedString>(Arena *);
template <>
::transit_realtime::TranslatedString_Translation *
Arena::CreateMaybeMessage<::transit_realtime::TranslatedString_Translation>(
    Arena *);
template <>
::transit_realtime::TripDescriptor *
Arena::CreateMaybeMessage<::transit_realtime::TripDescriptor>(Arena *);
template <>
::transit_realtime::TripDescriptor_ModifiedTripSelector *
Arena::CreateMaybeMessage<
    ::transit_realtime::TripDescriptor_ModifiedTripSelector>(Arena *);
template <>
::transit_realtime::TripModifications *
Arena::CreateMaybeMessage<::transit_realtime::TripModifications>(Arena *);
template <>
::transit_realtime::TripModifications_Modification *
Arena::CreateMaybeMessage<::transit_realtime::TripModifications_Modification>(
    Arena *);
template <>
::transit_realtime::TripModifications_SelectedTrips *
Arena::CreateMaybeMessage<::transit_realtime::TripModifications_SelectedTrips>(
    Arena *);
template <>
::transit_realtime::TripUpdate *
Arena::CreateMaybeMessage<::transit_realtime::TripUpdate>(Arena *);
template <>
::transit_realtime::TripUpdate_StopTimeEvent *
Arena::CreateMaybeMessage<::transit_realtime::TripUpdate_StopTimeEvent>(
    Arena *);
template <>
::transit_realtime::TripUpdate_StopTimeUpdate *
Arena::CreateMaybeMessage<::transit_realtime::TripUpdate_StopTimeUpdate>(
    Arena *);
template <>
::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *
Arena::CreateMaybeMessage<
    ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties>(Arena *);
template <>
::transit_realtime::TripUpdate_TripProperties *
Arena::CreateMaybeMessage<::transit_realtime::TripUpdate_TripProperties>(
    Arena *);
template <>
::transit_realtime::VehicleDescriptor *
Arena::CreateMaybeMessage<::transit_realtime::VehicleDescriptor>(Arena *);
template <>
::transit_realtime::VehiclePosition *
Arena::CreateMaybeMessage<::transit_realtime::VehiclePosition>(Arena *);
template <>
::transit_realtime::VehiclePosition_CarriageDetails *
Arena::CreateMaybeMessage<::transit_realtime::VehiclePosition_CarriageDetails>(
    Arena *);
PROTOBUF_NAMESPACE_CLOSE
namespace transit_realtime {

enum FeedHeader_Incrementality : int {
  FeedHeader_Incrementality_FULL_DATASET = 0,
  FeedHeader_Incrementality_DIFFERENTIAL = 1
};
bool FeedHeader_Incrementality_IsValid(int value);
constexpr FeedHeader_Incrementality
    FeedHeader_Incrementality_Incrementality_MIN =
        FeedHeader_Incrementality_FULL_DATASET;
constexpr FeedHeader_Incrementality
    FeedHeader_Incrementality_Incrementality_MAX =
        FeedHeader_Incrementality_DIFFERENTIAL;
constexpr int FeedHeader_Incrementality_Incrementality_ARRAYSIZE =
    FeedHeader_Incrementality_Incrementality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
FeedHeader_Incrementality_descriptor();
template <typename T>
inline const std::string &FeedHeader_Incrementality_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, FeedHeader_Incrementality>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function FeedHeader_Incrementality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      FeedHeader_Incrementality_descriptor(), enum_t_value);
}
inline bool FeedHeader_Incrementality_Parse(const std::string &name,
                                            FeedHeader_Incrementality *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      FeedHeader_Incrementality>(FeedHeader_Incrementality_descriptor(), name,
                                 value);
}
enum TripUpdate_StopTimeUpdate_ScheduleRelationship : int {
  TripUpdate_StopTimeUpdate_ScheduleRelationship_SCHEDULED = 0,
  TripUpdate_StopTimeUpdate_ScheduleRelationship_SKIPPED = 1,
  TripUpdate_StopTimeUpdate_ScheduleRelationship_NO_DATA = 2,
  TripUpdate_StopTimeUpdate_ScheduleRelationship_UNSCHEDULED = 3
};
bool TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(int value);
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship
    TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_MIN =
        TripUpdate_StopTimeUpdate_ScheduleRelationship_SCHEDULED;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship
    TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_MAX =
        TripUpdate_StopTimeUpdate_ScheduleRelationship_UNSCHEDULED;
constexpr int
    TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_ARRAYSIZE =
        TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_MAX +
        1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor();
template <typename T>
inline const std::string &
TripUpdate_StopTimeUpdate_ScheduleRelationship_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T,
                     TripUpdate_StopTimeUpdate_ScheduleRelationship>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function "
      "TripUpdate_StopTimeUpdate_ScheduleRelationship_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor(),
      enum_t_value);
}
inline bool TripUpdate_StopTimeUpdate_ScheduleRelationship_Parse(
    const std::string &name,
    TripUpdate_StopTimeUpdate_ScheduleRelationship *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      TripUpdate_StopTimeUpdate_ScheduleRelationship>(
      TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor(), name, value);
}
enum VehiclePosition_VehicleStopStatus : int {
  VehiclePosition_VehicleStopStatus_INCOMING_AT = 0,
  VehiclePosition_VehicleStopStatus_STOPPED_AT = 1,
  VehiclePosition_VehicleStopStatus_IN_TRANSIT_TO = 2
};
bool VehiclePosition_VehicleStopStatus_IsValid(int value);
constexpr VehiclePosition_VehicleStopStatus
    VehiclePosition_VehicleStopStatus_VehicleStopStatus_MIN =
        VehiclePosition_VehicleStopStatus_INCOMING_AT;
constexpr VehiclePosition_VehicleStopStatus
    VehiclePosition_VehicleStopStatus_VehicleStopStatus_MAX =
        VehiclePosition_VehicleStopStatus_IN_TRANSIT_TO;
constexpr int VehiclePosition_VehicleStopStatus_VehicleStopStatus_ARRAYSIZE =
    VehiclePosition_VehicleStopStatus_VehicleStopStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
VehiclePosition_VehicleStopStatus_descriptor();
template <typename T>
inline const std::string &
VehiclePosition_VehicleStopStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehiclePosition_VehicleStopStatus>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to function "
                "VehiclePosition_VehicleStopStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      VehiclePosition_VehicleStopStatus_descriptor(), enum_t_value);
}
inline bool VehiclePosition_VehicleStopStatus_Parse(
    const std::string &name, VehiclePosition_VehicleStopStatus *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      VehiclePosition_VehicleStopStatus>(
      VehiclePosition_VehicleStopStatus_descriptor(), name, value);
}
enum VehiclePosition_CongestionLevel : int {
  VehiclePosition_CongestionLevel_UNKNOWN_CONGESTION_LEVEL = 0,
  VehiclePosition_CongestionLevel_RUNNING_SMOOTHLY = 1,
  VehiclePosition_CongestionLevel_STOP_AND_GO = 2,
  VehiclePosition_CongestionLevel_CONGESTION = 3,
  VehiclePosition_CongestionLevel_SEVERE_CONGESTION = 4
};
bool VehiclePosition_CongestionLevel_IsValid(int value);
constexpr VehiclePosition_CongestionLevel
    VehiclePosition_CongestionLevel_CongestionLevel_MIN =
        VehiclePosition_CongestionLevel_UNKNOWN_CONGESTION_LEVEL;
constexpr VehiclePosition_CongestionLevel
    VehiclePosition_CongestionLevel_CongestionLevel_MAX =
        VehiclePosition_CongestionLevel_SEVERE_CONGESTION;
constexpr int VehiclePosition_CongestionLevel_CongestionLevel_ARRAYSIZE =
    VehiclePosition_CongestionLevel_CongestionLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
VehiclePosition_CongestionLevel_descriptor();
template <typename T>
inline const std::string &VehiclePosition_CongestionLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehiclePosition_CongestionLevel>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to function "
                "VehiclePosition_CongestionLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      VehiclePosition_CongestionLevel_descriptor(), enum_t_value);
}
inline bool
VehiclePosition_CongestionLevel_Parse(const std::string &name,
                                      VehiclePosition_CongestionLevel *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      VehiclePosition_CongestionLevel>(
      VehiclePosition_CongestionLevel_descriptor(), name, value);
}
enum VehiclePosition_OccupancyStatus : int {
  VehiclePosition_OccupancyStatus_EMPTY = 0,
  VehiclePosition_OccupancyStatus_MANY_SEATS_AVAILABLE = 1,
  VehiclePosition_OccupancyStatus_FEW_SEATS_AVAILABLE = 2,
  VehiclePosition_OccupancyStatus_STANDING_ROOM_ONLY = 3,
  VehiclePosition_OccupancyStatus_CRUSHED_STANDING_ROOM_ONLY = 4,
  VehiclePosition_OccupancyStatus_FULL = 5,
  VehiclePosition_OccupancyStatus_NOT_ACCEPTING_PASSENGERS = 6,
  VehiclePosition_OccupancyStatus_NO_DATA_AVAILABLE = 7,
  VehiclePosition_OccupancyStatus_NOT_BOARDABLE = 8
};
bool VehiclePosition_OccupancyStatus_IsValid(int value);
constexpr VehiclePosition_OccupancyStatus
    VehiclePosition_OccupancyStatus_OccupancyStatus_MIN =
        VehiclePosition_OccupancyStatus_EMPTY;
constexpr VehiclePosition_OccupancyStatus
    VehiclePosition_OccupancyStatus_OccupancyStatus_MAX =
        VehiclePosition_OccupancyStatus_NOT_BOARDABLE;
constexpr int VehiclePosition_OccupancyStatus_OccupancyStatus_ARRAYSIZE =
    VehiclePosition_OccupancyStatus_OccupancyStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
VehiclePosition_OccupancyStatus_descriptor();
template <typename T>
inline const std::string &VehiclePosition_OccupancyStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehiclePosition_OccupancyStatus>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to function "
                "VehiclePosition_OccupancyStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      VehiclePosition_OccupancyStatus_descriptor(), enum_t_value);
}
inline bool
VehiclePosition_OccupancyStatus_Parse(const std::string &name,
                                      VehiclePosition_OccupancyStatus *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      VehiclePosition_OccupancyStatus>(
      VehiclePosition_OccupancyStatus_descriptor(), name, value);
}
enum Alert_Cause : int {
  Alert_Cause_UNKNOWN_CAUSE = 1,
  Alert_Cause_OTHER_CAUSE = 2,
  Alert_Cause_TECHNICAL_PROBLEM = 3,
  Alert_Cause_STRIKE = 4,
  Alert_Cause_DEMONSTRATION = 5,
  Alert_Cause_ACCIDENT = 6,
  Alert_Cause_HOLIDAY = 7,
  Alert_Cause_WEATHER = 8,
  Alert_Cause_MAINTENANCE = 9,
  Alert_Cause_CONSTRUCTION = 10,
  Alert_Cause_POLICE_ACTIVITY = 11,
  Alert_Cause_MEDICAL_EMERGENCY = 12
};
bool Alert_Cause_IsValid(int value);
constexpr Alert_Cause Alert_Cause_Cause_MIN = Alert_Cause_UNKNOWN_CAUSE;
constexpr Alert_Cause Alert_Cause_Cause_MAX = Alert_Cause_MEDICAL_EMERGENCY;
constexpr int Alert_Cause_Cause_ARRAYSIZE = Alert_Cause_Cause_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Alert_Cause_descriptor();
template <typename T>
inline const std::string &Alert_Cause_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Alert_Cause>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to function Alert_Cause_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(Alert_Cause_descriptor(),
                                                       enum_t_value);
}
inline bool Alert_Cause_Parse(const std::string &name, Alert_Cause *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Alert_Cause>(
      Alert_Cause_descriptor(), name, value);
}
enum Alert_Effect : int {
  Alert_Effect_NO_SERVICE = 1,
  Alert_Effect_REDUCED_SERVICE = 2,
  Alert_Effect_SIGNIFICANT_DELAYS = 3,
  Alert_Effect_DETOUR = 4,
  Alert_Effect_ADDITIONAL_SERVICE = 5,
  Alert_Effect_MODIFIED_SERVICE = 6,
  Alert_Effect_OTHER_EFFECT = 7,
  Alert_Effect_UNKNOWN_EFFECT = 8,
  Alert_Effect_STOP_MOVED = 9,
  Alert_Effect_NO_EFFECT = 10,
  Alert_Effect_ACCESSIBILITY_ISSUE = 11
};
bool Alert_Effect_IsValid(int value);
constexpr Alert_Effect Alert_Effect_Effect_MIN = Alert_Effect_NO_SERVICE;
constexpr Alert_Effect Alert_Effect_Effect_MAX =
    Alert_Effect_ACCESSIBILITY_ISSUE;
constexpr int Alert_Effect_Effect_ARRAYSIZE = Alert_Effect_Effect_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Alert_Effect_descriptor();
template <typename T>
inline const std::string &Alert_Effect_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Alert_Effect>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to function Alert_Effect_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      Alert_Effect_descriptor(), enum_t_value);
}
inline bool Alert_Effect_Parse(const std::string &name, Alert_Effect *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Alert_Effect>(
      Alert_Effect_descriptor(), name, value);
}
enum Alert_SeverityLevel : int {
  Alert_SeverityLevel_UNKNOWN_SEVERITY = 1,
  Alert_SeverityLevel_INFO = 2,
  Alert_SeverityLevel_WARNING = 3,
  Alert_SeverityLevel_SEVERE = 4
};
bool Alert_SeverityLevel_IsValid(int value);
constexpr Alert_SeverityLevel Alert_SeverityLevel_SeverityLevel_MIN =
    Alert_SeverityLevel_UNKNOWN_SEVERITY;
constexpr Alert_SeverityLevel Alert_SeverityLevel_SeverityLevel_MAX =
    Alert_SeverityLevel_SEVERE;
constexpr int Alert_SeverityLevel_SeverityLevel_ARRAYSIZE =
    Alert_SeverityLevel_SeverityLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *Alert_SeverityLevel_descriptor();
template <typename T>
inline const std::string &Alert_SeverityLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Alert_SeverityLevel>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to function Alert_SeverityLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      Alert_SeverityLevel_descriptor(), enum_t_value);
}
inline bool Alert_SeverityLevel_Parse(const std::string &name,
                                      Alert_SeverityLevel *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Alert_SeverityLevel>(
      Alert_SeverityLevel_descriptor(), name, value);
}
enum TripDescriptor_ScheduleRelationship : int {
  TripDescriptor_ScheduleRelationship_SCHEDULED = 0,
  TripDescriptor_ScheduleRelationship_ADDED = 1,
  TripDescriptor_ScheduleRelationship_UNSCHEDULED = 2,
  TripDescriptor_ScheduleRelationship_CANCELED = 3,
  TripDescriptor_ScheduleRelationship_REPLACEMENT PROTOBUF_DEPRECATED_ENUM = 5,
  TripDescriptor_ScheduleRelationship_DUPLICATED = 6,
  TripDescriptor_ScheduleRelationship_DELETED = 7
};
bool TripDescriptor_ScheduleRelationship_IsValid(int value);
constexpr TripDescriptor_ScheduleRelationship
    TripDescriptor_ScheduleRelationship_ScheduleRelationship_MIN =
        TripDescriptor_ScheduleRelationship_SCHEDULED;
constexpr TripDescriptor_ScheduleRelationship
    TripDescriptor_ScheduleRelationship_ScheduleRelationship_MAX =
        TripDescriptor_ScheduleRelationship_DELETED;
constexpr int
    TripDescriptor_ScheduleRelationship_ScheduleRelationship_ARRAYSIZE =
        TripDescriptor_ScheduleRelationship_ScheduleRelationship_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
TripDescriptor_ScheduleRelationship_descriptor();
template <typename T>
inline const std::string &
TripDescriptor_ScheduleRelationship_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TripDescriptor_ScheduleRelationship>::value ||
                    ::std::is_integral<T>::value,
                "Incorrect type passed to function "
                "TripDescriptor_ScheduleRelationship_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      TripDescriptor_ScheduleRelationship_descriptor(), enum_t_value);
}
inline bool TripDescriptor_ScheduleRelationship_Parse(
    const std::string &name, TripDescriptor_ScheduleRelationship *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      TripDescriptor_ScheduleRelationship>(
      TripDescriptor_ScheduleRelationship_descriptor(), name, value);
}
enum VehicleDescriptor_WheelchairAccessible : int {
  VehicleDescriptor_WheelchairAccessible_NO_VALUE = 0,
  VehicleDescriptor_WheelchairAccessible_UNKNOWN = 1,
  VehicleDescriptor_WheelchairAccessible_WHEELCHAIR_ACCESSIBLE = 2,
  VehicleDescriptor_WheelchairAccessible_WHEELCHAIR_INACCESSIBLE = 3
};
bool VehicleDescriptor_WheelchairAccessible_IsValid(int value);
constexpr VehicleDescriptor_WheelchairAccessible
    VehicleDescriptor_WheelchairAccessible_WheelchairAccessible_MIN =
        VehicleDescriptor_WheelchairAccessible_NO_VALUE;
constexpr VehicleDescriptor_WheelchairAccessible
    VehicleDescriptor_WheelchairAccessible_WheelchairAccessible_MAX =
        VehicleDescriptor_WheelchairAccessible_WHEELCHAIR_INACCESSIBLE;
constexpr int
    VehicleDescriptor_WheelchairAccessible_WheelchairAccessible_ARRAYSIZE =
        VehicleDescriptor_WheelchairAccessible_WheelchairAccessible_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
VehicleDescriptor_WheelchairAccessible_descriptor();
template <typename T>
inline const std::string &
VehicleDescriptor_WheelchairAccessible_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, VehicleDescriptor_WheelchairAccessible>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function "
      "VehicleDescriptor_WheelchairAccessible_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      VehicleDescriptor_WheelchairAccessible_descriptor(), enum_t_value);
}
inline bool VehicleDescriptor_WheelchairAccessible_Parse(
    const std::string &name, VehicleDescriptor_WheelchairAccessible *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      VehicleDescriptor_WheelchairAccessible>(
      VehicleDescriptor_WheelchairAccessible_descriptor(), name, value);
}
enum Stop_WheelchairBoarding : int {
  Stop_WheelchairBoarding_UNKNOWN = 0,
  Stop_WheelchairBoarding_AVAILABLE = 1,
  Stop_WheelchairBoarding_NOT_AVAILABLE = 2
};
bool Stop_WheelchairBoarding_IsValid(int value);
constexpr Stop_WheelchairBoarding
    Stop_WheelchairBoarding_WheelchairBoarding_MIN =
        Stop_WheelchairBoarding_UNKNOWN;
constexpr Stop_WheelchairBoarding
    Stop_WheelchairBoarding_WheelchairBoarding_MAX =
        Stop_WheelchairBoarding_NOT_AVAILABLE;
constexpr int Stop_WheelchairBoarding_WheelchairBoarding_ARRAYSIZE =
    Stop_WheelchairBoarding_WheelchairBoarding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
Stop_WheelchairBoarding_descriptor();
template <typename T>
inline const std::string &Stop_WheelchairBoarding_Name(T enum_t_value) {
  static_assert(
      ::std::is_same<T, Stop_WheelchairBoarding>::value ||
          ::std::is_integral<T>::value,
      "Incorrect type passed to function Stop_WheelchairBoarding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
      Stop_WheelchairBoarding_descriptor(), enum_t_value);
}
inline bool Stop_WheelchairBoarding_Parse(const std::string &name,
                                          Stop_WheelchairBoarding *value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<
      Stop_WheelchairBoarding>(Stop_WheelchairBoarding_descriptor(), name,
                               value);
}
// ===================================================================

class FeedMessage PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.FeedMessage)
                                                                            */
{
public:
  inline FeedMessage() : FeedMessage(nullptr){};
  virtual ~FeedMessage();

  FeedMessage(const FeedMessage &from);
  FeedMessage(FeedMessage &&from) noexcept : FeedMessage() {
    *this = ::std::move(from);
  }

  inline FeedMessage &operator=(const FeedMessage &from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedMessage &operator=(FeedMessage &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeedMessage &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const FeedMessage *internal_default_instance() {
    return reinterpret_cast<const FeedMessage *>(
        &_FeedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(FeedMessage &a, FeedMessage &b) { a.Swap(&b); }
  inline void Swap(FeedMessage *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedMessage *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeedMessage *New() const final {
    return CreateMaybeMessage<FeedMessage>(nullptr);
  }

  FeedMessage *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<FeedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const FeedMessage &from);
  void MergeFrom(const FeedMessage &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedMessage *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.FeedMessage";
  }

protected:
  explicit FeedMessage(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .transit_realtime.FeedEntity entity = 2;
  int entity_size() const;

private:
  int _internal_entity_size() const;

public:
  void clear_entity();
  ::transit_realtime::FeedEntity *mutable_entity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::FeedEntity> *
  mutable_entity();

private:
  const ::transit_realtime::FeedEntity &_internal_entity(int index) const;
  ::transit_realtime::FeedEntity *_internal_add_entity();

public:
  const ::transit_realtime::FeedEntity &entity(int index) const;
  ::transit_realtime::FeedEntity *add_entity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::FeedEntity> &
  entity() const;

  // optional .transit_realtime.FeedHeader header = 1;
  bool has_header() const;

private:
  bool _internal_has_header() const;

public:
  void clear_header();
  const ::transit_realtime::FeedHeader &header() const;
  ::transit_realtime::FeedHeader *release_header();
  ::transit_realtime::FeedHeader *mutable_header();
  void set_allocated_header(::transit_realtime::FeedHeader *header);

private:
  const ::transit_realtime::FeedHeader &_internal_header() const;
  ::transit_realtime::FeedHeader *_internal_mutable_header();

public:
  void
  unsafe_arena_set_allocated_header(::transit_realtime::FeedHeader *header);
  ::transit_realtime::FeedHeader *unsafe_arena_release_header();

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FeedMessage)
  // @@protoc_insertion_point(class_scope:transit_realtime.FeedMessage)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::FeedEntity>
      entity_;
  ::transit_realtime::FeedHeader *header_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class FeedHeader PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.FeedHeader)
                                                                           */
{
public:
  inline FeedHeader() : FeedHeader(nullptr){};
  virtual ~FeedHeader();

  FeedHeader(const FeedHeader &from);
  FeedHeader(FeedHeader &&from) noexcept : FeedHeader() {
    *this = ::std::move(from);
  }

  inline FeedHeader &operator=(const FeedHeader &from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedHeader &operator=(FeedHeader &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeedHeader &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const FeedHeader *internal_default_instance() {
    return reinterpret_cast<const FeedHeader *>(&_FeedHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(FeedHeader &a, FeedHeader &b) { a.Swap(&b); }
  inline void Swap(FeedHeader *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedHeader *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeedHeader *New() const final {
    return CreateMaybeMessage<FeedHeader>(nullptr);
  }

  FeedHeader *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<FeedHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const FeedHeader &from);
  void MergeFrom(const FeedHeader &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedHeader *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.FeedHeader";
  }

protected:
  explicit FeedHeader(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef FeedHeader_Incrementality Incrementality;
  static constexpr Incrementality FULL_DATASET =
      FeedHeader_Incrementality_FULL_DATASET;
  static constexpr Incrementality DIFFERENTIAL =
      FeedHeader_Incrementality_DIFFERENTIAL;
  static inline bool Incrementality_IsValid(int value) {
    return FeedHeader_Incrementality_IsValid(value);
  }
  static constexpr Incrementality Incrementality_MIN =
      FeedHeader_Incrementality_Incrementality_MIN;
  static constexpr Incrementality Incrementality_MAX =
      FeedHeader_Incrementality_Incrementality_MAX;
  static constexpr int Incrementality_ARRAYSIZE =
      FeedHeader_Incrementality_Incrementality_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  Incrementality_descriptor() {
    return FeedHeader_Incrementality_descriptor();
  }
  template <typename T>
  static inline const std::string &Incrementality_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Incrementality>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function Incrementality_Name.");
    return FeedHeader_Incrementality_Name(enum_t_value);
  }
  static inline bool Incrementality_Parse(const std::string &name,
                                          Incrementality *value) {
    return FeedHeader_Incrementality_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGtfsRealtimeVersionFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kIncrementalityFieldNumber = 2,
  };
  // optional string gtfs_realtime_version = 1;
  bool has_gtfs_realtime_version() const;

private:
  bool _internal_has_gtfs_realtime_version() const;

public:
  void clear_gtfs_realtime_version();
  const std::string &gtfs_realtime_version() const;
  void set_gtfs_realtime_version(const std::string &value);
  void set_gtfs_realtime_version(std::string &&value);
  void set_gtfs_realtime_version(const char *value);
  void set_gtfs_realtime_version(const char *value, size_t size);
  std::string *mutable_gtfs_realtime_version();
  std::string *release_gtfs_realtime_version();
  void set_allocated_gtfs_realtime_version(std::string *gtfs_realtime_version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_gtfs_realtime_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_gtfs_realtime_version(
      std::string *gtfs_realtime_version);

private:
  const std::string &_internal_gtfs_realtime_version() const;
  void _internal_set_gtfs_realtime_version(const std::string &value);
  std::string *_internal_mutable_gtfs_realtime_version();

public:
  // optional uint64 timestamp = 3;
  bool has_timestamp() const;

private:
  bool _internal_has_timestamp() const;

public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

public:
  // optional .transit_realtime.FeedHeader.Incrementality incrementality = 2
  // [default = FULL_DATASET];
  bool has_incrementality() const;

private:
  bool _internal_has_incrementality() const;

public:
  void clear_incrementality();
  ::transit_realtime::FeedHeader_Incrementality incrementality() const;
  void set_incrementality(::transit_realtime::FeedHeader_Incrementality value);

private:
  ::transit_realtime::FeedHeader_Incrementality
  _internal_incrementality() const;
  void _internal_set_incrementality(
      ::transit_realtime::FeedHeader_Incrementality value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FeedHeader)
  // @@protoc_insertion_point(class_scope:transit_realtime.FeedHeader)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gtfs_realtime_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int incrementality_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class FeedEntity PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.FeedEntity)
                                                                           */
{
public:
  inline FeedEntity() : FeedEntity(nullptr){};
  virtual ~FeedEntity();

  FeedEntity(const FeedEntity &from);
  FeedEntity(FeedEntity &&from) noexcept : FeedEntity() {
    *this = ::std::move(from);
  }

  inline FeedEntity &operator=(const FeedEntity &from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedEntity &operator=(FeedEntity &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeedEntity &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const FeedEntity *internal_default_instance() {
    return reinterpret_cast<const FeedEntity *>(&_FeedEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;

  friend void swap(FeedEntity &a, FeedEntity &b) { a.Swap(&b); }
  inline void Swap(FeedEntity *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedEntity *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeedEntity *New() const final {
    return CreateMaybeMessage<FeedEntity>(nullptr);
  }

  FeedEntity *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<FeedEntity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const FeedEntity &from);
  void MergeFrom(const FeedEntity &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeedEntity *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.FeedEntity";
  }

protected:
  explicit FeedEntity(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTripUpdateFieldNumber = 3,
    kVehicleFieldNumber = 4,
    kAlertFieldNumber = 5,
    kShapeFieldNumber = 6,
    kStopFieldNumber = 7,
    kTripModificationsFieldNumber = 8,
    kIsDeletedFieldNumber = 2,
  };
  // optional string id = 1;
  bool has_id() const;

private:
  bool _internal_has_id() const;

public:
  void clear_id();
  const std::string &id() const;
  void set_id(const std::string &value);
  void set_id(std::string &&value);
  void set_id(const char *value);
  void set_id(const char *value, size_t size);
  std::string *mutable_id();
  std::string *release_id();
  void set_allocated_id(std::string *id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_id(std::string *id);

private:
  const std::string &_internal_id() const;
  void _internal_set_id(const std::string &value);
  std::string *_internal_mutable_id();

public:
  // optional .transit_realtime.TripUpdate trip_update = 3;
  bool has_trip_update() const;

private:
  bool _internal_has_trip_update() const;

public:
  void clear_trip_update();
  const ::transit_realtime::TripUpdate &trip_update() const;
  ::transit_realtime::TripUpdate *release_trip_update();
  ::transit_realtime::TripUpdate *mutable_trip_update();
  void set_allocated_trip_update(::transit_realtime::TripUpdate *trip_update);

private:
  const ::transit_realtime::TripUpdate &_internal_trip_update() const;
  ::transit_realtime::TripUpdate *_internal_mutable_trip_update();

public:
  void unsafe_arena_set_allocated_trip_update(
      ::transit_realtime::TripUpdate *trip_update);
  ::transit_realtime::TripUpdate *unsafe_arena_release_trip_update();

  // optional .transit_realtime.VehiclePosition vehicle = 4;
  bool has_vehicle() const;

private:
  bool _internal_has_vehicle() const;

public:
  void clear_vehicle();
  const ::transit_realtime::VehiclePosition &vehicle() const;
  ::transit_realtime::VehiclePosition *release_vehicle();
  ::transit_realtime::VehiclePosition *mutable_vehicle();
  void set_allocated_vehicle(::transit_realtime::VehiclePosition *vehicle);

private:
  const ::transit_realtime::VehiclePosition &_internal_vehicle() const;
  ::transit_realtime::VehiclePosition *_internal_mutable_vehicle();

public:
  void unsafe_arena_set_allocated_vehicle(
      ::transit_realtime::VehiclePosition *vehicle);
  ::transit_realtime::VehiclePosition *unsafe_arena_release_vehicle();

  // optional .transit_realtime.Alert alert = 5;
  bool has_alert() const;

private:
  bool _internal_has_alert() const;

public:
  void clear_alert();
  const ::transit_realtime::Alert &alert() const;
  ::transit_realtime::Alert *release_alert();
  ::transit_realtime::Alert *mutable_alert();
  void set_allocated_alert(::transit_realtime::Alert *alert);

private:
  const ::transit_realtime::Alert &_internal_alert() const;
  ::transit_realtime::Alert *_internal_mutable_alert();

public:
  void unsafe_arena_set_allocated_alert(::transit_realtime::Alert *alert);
  ::transit_realtime::Alert *unsafe_arena_release_alert();

  // optional .transit_realtime.Shape shape = 6;
  bool has_shape() const;

private:
  bool _internal_has_shape() const;

public:
  void clear_shape();
  const ::transit_realtime::Shape &shape() const;
  ::transit_realtime::Shape *release_shape();
  ::transit_realtime::Shape *mutable_shape();
  void set_allocated_shape(::transit_realtime::Shape *shape);

private:
  const ::transit_realtime::Shape &_internal_shape() const;
  ::transit_realtime::Shape *_internal_mutable_shape();

public:
  void unsafe_arena_set_allocated_shape(::transit_realtime::Shape *shape);
  ::transit_realtime::Shape *unsafe_arena_release_shape();

  // optional .transit_realtime.Stop stop = 7;
  bool has_stop() const;

private:
  bool _internal_has_stop() const;

public:
  void clear_stop();
  const ::transit_realtime::Stop &stop() const;
  ::transit_realtime::Stop *release_stop();
  ::transit_realtime::Stop *mutable_stop();
  void set_allocated_stop(::transit_realtime::Stop *stop);

private:
  const ::transit_realtime::Stop &_internal_stop() const;
  ::transit_realtime::Stop *_internal_mutable_stop();

public:
  void unsafe_arena_set_allocated_stop(::transit_realtime::Stop *stop);
  ::transit_realtime::Stop *unsafe_arena_release_stop();

  // optional .transit_realtime.TripModifications trip_modifications = 8;
  bool has_trip_modifications() const;

private:
  bool _internal_has_trip_modifications() const;

public:
  void clear_trip_modifications();
  const ::transit_realtime::TripModifications &trip_modifications() const;
  ::transit_realtime::TripModifications *release_trip_modifications();
  ::transit_realtime::TripModifications *mutable_trip_modifications();
  void set_allocated_trip_modifications(
      ::transit_realtime::TripModifications *trip_modifications);

private:
  const ::transit_realtime::TripModifications &
  _internal_trip_modifications() const;
  ::transit_realtime::TripModifications *_internal_mutable_trip_modifications();

public:
  void unsafe_arena_set_allocated_trip_modifications(
      ::transit_realtime::TripModifications *trip_modifications);
  ::transit_realtime::TripModifications *
  unsafe_arena_release_trip_modifications();

  // optional bool is_deleted = 2 [default = false];
  bool has_is_deleted() const;

private:
  bool _internal_has_is_deleted() const;

public:
  void clear_is_deleted();
  bool is_deleted() const;
  void set_is_deleted(bool value);

private:
  bool _internal_is_deleted() const;
  void _internal_set_is_deleted(bool value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(FeedEntity)
  // @@protoc_insertion_point(class_scope:transit_realtime.FeedEntity)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::transit_realtime::TripUpdate *trip_update_;
  ::transit_realtime::VehiclePosition *vehicle_;
  ::transit_realtime::Alert *alert_;
  ::transit_realtime::Shape *shape_;
  ::transit_realtime::Stop *stop_;
  ::transit_realtime::TripModifications *trip_modifications_;
  bool is_deleted_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripUpdate_StopTimeEvent PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripUpdate.StopTimeEvent)
                                               */
{
public:
  inline TripUpdate_StopTimeEvent() : TripUpdate_StopTimeEvent(nullptr){};
  virtual ~TripUpdate_StopTimeEvent();

  TripUpdate_StopTimeEvent(const TripUpdate_StopTimeEvent &from);
  TripUpdate_StopTimeEvent(TripUpdate_StopTimeEvent &&from) noexcept
      : TripUpdate_StopTimeEvent() {
    *this = ::std::move(from);
  }

  inline TripUpdate_StopTimeEvent &
  operator=(const TripUpdate_StopTimeEvent &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripUpdate_StopTimeEvent &
  operator=(TripUpdate_StopTimeEvent &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripUpdate_StopTimeEvent &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripUpdate_StopTimeEvent *internal_default_instance() {
    return reinterpret_cast<const TripUpdate_StopTimeEvent *>(
        &_TripUpdate_StopTimeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;

  friend void swap(TripUpdate_StopTimeEvent &a, TripUpdate_StopTimeEvent &b) {
    a.Swap(&b);
  }
  inline void Swap(TripUpdate_StopTimeEvent *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripUpdate_StopTimeEvent *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripUpdate_StopTimeEvent *New() const final {
    return CreateMaybeMessage<TripUpdate_StopTimeEvent>(nullptr);
  }

  TripUpdate_StopTimeEvent *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripUpdate_StopTimeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripUpdate_StopTimeEvent &from);
  void MergeFrom(const TripUpdate_StopTimeEvent &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripUpdate_StopTimeEvent *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripUpdate.StopTimeEvent";
  }

protected:
  explicit TripUpdate_StopTimeEvent(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kDelayFieldNumber = 1,
    kUncertaintyFieldNumber = 3,
  };
  // optional int64 time = 2;
  bool has_time() const;

private:
  bool _internal_has_time() const;

public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);

public:
  // optional int32 delay = 1;
  bool has_delay() const;

private:
  bool _internal_has_delay() const;

public:
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // optional int32 uncertainty = 3;
  bool has_uncertainty() const;

private:
  bool _internal_has_uncertainty() const;

public:
  void clear_uncertainty();
  ::PROTOBUF_NAMESPACE_ID::int32 uncertainty() const;
  void set_uncertainty(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_uncertainty() const;
  void _internal_set_uncertainty(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TripUpdate_StopTimeEvent)
  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeEvent)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_;
  ::PROTOBUF_NAMESPACE_ID::int32 uncertainty_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripUpdate_StopTimeUpdate_StopTimeProperties PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
                                               */
{
public:
  inline TripUpdate_StopTimeUpdate_StopTimeProperties()
      : TripUpdate_StopTimeUpdate_StopTimeProperties(nullptr){};
  virtual ~TripUpdate_StopTimeUpdate_StopTimeProperties();

  TripUpdate_StopTimeUpdate_StopTimeProperties(
      const TripUpdate_StopTimeUpdate_StopTimeProperties &from);
  TripUpdate_StopTimeUpdate_StopTimeProperties(
      TripUpdate_StopTimeUpdate_StopTimeProperties &&from) noexcept
      : TripUpdate_StopTimeUpdate_StopTimeProperties() {
    *this = ::std::move(from);
  }

  inline TripUpdate_StopTimeUpdate_StopTimeProperties &
  operator=(const TripUpdate_StopTimeUpdate_StopTimeProperties &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripUpdate_StopTimeUpdate_StopTimeProperties &
  operator=(TripUpdate_StopTimeUpdate_StopTimeProperties &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripUpdate_StopTimeUpdate_StopTimeProperties &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripUpdate_StopTimeUpdate_StopTimeProperties *
  internal_default_instance() {
    return reinterpret_cast<
        const TripUpdate_StopTimeUpdate_StopTimeProperties *>(
        &_TripUpdate_StopTimeUpdate_StopTimeProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;

  friend void swap(TripUpdate_StopTimeUpdate_StopTimeProperties &a,
                   TripUpdate_StopTimeUpdate_StopTimeProperties &b) {
    a.Swap(&b);
  }
  inline void Swap(TripUpdate_StopTimeUpdate_StopTimeProperties *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripUpdate_StopTimeUpdate_StopTimeProperties *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripUpdate_StopTimeUpdate_StopTimeProperties *New() const final {
    return CreateMaybeMessage<TripUpdate_StopTimeUpdate_StopTimeProperties>(
        nullptr);
  }

  TripUpdate_StopTimeUpdate_StopTimeProperties *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripUpdate_StopTimeUpdate_StopTimeProperties>(
        arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripUpdate_StopTimeUpdate_StopTimeProperties &from);
  void MergeFrom(const TripUpdate_StopTimeUpdate_StopTimeProperties &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripUpdate_StopTimeUpdate_StopTimeProperties *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties";
  }

protected:
  explicit TripUpdate_StopTimeUpdate_StopTimeProperties(
      ::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignedStopIdFieldNumber = 1,
  };
  // optional string assigned_stop_id = 1;
  bool has_assigned_stop_id() const;

private:
  bool _internal_has_assigned_stop_id() const;

public:
  void clear_assigned_stop_id();
  const std::string &assigned_stop_id() const;
  void set_assigned_stop_id(const std::string &value);
  void set_assigned_stop_id(std::string &&value);
  void set_assigned_stop_id(const char *value);
  void set_assigned_stop_id(const char *value, size_t size);
  std::string *mutable_assigned_stop_id();
  std::string *release_assigned_stop_id();
  void set_allocated_assigned_stop_id(std::string *assigned_stop_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_assigned_stop_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void
  unsafe_arena_set_allocated_assigned_stop_id(std::string *assigned_stop_id);

private:
  const std::string &_internal_assigned_stop_id() const;
  void _internal_set_assigned_stop_id(const std::string &value);
  std::string *_internal_mutable_assigned_stop_id();

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(
      TripUpdate_StopTimeUpdate_StopTimeProperties)
  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assigned_stop_id_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripUpdate_StopTimeUpdate PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripUpdate.StopTimeUpdate)
                                               */
{
public:
  inline TripUpdate_StopTimeUpdate() : TripUpdate_StopTimeUpdate(nullptr){};
  virtual ~TripUpdate_StopTimeUpdate();

  TripUpdate_StopTimeUpdate(const TripUpdate_StopTimeUpdate &from);
  TripUpdate_StopTimeUpdate(TripUpdate_StopTimeUpdate &&from) noexcept
      : TripUpdate_StopTimeUpdate() {
    *this = ::std::move(from);
  }

  inline TripUpdate_StopTimeUpdate &
  operator=(const TripUpdate_StopTimeUpdate &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripUpdate_StopTimeUpdate &
  operator=(TripUpdate_StopTimeUpdate &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripUpdate_StopTimeUpdate &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripUpdate_StopTimeUpdate *internal_default_instance() {
    return reinterpret_cast<const TripUpdate_StopTimeUpdate *>(
        &_TripUpdate_StopTimeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;

  friend void swap(TripUpdate_StopTimeUpdate &a, TripUpdate_StopTimeUpdate &b) {
    a.Swap(&b);
  }
  inline void Swap(TripUpdate_StopTimeUpdate *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripUpdate_StopTimeUpdate *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripUpdate_StopTimeUpdate *New() const final {
    return CreateMaybeMessage<TripUpdate_StopTimeUpdate>(nullptr);
  }

  TripUpdate_StopTimeUpdate *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripUpdate_StopTimeUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripUpdate_StopTimeUpdate &from);
  void MergeFrom(const TripUpdate_StopTimeUpdate &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripUpdate_StopTimeUpdate *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripUpdate.StopTimeUpdate";
  }

protected:
  explicit TripUpdate_StopTimeUpdate(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef TripUpdate_StopTimeUpdate_StopTimeProperties StopTimeProperties;

  typedef TripUpdate_StopTimeUpdate_ScheduleRelationship ScheduleRelationship;
  static constexpr ScheduleRelationship SCHEDULED =
      TripUpdate_StopTimeUpdate_ScheduleRelationship_SCHEDULED;
  static constexpr ScheduleRelationship SKIPPED =
      TripUpdate_StopTimeUpdate_ScheduleRelationship_SKIPPED;
  static constexpr ScheduleRelationship NO_DATA =
      TripUpdate_StopTimeUpdate_ScheduleRelationship_NO_DATA;
  static constexpr ScheduleRelationship UNSCHEDULED =
      TripUpdate_StopTimeUpdate_ScheduleRelationship_UNSCHEDULED;
  static inline bool ScheduleRelationship_IsValid(int value) {
    return TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(value);
  }
  static constexpr ScheduleRelationship ScheduleRelationship_MIN =
      TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_MIN;
  static constexpr ScheduleRelationship ScheduleRelationship_MAX =
      TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_MAX;
  static constexpr int ScheduleRelationship_ARRAYSIZE =
      TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  ScheduleRelationship_descriptor() {
    return TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor();
  }
  template <typename T>
  static inline const std::string &ScheduleRelationship_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, ScheduleRelationship>::value ||
            ::std::is_integral<T>::value,
        "Incorrect type passed to function ScheduleRelationship_Name.");
    return TripUpdate_StopTimeUpdate_ScheduleRelationship_Name(enum_t_value);
  }
  static inline bool ScheduleRelationship_Parse(const std::string &name,
                                                ScheduleRelationship *value) {
    return TripUpdate_StopTimeUpdate_ScheduleRelationship_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdFieldNumber = 4,
    kArrivalFieldNumber = 2,
    kDepartureFieldNumber = 3,
    kStopTimePropertiesFieldNumber = 6,
    kStopSequenceFieldNumber = 1,
    kScheduleRelationshipFieldNumber = 5,
    kDepartureOccupancyStatusFieldNumber = 7,
  };
  // optional string stop_id = 4;
  bool has_stop_id() const;

private:
  bool _internal_has_stop_id() const;

public:
  void clear_stop_id();
  const std::string &stop_id() const;
  void set_stop_id(const std::string &value);
  void set_stop_id(std::string &&value);
  void set_stop_id(const char *value);
  void set_stop_id(const char *value, size_t size);
  std::string *mutable_stop_id();
  std::string *release_stop_id();
  void set_allocated_stop_id(std::string *stop_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_stop_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_stop_id(std::string *stop_id);

private:
  const std::string &_internal_stop_id() const;
  void _internal_set_stop_id(const std::string &value);
  std::string *_internal_mutable_stop_id();

public:
  // optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  bool has_arrival() const;

private:
  bool _internal_has_arrival() const;

public:
  void clear_arrival();
  const ::transit_realtime::TripUpdate_StopTimeEvent &arrival() const;
  ::transit_realtime::TripUpdate_StopTimeEvent *release_arrival();
  ::transit_realtime::TripUpdate_StopTimeEvent *mutable_arrival();
  void
  set_allocated_arrival(::transit_realtime::TripUpdate_StopTimeEvent *arrival);

private:
  const ::transit_realtime::TripUpdate_StopTimeEvent &_internal_arrival() const;
  ::transit_realtime::TripUpdate_StopTimeEvent *_internal_mutable_arrival();

public:
  void unsafe_arena_set_allocated_arrival(
      ::transit_realtime::TripUpdate_StopTimeEvent *arrival);
  ::transit_realtime::TripUpdate_StopTimeEvent *unsafe_arena_release_arrival();

  // optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  bool has_departure() const;

private:
  bool _internal_has_departure() const;

public:
  void clear_departure();
  const ::transit_realtime::TripUpdate_StopTimeEvent &departure() const;
  ::transit_realtime::TripUpdate_StopTimeEvent *release_departure();
  ::transit_realtime::TripUpdate_StopTimeEvent *mutable_departure();
  void set_allocated_departure(
      ::transit_realtime::TripUpdate_StopTimeEvent *departure);

private:
  const ::transit_realtime::TripUpdate_StopTimeEvent &
  _internal_departure() const;
  ::transit_realtime::TripUpdate_StopTimeEvent *_internal_mutable_departure();

public:
  void unsafe_arena_set_allocated_departure(
      ::transit_realtime::TripUpdate_StopTimeEvent *departure);
  ::transit_realtime::TripUpdate_StopTimeEvent *
  unsafe_arena_release_departure();

  // optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties
  // stop_time_properties = 6;
  bool has_stop_time_properties() const;

private:
  bool _internal_has_stop_time_properties() const;

public:
  void clear_stop_time_properties();
  const ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties &
  stop_time_properties() const;
  ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *
  release_stop_time_properties();
  ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *
  mutable_stop_time_properties();
  void set_allocated_stop_time_properties(
      ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties
          *stop_time_properties);

private:
  const ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties &
  _internal_stop_time_properties() const;
  ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *
  _internal_mutable_stop_time_properties();

public:
  void unsafe_arena_set_allocated_stop_time_properties(
      ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties
          *stop_time_properties);
  ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *
  unsafe_arena_release_stop_time_properties();

  // optional uint32 stop_sequence = 1;
  bool has_stop_sequence() const;

private:
  bool _internal_has_stop_sequence() const;

public:
  void clear_stop_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_sequence() const;
  void set_stop_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_sequence() const;
  void _internal_set_stop_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

public:
  // optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
  // schedule_relationship = 5 [default = SCHEDULED];
  bool has_schedule_relationship() const;

private:
  bool _internal_has_schedule_relationship() const;

public:
  void clear_schedule_relationship();
  ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship
  schedule_relationship() const;
  void set_schedule_relationship(
      ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship value);

private:
  ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship
  _internal_schedule_relationship() const;
  void _internal_set_schedule_relationship(
      ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship value);

public:
  // optional .transit_realtime.VehiclePosition.OccupancyStatus
  // departure_occupancy_status = 7;
  bool has_departure_occupancy_status() const;

private:
  bool _internal_has_departure_occupancy_status() const;

public:
  void clear_departure_occupancy_status();
  ::transit_realtime::VehiclePosition_OccupancyStatus
  departure_occupancy_status() const;
  void set_departure_occupancy_status(
      ::transit_realtime::VehiclePosition_OccupancyStatus value);

private:
  ::transit_realtime::VehiclePosition_OccupancyStatus
  _internal_departure_occupancy_status() const;
  void _internal_set_departure_occupancy_status(
      ::transit_realtime::VehiclePosition_OccupancyStatus value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TripUpdate_StopTimeUpdate)
  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeUpdate)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_id_;
  ::transit_realtime::TripUpdate_StopTimeEvent *arrival_;
  ::transit_realtime::TripUpdate_StopTimeEvent *departure_;
  ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties
      *stop_time_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_sequence_;
  int schedule_relationship_;
  int departure_occupancy_status_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripUpdate_TripProperties PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripUpdate.TripProperties)
                                               */
{
public:
  inline TripUpdate_TripProperties() : TripUpdate_TripProperties(nullptr){};
  virtual ~TripUpdate_TripProperties();

  TripUpdate_TripProperties(const TripUpdate_TripProperties &from);
  TripUpdate_TripProperties(TripUpdate_TripProperties &&from) noexcept
      : TripUpdate_TripProperties() {
    *this = ::std::move(from);
  }

  inline TripUpdate_TripProperties &
  operator=(const TripUpdate_TripProperties &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripUpdate_TripProperties &
  operator=(TripUpdate_TripProperties &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripUpdate_TripProperties &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripUpdate_TripProperties *internal_default_instance() {
    return reinterpret_cast<const TripUpdate_TripProperties *>(
        &_TripUpdate_TripProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;

  friend void swap(TripUpdate_TripProperties &a, TripUpdate_TripProperties &b) {
    a.Swap(&b);
  }
  inline void Swap(TripUpdate_TripProperties *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripUpdate_TripProperties *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripUpdate_TripProperties *New() const final {
    return CreateMaybeMessage<TripUpdate_TripProperties>(nullptr);
  }

  TripUpdate_TripProperties *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripUpdate_TripProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripUpdate_TripProperties &from);
  void MergeFrom(const TripUpdate_TripProperties &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripUpdate_TripProperties *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripUpdate.TripProperties";
  }

protected:
  explicit TripUpdate_TripProperties(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTripIdFieldNumber = 1,
    kStartDateFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kShapeIdFieldNumber = 4,
  };
  // optional string trip_id = 1;
  bool has_trip_id() const;

private:
  bool _internal_has_trip_id() const;

public:
  void clear_trip_id();
  const std::string &trip_id() const;
  void set_trip_id(const std::string &value);
  void set_trip_id(std::string &&value);
  void set_trip_id(const char *value);
  void set_trip_id(const char *value, size_t size);
  std::string *mutable_trip_id();
  std::string *release_trip_id();
  void set_allocated_trip_id(std::string *trip_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_trip_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_trip_id(std::string *trip_id);

private:
  const std::string &_internal_trip_id() const;
  void _internal_set_trip_id(const std::string &value);
  std::string *_internal_mutable_trip_id();

public:
  // optional string start_date = 2;
  bool has_start_date() const;

private:
  bool _internal_has_start_date() const;

public:
  void clear_start_date();
  const std::string &start_date() const;
  void set_start_date(const std::string &value);
  void set_start_date(std::string &&value);
  void set_start_date(const char *value);
  void set_start_date(const char *value, size_t size);
  std::string *mutable_start_date();
  std::string *release_start_date();
  void set_allocated_start_date(std::string *start_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_start_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_start_date(std::string *start_date);

private:
  const std::string &_internal_start_date() const;
  void _internal_set_start_date(const std::string &value);
  std::string *_internal_mutable_start_date();

public:
  // optional string start_time = 3;
  bool has_start_time() const;

private:
  bool _internal_has_start_time() const;

public:
  void clear_start_time();
  const std::string &start_time() const;
  void set_start_time(const std::string &value);
  void set_start_time(std::string &&value);
  void set_start_time(const char *value);
  void set_start_time(const char *value, size_t size);
  std::string *mutable_start_time();
  std::string *release_start_time();
  void set_allocated_start_time(std::string *start_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_start_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_start_time(std::string *start_time);

private:
  const std::string &_internal_start_time() const;
  void _internal_set_start_time(const std::string &value);
  std::string *_internal_mutable_start_time();

public:
  // optional string shape_id = 4;
  bool has_shape_id() const;

private:
  bool _internal_has_shape_id() const;

public:
  void clear_shape_id();
  const std::string &shape_id() const;
  void set_shape_id(const std::string &value);
  void set_shape_id(std::string &&value);
  void set_shape_id(const char *value);
  void set_shape_id(const char *value, size_t size);
  std::string *mutable_shape_id();
  std::string *release_shape_id();
  void set_allocated_shape_id(std::string *shape_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_shape_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_shape_id(std::string *shape_id);

private:
  const std::string &_internal_shape_id() const;
  void _internal_set_shape_id(const std::string &value);
  std::string *_internal_mutable_shape_id();

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TripUpdate_TripProperties)
  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.TripProperties)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trip_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shape_id_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripUpdate PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripUpdate)
                                                                           */
{
public:
  inline TripUpdate() : TripUpdate(nullptr){};
  virtual ~TripUpdate();

  TripUpdate(const TripUpdate &from);
  TripUpdate(TripUpdate &&from) noexcept : TripUpdate() {
    *this = ::std::move(from);
  }

  inline TripUpdate &operator=(const TripUpdate &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripUpdate &operator=(TripUpdate &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripUpdate &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripUpdate *internal_default_instance() {
    return reinterpret_cast<const TripUpdate *>(&_TripUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;

  friend void swap(TripUpdate &a, TripUpdate &b) { a.Swap(&b); }
  inline void Swap(TripUpdate *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripUpdate *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripUpdate *New() const final {
    return CreateMaybeMessage<TripUpdate>(nullptr);
  }

  TripUpdate *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripUpdate &from);
  void MergeFrom(const TripUpdate &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripUpdate *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripUpdate";
  }

protected:
  explicit TripUpdate(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef TripUpdate_StopTimeEvent StopTimeEvent;
  typedef TripUpdate_StopTimeUpdate StopTimeUpdate;
  typedef TripUpdate_TripProperties TripProperties;

  // accessors -------------------------------------------------------

  enum : int {
    kStopTimeUpdateFieldNumber = 2,
    kTripFieldNumber = 1,
    kVehicleFieldNumber = 3,
    kTripPropertiesFieldNumber = 6,
    kTimestampFieldNumber = 4,
    kDelayFieldNumber = 5,
  };
  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  int stop_time_update_size() const;

private:
  int _internal_stop_time_update_size() const;

public:
  void clear_stop_time_update();
  ::transit_realtime::TripUpdate_StopTimeUpdate *
  mutable_stop_time_update(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TripUpdate_StopTimeUpdate> *
  mutable_stop_time_update();

private:
  const ::transit_realtime::TripUpdate_StopTimeUpdate &
  _internal_stop_time_update(int index) const;
  ::transit_realtime::TripUpdate_StopTimeUpdate *
  _internal_add_stop_time_update();

public:
  const ::transit_realtime::TripUpdate_StopTimeUpdate &
  stop_time_update(int index) const;
  ::transit_realtime::TripUpdate_StopTimeUpdate *add_stop_time_update();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TripUpdate_StopTimeUpdate> &
  stop_time_update() const;

  // optional .transit_realtime.TripDescriptor trip = 1;
  bool has_trip() const;

private:
  bool _internal_has_trip() const;

public:
  void clear_trip();
  const ::transit_realtime::TripDescriptor &trip() const;
  ::transit_realtime::TripDescriptor *release_trip();
  ::transit_realtime::TripDescriptor *mutable_trip();
  void set_allocated_trip(::transit_realtime::TripDescriptor *trip);

private:
  const ::transit_realtime::TripDescriptor &_internal_trip() const;
  ::transit_realtime::TripDescriptor *_internal_mutable_trip();

public:
  void
  unsafe_arena_set_allocated_trip(::transit_realtime::TripDescriptor *trip);
  ::transit_realtime::TripDescriptor *unsafe_arena_release_trip();

  // optional .transit_realtime.VehicleDescriptor vehicle = 3;
  bool has_vehicle() const;

private:
  bool _internal_has_vehicle() const;

public:
  void clear_vehicle();
  const ::transit_realtime::VehicleDescriptor &vehicle() const;
  ::transit_realtime::VehicleDescriptor *release_vehicle();
  ::transit_realtime::VehicleDescriptor *mutable_vehicle();
  void set_allocated_vehicle(::transit_realtime::VehicleDescriptor *vehicle);

private:
  const ::transit_realtime::VehicleDescriptor &_internal_vehicle() const;
  ::transit_realtime::VehicleDescriptor *_internal_mutable_vehicle();

public:
  void unsafe_arena_set_allocated_vehicle(
      ::transit_realtime::VehicleDescriptor *vehicle);
  ::transit_realtime::VehicleDescriptor *unsafe_arena_release_vehicle();

  // optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
  bool has_trip_properties() const;

private:
  bool _internal_has_trip_properties() const;

public:
  void clear_trip_properties();
  const ::transit_realtime::TripUpdate_TripProperties &trip_properties() const;
  ::transit_realtime::TripUpdate_TripProperties *release_trip_properties();
  ::transit_realtime::TripUpdate_TripProperties *mutable_trip_properties();
  void set_allocated_trip_properties(
      ::transit_realtime::TripUpdate_TripProperties *trip_properties);

private:
  const ::transit_realtime::TripUpdate_TripProperties &
  _internal_trip_properties() const;
  ::transit_realtime::TripUpdate_TripProperties *
  _internal_mutable_trip_properties();

public:
  void unsafe_arena_set_allocated_trip_properties(
      ::transit_realtime::TripUpdate_TripProperties *trip_properties);
  ::transit_realtime::TripUpdate_TripProperties *
  unsafe_arena_release_trip_properties();

  // optional uint64 timestamp = 4;
  bool has_timestamp() const;

private:
  bool _internal_has_timestamp() const;

public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

public:
  // optional int32 delay = 5;
  bool has_delay() const;

private:
  bool _internal_has_delay() const;

public:
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TripUpdate)
  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TripUpdate_StopTimeUpdate>
      stop_time_update_;
  ::transit_realtime::TripDescriptor *trip_;
  ::transit_realtime::VehicleDescriptor *vehicle_;
  ::transit_realtime::TripUpdate_TripProperties *trip_properties_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 delay_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class VehiclePosition_CarriageDetails PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.VehiclePosition.CarriageDetails)
                                               */
{
public:
  inline VehiclePosition_CarriageDetails()
      : VehiclePosition_CarriageDetails(nullptr){};
  virtual ~VehiclePosition_CarriageDetails();

  VehiclePosition_CarriageDetails(const VehiclePosition_CarriageDetails &from);
  VehiclePosition_CarriageDetails(
      VehiclePosition_CarriageDetails &&from) noexcept
      : VehiclePosition_CarriageDetails() {
    *this = ::std::move(from);
  }

  inline VehiclePosition_CarriageDetails &
  operator=(const VehiclePosition_CarriageDetails &from) {
    CopyFrom(from);
    return *this;
  }
  inline VehiclePosition_CarriageDetails &
  operator=(VehiclePosition_CarriageDetails &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehiclePosition_CarriageDetails &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const VehiclePosition_CarriageDetails *
  internal_default_instance() {
    return reinterpret_cast<const VehiclePosition_CarriageDetails *>(
        &_VehiclePosition_CarriageDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;

  friend void swap(VehiclePosition_CarriageDetails &a,
                   VehiclePosition_CarriageDetails &b) {
    a.Swap(&b);
  }
  inline void Swap(VehiclePosition_CarriageDetails *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehiclePosition_CarriageDetails *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehiclePosition_CarriageDetails *New() const final {
    return CreateMaybeMessage<VehiclePosition_CarriageDetails>(nullptr);
  }

  VehiclePosition_CarriageDetails *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<VehiclePosition_CarriageDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const VehiclePosition_CarriageDetails &from);
  void MergeFrom(const VehiclePosition_CarriageDetails &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehiclePosition_CarriageDetails *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.VehiclePosition.CarriageDetails";
  }

protected:
  explicit VehiclePosition_CarriageDetails(
      ::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLabelFieldNumber = 2,
    kCarriageSequenceFieldNumber = 5,
    kOccupancyStatusFieldNumber = 3,
    kOccupancyPercentageFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;

private:
  bool _internal_has_id() const;

public:
  void clear_id();
  const std::string &id() const;
  void set_id(const std::string &value);
  void set_id(std::string &&value);
  void set_id(const char *value);
  void set_id(const char *value, size_t size);
  std::string *mutable_id();
  std::string *release_id();
  void set_allocated_id(std::string *id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_id(std::string *id);

private:
  const std::string &_internal_id() const;
  void _internal_set_id(const std::string &value);
  std::string *_internal_mutable_id();

public:
  // optional string label = 2;
  bool has_label() const;

private:
  bool _internal_has_label() const;

public:
  void clear_label();
  const std::string &label() const;
  void set_label(const std::string &value);
  void set_label(std::string &&value);
  void set_label(const char *value);
  void set_label(const char *value, size_t size);
  std::string *mutable_label();
  std::string *release_label();
  void set_allocated_label(std::string *label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_label(std::string *label);

private:
  const std::string &_internal_label() const;
  void _internal_set_label(const std::string &value);
  std::string *_internal_mutable_label();

public:
  // optional uint32 carriage_sequence = 5;
  bool has_carriage_sequence() const;

private:
  bool _internal_has_carriage_sequence() const;

public:
  void clear_carriage_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 carriage_sequence() const;
  void set_carriage_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_carriage_sequence() const;
  void _internal_set_carriage_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

public:
  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status
  // = 3 [default = NO_DATA_AVAILABLE];
  bool has_occupancy_status() const;

private:
  bool _internal_has_occupancy_status() const;

public:
  void clear_occupancy_status();
  ::transit_realtime::VehiclePosition_OccupancyStatus occupancy_status() const;
  void set_occupancy_status(
      ::transit_realtime::VehiclePosition_OccupancyStatus value);

private:
  ::transit_realtime::VehiclePosition_OccupancyStatus
  _internal_occupancy_status() const;
  void _internal_set_occupancy_status(
      ::transit_realtime::VehiclePosition_OccupancyStatus value);

public:
  // optional int32 occupancy_percentage = 4 [default = -1];
  bool has_occupancy_percentage() const;

private:
  bool _internal_has_occupancy_percentage() const;

public:
  void clear_occupancy_percentage();
  ::PROTOBUF_NAMESPACE_ID::int32 occupancy_percentage() const;
  void set_occupancy_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_occupancy_percentage() const;
  void _internal_set_occupancy_percentage(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(VehiclePosition_CarriageDetails)
  // @@protoc_insertion_point(class_scope:transit_realtime.VehiclePosition.CarriageDetails)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carriage_sequence_;
  int occupancy_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 occupancy_percentage_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class VehiclePosition PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.VehiclePosition)
                                               */
{
public:
  inline VehiclePosition() : VehiclePosition(nullptr){};
  virtual ~VehiclePosition();

  VehiclePosition(const VehiclePosition &from);
  VehiclePosition(VehiclePosition &&from) noexcept : VehiclePosition() {
    *this = ::std::move(from);
  }

  inline VehiclePosition &operator=(const VehiclePosition &from) {
    CopyFrom(from);
    return *this;
  }
  inline VehiclePosition &operator=(VehiclePosition &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehiclePosition &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const VehiclePosition *internal_default_instance() {
    return reinterpret_cast<const VehiclePosition *>(
        &_VehiclePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;

  friend void swap(VehiclePosition &a, VehiclePosition &b) { a.Swap(&b); }
  inline void Swap(VehiclePosition *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehiclePosition *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehiclePosition *New() const final {
    return CreateMaybeMessage<VehiclePosition>(nullptr);
  }

  VehiclePosition *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<VehiclePosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const VehiclePosition &from);
  void MergeFrom(const VehiclePosition &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehiclePosition *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.VehiclePosition";
  }

protected:
  explicit VehiclePosition(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef VehiclePosition_CarriageDetails CarriageDetails;

  typedef VehiclePosition_VehicleStopStatus VehicleStopStatus;
  static constexpr VehicleStopStatus INCOMING_AT =
      VehiclePosition_VehicleStopStatus_INCOMING_AT;
  static constexpr VehicleStopStatus STOPPED_AT =
      VehiclePosition_VehicleStopStatus_STOPPED_AT;
  static constexpr VehicleStopStatus IN_TRANSIT_TO =
      VehiclePosition_VehicleStopStatus_IN_TRANSIT_TO;
  static inline bool VehicleStopStatus_IsValid(int value) {
    return VehiclePosition_VehicleStopStatus_IsValid(value);
  }
  static constexpr VehicleStopStatus VehicleStopStatus_MIN =
      VehiclePosition_VehicleStopStatus_VehicleStopStatus_MIN;
  static constexpr VehicleStopStatus VehicleStopStatus_MAX =
      VehiclePosition_VehicleStopStatus_VehicleStopStatus_MAX;
  static constexpr int VehicleStopStatus_ARRAYSIZE =
      VehiclePosition_VehicleStopStatus_VehicleStopStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  VehicleStopStatus_descriptor() {
    return VehiclePosition_VehicleStopStatus_descriptor();
  }
  template <typename T>
  static inline const std::string &VehicleStopStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VehicleStopStatus>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function VehicleStopStatus_Name.");
    return VehiclePosition_VehicleStopStatus_Name(enum_t_value);
  }
  static inline bool VehicleStopStatus_Parse(const std::string &name,
                                             VehicleStopStatus *value) {
    return VehiclePosition_VehicleStopStatus_Parse(name, value);
  }

  typedef VehiclePosition_CongestionLevel CongestionLevel;
  static constexpr CongestionLevel UNKNOWN_CONGESTION_LEVEL =
      VehiclePosition_CongestionLevel_UNKNOWN_CONGESTION_LEVEL;
  static constexpr CongestionLevel RUNNING_SMOOTHLY =
      VehiclePosition_CongestionLevel_RUNNING_SMOOTHLY;
  static constexpr CongestionLevel STOP_AND_GO =
      VehiclePosition_CongestionLevel_STOP_AND_GO;
  static constexpr CongestionLevel CONGESTION =
      VehiclePosition_CongestionLevel_CONGESTION;
  static constexpr CongestionLevel SEVERE_CONGESTION =
      VehiclePosition_CongestionLevel_SEVERE_CONGESTION;
  static inline bool CongestionLevel_IsValid(int value) {
    return VehiclePosition_CongestionLevel_IsValid(value);
  }
  static constexpr CongestionLevel CongestionLevel_MIN =
      VehiclePosition_CongestionLevel_CongestionLevel_MIN;
  static constexpr CongestionLevel CongestionLevel_MAX =
      VehiclePosition_CongestionLevel_CongestionLevel_MAX;
  static constexpr int CongestionLevel_ARRAYSIZE =
      VehiclePosition_CongestionLevel_CongestionLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  CongestionLevel_descriptor() {
    return VehiclePosition_CongestionLevel_descriptor();
  }
  template <typename T>
  static inline const std::string &CongestionLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CongestionLevel>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function CongestionLevel_Name.");
    return VehiclePosition_CongestionLevel_Name(enum_t_value);
  }
  static inline bool CongestionLevel_Parse(const std::string &name,
                                           CongestionLevel *value) {
    return VehiclePosition_CongestionLevel_Parse(name, value);
  }

  typedef VehiclePosition_OccupancyStatus OccupancyStatus;
  static constexpr OccupancyStatus EMPTY =
      VehiclePosition_OccupancyStatus_EMPTY;
  static constexpr OccupancyStatus MANY_SEATS_AVAILABLE =
      VehiclePosition_OccupancyStatus_MANY_SEATS_AVAILABLE;
  static constexpr OccupancyStatus FEW_SEATS_AVAILABLE =
      VehiclePosition_OccupancyStatus_FEW_SEATS_AVAILABLE;
  static constexpr OccupancyStatus STANDING_ROOM_ONLY =
      VehiclePosition_OccupancyStatus_STANDING_ROOM_ONLY;
  static constexpr OccupancyStatus CRUSHED_STANDING_ROOM_ONLY =
      VehiclePosition_OccupancyStatus_CRUSHED_STANDING_ROOM_ONLY;
  static constexpr OccupancyStatus FULL = VehiclePosition_OccupancyStatus_FULL;
  static constexpr OccupancyStatus NOT_ACCEPTING_PASSENGERS =
      VehiclePosition_OccupancyStatus_NOT_ACCEPTING_PASSENGERS;
  static constexpr OccupancyStatus NO_DATA_AVAILABLE =
      VehiclePosition_OccupancyStatus_NO_DATA_AVAILABLE;
  static constexpr OccupancyStatus NOT_BOARDABLE =
      VehiclePosition_OccupancyStatus_NOT_BOARDABLE;
  static inline bool OccupancyStatus_IsValid(int value) {
    return VehiclePosition_OccupancyStatus_IsValid(value);
  }
  static constexpr OccupancyStatus OccupancyStatus_MIN =
      VehiclePosition_OccupancyStatus_OccupancyStatus_MIN;
  static constexpr OccupancyStatus OccupancyStatus_MAX =
      VehiclePosition_OccupancyStatus_OccupancyStatus_MAX;
  static constexpr int OccupancyStatus_ARRAYSIZE =
      VehiclePosition_OccupancyStatus_OccupancyStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  OccupancyStatus_descriptor() {
    return VehiclePosition_OccupancyStatus_descriptor();
  }
  template <typename T>
  static inline const std::string &OccupancyStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OccupancyStatus>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function OccupancyStatus_Name.");
    return VehiclePosition_OccupancyStatus_Name(enum_t_value);
  }
  static inline bool OccupancyStatus_Parse(const std::string &name,
                                           OccupancyStatus *value) {
    return VehiclePosition_OccupancyStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMultiCarriageDetailsFieldNumber = 11,
    kStopIdFieldNumber = 7,
    kTripFieldNumber = 1,
    kPositionFieldNumber = 2,
    kVehicleFieldNumber = 8,
    kCurrentStopSequenceFieldNumber = 3,
    kCongestionLevelFieldNumber = 6,
    kTimestampFieldNumber = 5,
    kOccupancyStatusFieldNumber = 9,
    kOccupancyPercentageFieldNumber = 10,
    kCurrentStatusFieldNumber = 4,
  };
  // repeated .transit_realtime.VehiclePosition.CarriageDetails
  // multi_carriage_details = 11;
  int multi_carriage_details_size() const;

private:
  int _internal_multi_carriage_details_size() const;

public:
  void clear_multi_carriage_details();
  ::transit_realtime::VehiclePosition_CarriageDetails *
  mutable_multi_carriage_details(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::VehiclePosition_CarriageDetails> *
  mutable_multi_carriage_details();

private:
  const ::transit_realtime::VehiclePosition_CarriageDetails &
  _internal_multi_carriage_details(int index) const;
  ::transit_realtime::VehiclePosition_CarriageDetails *
  _internal_add_multi_carriage_details();

public:
  const ::transit_realtime::VehiclePosition_CarriageDetails &
  multi_carriage_details(int index) const;
  ::transit_realtime::VehiclePosition_CarriageDetails *
  add_multi_carriage_details();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::VehiclePosition_CarriageDetails> &
  multi_carriage_details() const;

  // optional string stop_id = 7;
  bool has_stop_id() const;

private:
  bool _internal_has_stop_id() const;

public:
  void clear_stop_id();
  const std::string &stop_id() const;
  void set_stop_id(const std::string &value);
  void set_stop_id(std::string &&value);
  void set_stop_id(const char *value);
  void set_stop_id(const char *value, size_t size);
  std::string *mutable_stop_id();
  std::string *release_stop_id();
  void set_allocated_stop_id(std::string *stop_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_stop_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_stop_id(std::string *stop_id);

private:
  const std::string &_internal_stop_id() const;
  void _internal_set_stop_id(const std::string &value);
  std::string *_internal_mutable_stop_id();

public:
  // optional .transit_realtime.TripDescriptor trip = 1;
  bool has_trip() const;

private:
  bool _internal_has_trip() const;

public:
  void clear_trip();
  const ::transit_realtime::TripDescriptor &trip() const;
  ::transit_realtime::TripDescriptor *release_trip();
  ::transit_realtime::TripDescriptor *mutable_trip();
  void set_allocated_trip(::transit_realtime::TripDescriptor *trip);

private:
  const ::transit_realtime::TripDescriptor &_internal_trip() const;
  ::transit_realtime::TripDescriptor *_internal_mutable_trip();

public:
  void
  unsafe_arena_set_allocated_trip(::transit_realtime::TripDescriptor *trip);
  ::transit_realtime::TripDescriptor *unsafe_arena_release_trip();

  // optional .transit_realtime.Position position = 2;
  bool has_position() const;

private:
  bool _internal_has_position() const;

public:
  void clear_position();
  const ::transit_realtime::Position &position() const;
  ::transit_realtime::Position *release_position();
  ::transit_realtime::Position *mutable_position();
  void set_allocated_position(::transit_realtime::Position *position);

private:
  const ::transit_realtime::Position &_internal_position() const;
  ::transit_realtime::Position *_internal_mutable_position();

public:
  void
  unsafe_arena_set_allocated_position(::transit_realtime::Position *position);
  ::transit_realtime::Position *unsafe_arena_release_position();

  // optional .transit_realtime.VehicleDescriptor vehicle = 8;
  bool has_vehicle() const;

private:
  bool _internal_has_vehicle() const;

public:
  void clear_vehicle();
  const ::transit_realtime::VehicleDescriptor &vehicle() const;
  ::transit_realtime::VehicleDescriptor *release_vehicle();
  ::transit_realtime::VehicleDescriptor *mutable_vehicle();
  void set_allocated_vehicle(::transit_realtime::VehicleDescriptor *vehicle);

private:
  const ::transit_realtime::VehicleDescriptor &_internal_vehicle() const;
  ::transit_realtime::VehicleDescriptor *_internal_mutable_vehicle();

public:
  void unsafe_arena_set_allocated_vehicle(
      ::transit_realtime::VehicleDescriptor *vehicle);
  ::transit_realtime::VehicleDescriptor *unsafe_arena_release_vehicle();

  // optional uint32 current_stop_sequence = 3;
  bool has_current_stop_sequence() const;

private:
  bool _internal_has_current_stop_sequence() const;

public:
  void clear_current_stop_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_stop_sequence() const;
  void set_current_stop_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_stop_sequence() const;
  void
  _internal_set_current_stop_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

public:
  // optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level
  // = 6;
  bool has_congestion_level() const;

private:
  bool _internal_has_congestion_level() const;

public:
  void clear_congestion_level();
  ::transit_realtime::VehiclePosition_CongestionLevel congestion_level() const;
  void set_congestion_level(
      ::transit_realtime::VehiclePosition_CongestionLevel value);

private:
  ::transit_realtime::VehiclePosition_CongestionLevel
  _internal_congestion_level() const;
  void _internal_set_congestion_level(
      ::transit_realtime::VehiclePosition_CongestionLevel value);

public:
  // optional uint64 timestamp = 5;
  bool has_timestamp() const;

private:
  bool _internal_has_timestamp() const;

public:
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

public:
  // optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status
  // = 9;
  bool has_occupancy_status() const;

private:
  bool _internal_has_occupancy_status() const;

public:
  void clear_occupancy_status();
  ::transit_realtime::VehiclePosition_OccupancyStatus occupancy_status() const;
  void set_occupancy_status(
      ::transit_realtime::VehiclePosition_OccupancyStatus value);

private:
  ::transit_realtime::VehiclePosition_OccupancyStatus
  _internal_occupancy_status() const;
  void _internal_set_occupancy_status(
      ::transit_realtime::VehiclePosition_OccupancyStatus value);

public:
  // optional uint32 occupancy_percentage = 10;
  bool has_occupancy_percentage() const;

private:
  bool _internal_has_occupancy_percentage() const;

public:
  void clear_occupancy_percentage();
  ::PROTOBUF_NAMESPACE_ID::uint32 occupancy_percentage() const;
  void set_occupancy_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_occupancy_percentage() const;
  void
  _internal_set_occupancy_percentage(::PROTOBUF_NAMESPACE_ID::uint32 value);

public:
  // optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status
  // = 4 [default = IN_TRANSIT_TO];
  bool has_current_status() const;

private:
  bool _internal_has_current_status() const;

public:
  void clear_current_status();
  ::transit_realtime::VehiclePosition_VehicleStopStatus current_status() const;
  void set_current_status(
      ::transit_realtime::VehiclePosition_VehicleStopStatus value);

private:
  ::transit_realtime::VehiclePosition_VehicleStopStatus
  _internal_current_status() const;
  void _internal_set_current_status(
      ::transit_realtime::VehiclePosition_VehicleStopStatus value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(VehiclePosition)
  // @@protoc_insertion_point(class_scope:transit_realtime.VehiclePosition)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::VehiclePosition_CarriageDetails>
      multi_carriage_details_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_id_;
  ::transit_realtime::TripDescriptor *trip_;
  ::transit_realtime::Position *position_;
  ::transit_realtime::VehicleDescriptor *vehicle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_stop_sequence_;
  int congestion_level_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int occupancy_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 occupancy_percentage_;
  int current_status_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class Alert PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.Alert)
                                                                      */
{
public:
  inline Alert() : Alert(nullptr){};
  virtual ~Alert();

  Alert(const Alert &from);
  Alert(Alert &&from) noexcept : Alert() { *this = ::std::move(from); }

  inline Alert &operator=(const Alert &from) {
    CopyFrom(from);
    return *this;
  }
  inline Alert &operator=(Alert &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Alert &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const Alert *internal_default_instance() {
    return reinterpret_cast<const Alert *>(&_Alert_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;

  friend void swap(Alert &a, Alert &b) { a.Swap(&b); }
  inline void Swap(Alert *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Alert *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Alert *New() const final { return CreateMaybeMessage<Alert>(nullptr); }

  Alert *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<Alert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const Alert &from);
  void MergeFrom(const Alert &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alert *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.Alert";
  }

protected:
  explicit Alert(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef Alert_Cause Cause;
  static constexpr Cause UNKNOWN_CAUSE = Alert_Cause_UNKNOWN_CAUSE;
  static constexpr Cause OTHER_CAUSE = Alert_Cause_OTHER_CAUSE;
  static constexpr Cause TECHNICAL_PROBLEM = Alert_Cause_TECHNICAL_PROBLEM;
  static constexpr Cause STRIKE = Alert_Cause_STRIKE;
  static constexpr Cause DEMONSTRATION = Alert_Cause_DEMONSTRATION;
  static constexpr Cause ACCIDENT = Alert_Cause_ACCIDENT;
  static constexpr Cause HOLIDAY = Alert_Cause_HOLIDAY;
  static constexpr Cause WEATHER = Alert_Cause_WEATHER;
  static constexpr Cause MAINTENANCE = Alert_Cause_MAINTENANCE;
  static constexpr Cause CONSTRUCTION = Alert_Cause_CONSTRUCTION;
  static constexpr Cause POLICE_ACTIVITY = Alert_Cause_POLICE_ACTIVITY;
  static constexpr Cause MEDICAL_EMERGENCY = Alert_Cause_MEDICAL_EMERGENCY;
  static inline bool Cause_IsValid(int value) {
    return Alert_Cause_IsValid(value);
  }
  static constexpr Cause Cause_MIN = Alert_Cause_Cause_MIN;
  static constexpr Cause Cause_MAX = Alert_Cause_Cause_MAX;
  static constexpr int Cause_ARRAYSIZE = Alert_Cause_Cause_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  Cause_descriptor() {
    return Alert_Cause_descriptor();
  }
  template <typename T>
  static inline const std::string &Cause_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Cause>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function Cause_Name.");
    return Alert_Cause_Name(enum_t_value);
  }
  static inline bool Cause_Parse(const std::string &name, Cause *value) {
    return Alert_Cause_Parse(name, value);
  }

  typedef Alert_Effect Effect;
  static constexpr Effect NO_SERVICE = Alert_Effect_NO_SERVICE;
  static constexpr Effect REDUCED_SERVICE = Alert_Effect_REDUCED_SERVICE;
  static constexpr Effect SIGNIFICANT_DELAYS = Alert_Effect_SIGNIFICANT_DELAYS;
  static constexpr Effect DETOUR = Alert_Effect_DETOUR;
  static constexpr Effect ADDITIONAL_SERVICE = Alert_Effect_ADDITIONAL_SERVICE;
  static constexpr Effect MODIFIED_SERVICE = Alert_Effect_MODIFIED_SERVICE;
  static constexpr Effect OTHER_EFFECT = Alert_Effect_OTHER_EFFECT;
  static constexpr Effect UNKNOWN_EFFECT = Alert_Effect_UNKNOWN_EFFECT;
  static constexpr Effect STOP_MOVED = Alert_Effect_STOP_MOVED;
  static constexpr Effect NO_EFFECT = Alert_Effect_NO_EFFECT;
  static constexpr Effect ACCESSIBILITY_ISSUE =
      Alert_Effect_ACCESSIBILITY_ISSUE;
  static inline bool Effect_IsValid(int value) {
    return Alert_Effect_IsValid(value);
  }
  static constexpr Effect Effect_MIN = Alert_Effect_Effect_MIN;
  static constexpr Effect Effect_MAX = Alert_Effect_Effect_MAX;
  static constexpr int Effect_ARRAYSIZE = Alert_Effect_Effect_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  Effect_descriptor() {
    return Alert_Effect_descriptor();
  }
  template <typename T>
  static inline const std::string &Effect_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Effect>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function Effect_Name.");
    return Alert_Effect_Name(enum_t_value);
  }
  static inline bool Effect_Parse(const std::string &name, Effect *value) {
    return Alert_Effect_Parse(name, value);
  }

  typedef Alert_SeverityLevel SeverityLevel;
  static constexpr SeverityLevel UNKNOWN_SEVERITY =
      Alert_SeverityLevel_UNKNOWN_SEVERITY;
  static constexpr SeverityLevel INFO = Alert_SeverityLevel_INFO;
  static constexpr SeverityLevel WARNING = Alert_SeverityLevel_WARNING;
  static constexpr SeverityLevel SEVERE = Alert_SeverityLevel_SEVERE;
  static inline bool SeverityLevel_IsValid(int value) {
    return Alert_SeverityLevel_IsValid(value);
  }
  static constexpr SeverityLevel SeverityLevel_MIN =
      Alert_SeverityLevel_SeverityLevel_MIN;
  static constexpr SeverityLevel SeverityLevel_MAX =
      Alert_SeverityLevel_SeverityLevel_MAX;
  static constexpr int SeverityLevel_ARRAYSIZE =
      Alert_SeverityLevel_SeverityLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  SeverityLevel_descriptor() {
    return Alert_SeverityLevel_descriptor();
  }
  template <typename T>
  static inline const std::string &SeverityLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SeverityLevel>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function SeverityLevel_Name.");
    return Alert_SeverityLevel_Name(enum_t_value);
  }
  static inline bool SeverityLevel_Parse(const std::string &name,
                                         SeverityLevel *value) {
    return Alert_SeverityLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActivePeriodFieldNumber = 1,
    kInformedEntityFieldNumber = 5,
    kUrlFieldNumber = 8,
    kHeaderTextFieldNumber = 10,
    kDescriptionTextFieldNumber = 11,
    kTtsHeaderTextFieldNumber = 12,
    kTtsDescriptionTextFieldNumber = 13,
    kImageFieldNumber = 15,
    kImageAlternativeTextFieldNumber = 16,
    kCauseDetailFieldNumber = 17,
    kEffectDetailFieldNumber = 18,
    kSeverityLevelFieldNumber = 14,
    kCauseFieldNumber = 6,
    kEffectFieldNumber = 7,
  };
  // repeated .transit_realtime.TimeRange active_period = 1;
  int active_period_size() const;

private:
  int _internal_active_period_size() const;

public:
  void clear_active_period();
  ::transit_realtime::TimeRange *mutable_active_period(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::TimeRange> *
  mutable_active_period();

private:
  const ::transit_realtime::TimeRange &_internal_active_period(int index) const;
  ::transit_realtime::TimeRange *_internal_add_active_period();

public:
  const ::transit_realtime::TimeRange &active_period(int index) const;
  ::transit_realtime::TimeRange *add_active_period();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::TimeRange>
      &active_period() const;

  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  int informed_entity_size() const;

private:
  int _internal_informed_entity_size() const;

public:
  void clear_informed_entity();
  ::transit_realtime::EntitySelector *mutable_informed_entity(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::EntitySelector>
      *mutable_informed_entity();

private:
  const ::transit_realtime::EntitySelector &
  _internal_informed_entity(int index) const;
  ::transit_realtime::EntitySelector *_internal_add_informed_entity();

public:
  const ::transit_realtime::EntitySelector &informed_entity(int index) const;
  ::transit_realtime::EntitySelector *add_informed_entity();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::EntitySelector> &
  informed_entity() const;

  // optional .transit_realtime.TranslatedString url = 8;
  bool has_url() const;

private:
  bool _internal_has_url() const;

public:
  void clear_url();
  const ::transit_realtime::TranslatedString &url() const;
  ::transit_realtime::TranslatedString *release_url();
  ::transit_realtime::TranslatedString *mutable_url();
  void set_allocated_url(::transit_realtime::TranslatedString *url);

private:
  const ::transit_realtime::TranslatedString &_internal_url() const;
  ::transit_realtime::TranslatedString *_internal_mutable_url();

public:
  void
  unsafe_arena_set_allocated_url(::transit_realtime::TranslatedString *url);
  ::transit_realtime::TranslatedString *unsafe_arena_release_url();

  // optional .transit_realtime.TranslatedString header_text = 10;
  bool has_header_text() const;

private:
  bool _internal_has_header_text() const;

public:
  void clear_header_text();
  const ::transit_realtime::TranslatedString &header_text() const;
  ::transit_realtime::TranslatedString *release_header_text();
  ::transit_realtime::TranslatedString *mutable_header_text();
  void
  set_allocated_header_text(::transit_realtime::TranslatedString *header_text);

private:
  const ::transit_realtime::TranslatedString &_internal_header_text() const;
  ::transit_realtime::TranslatedString *_internal_mutable_header_text();

public:
  void unsafe_arena_set_allocated_header_text(
      ::transit_realtime::TranslatedString *header_text);
  ::transit_realtime::TranslatedString *unsafe_arena_release_header_text();

  // optional .transit_realtime.TranslatedString description_text = 11;
  bool has_description_text() const;

private:
  bool _internal_has_description_text() const;

public:
  void clear_description_text();
  const ::transit_realtime::TranslatedString &description_text() const;
  ::transit_realtime::TranslatedString *release_description_text();
  ::transit_realtime::TranslatedString *mutable_description_text();
  void set_allocated_description_text(
      ::transit_realtime::TranslatedString *description_text);

private:
  const ::transit_realtime::TranslatedString &
  _internal_description_text() const;
  ::transit_realtime::TranslatedString *_internal_mutable_description_text();

public:
  void unsafe_arena_set_allocated_description_text(
      ::transit_realtime::TranslatedString *description_text);
  ::transit_realtime::TranslatedString *unsafe_arena_release_description_text();

  // optional .transit_realtime.TranslatedString tts_header_text = 12;
  bool has_tts_header_text() const;

private:
  bool _internal_has_tts_header_text() const;

public:
  void clear_tts_header_text();
  const ::transit_realtime::TranslatedString &tts_header_text() const;
  ::transit_realtime::TranslatedString *release_tts_header_text();
  ::transit_realtime::TranslatedString *mutable_tts_header_text();
  void set_allocated_tts_header_text(
      ::transit_realtime::TranslatedString *tts_header_text);

private:
  const ::transit_realtime::TranslatedString &_internal_tts_header_text() const;
  ::transit_realtime::TranslatedString *_internal_mutable_tts_header_text();

public:
  void unsafe_arena_set_allocated_tts_header_text(
      ::transit_realtime::TranslatedString *tts_header_text);
  ::transit_realtime::TranslatedString *unsafe_arena_release_tts_header_text();

  // optional .transit_realtime.TranslatedString tts_description_text = 13;
  bool has_tts_description_text() const;

private:
  bool _internal_has_tts_description_text() const;

public:
  void clear_tts_description_text();
  const ::transit_realtime::TranslatedString &tts_description_text() const;
  ::transit_realtime::TranslatedString *release_tts_description_text();
  ::transit_realtime::TranslatedString *mutable_tts_description_text();
  void set_allocated_tts_description_text(
      ::transit_realtime::TranslatedString *tts_description_text);

private:
  const ::transit_realtime::TranslatedString &
  _internal_tts_description_text() const;
  ::transit_realtime::TranslatedString *
  _internal_mutable_tts_description_text();

public:
  void unsafe_arena_set_allocated_tts_description_text(
      ::transit_realtime::TranslatedString *tts_description_text);
  ::transit_realtime::TranslatedString *
  unsafe_arena_release_tts_description_text();

  // optional .transit_realtime.TranslatedImage image = 15;
  bool has_image() const;

private:
  bool _internal_has_image() const;

public:
  void clear_image();
  const ::transit_realtime::TranslatedImage &image() const;
  ::transit_realtime::TranslatedImage *release_image();
  ::transit_realtime::TranslatedImage *mutable_image();
  void set_allocated_image(::transit_realtime::TranslatedImage *image);

private:
  const ::transit_realtime::TranslatedImage &_internal_image() const;
  ::transit_realtime::TranslatedImage *_internal_mutable_image();

public:
  void
  unsafe_arena_set_allocated_image(::transit_realtime::TranslatedImage *image);
  ::transit_realtime::TranslatedImage *unsafe_arena_release_image();

  // optional .transit_realtime.TranslatedString image_alternative_text = 16;
  bool has_image_alternative_text() const;

private:
  bool _internal_has_image_alternative_text() const;

public:
  void clear_image_alternative_text();
  const ::transit_realtime::TranslatedString &image_alternative_text() const;
  ::transit_realtime::TranslatedString *release_image_alternative_text();
  ::transit_realtime::TranslatedString *mutable_image_alternative_text();
  void set_allocated_image_alternative_text(
      ::transit_realtime::TranslatedString *image_alternative_text);

private:
  const ::transit_realtime::TranslatedString &
  _internal_image_alternative_text() const;
  ::transit_realtime::TranslatedString *
  _internal_mutable_image_alternative_text();

public:
  void unsafe_arena_set_allocated_image_alternative_text(
      ::transit_realtime::TranslatedString *image_alternative_text);
  ::transit_realtime::TranslatedString *
  unsafe_arena_release_image_alternative_text();

  // optional .transit_realtime.TranslatedString cause_detail = 17;
  bool has_cause_detail() const;

private:
  bool _internal_has_cause_detail() const;

public:
  void clear_cause_detail();
  const ::transit_realtime::TranslatedString &cause_detail() const;
  ::transit_realtime::TranslatedString *release_cause_detail();
  ::transit_realtime::TranslatedString *mutable_cause_detail();
  void set_allocated_cause_detail(
      ::transit_realtime::TranslatedString *cause_detail);

private:
  const ::transit_realtime::TranslatedString &_internal_cause_detail() const;
  ::transit_realtime::TranslatedString *_internal_mutable_cause_detail();

public:
  void unsafe_arena_set_allocated_cause_detail(
      ::transit_realtime::TranslatedString *cause_detail);
  ::transit_realtime::TranslatedString *unsafe_arena_release_cause_detail();

  // optional .transit_realtime.TranslatedString effect_detail = 18;
  bool has_effect_detail() const;

private:
  bool _internal_has_effect_detail() const;

public:
  void clear_effect_detail();
  const ::transit_realtime::TranslatedString &effect_detail() const;
  ::transit_realtime::TranslatedString *release_effect_detail();
  ::transit_realtime::TranslatedString *mutable_effect_detail();
  void set_allocated_effect_detail(
      ::transit_realtime::TranslatedString *effect_detail);

private:
  const ::transit_realtime::TranslatedString &_internal_effect_detail() const;
  ::transit_realtime::TranslatedString *_internal_mutable_effect_detail();

public:
  void unsafe_arena_set_allocated_effect_detail(
      ::transit_realtime::TranslatedString *effect_detail);
  ::transit_realtime::TranslatedString *unsafe_arena_release_effect_detail();

  // optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default
  // = UNKNOWN_SEVERITY];
  bool has_severity_level() const;

private:
  bool _internal_has_severity_level() const;

public:
  void clear_severity_level();
  ::transit_realtime::Alert_SeverityLevel severity_level() const;
  void set_severity_level(::transit_realtime::Alert_SeverityLevel value);

private:
  ::transit_realtime::Alert_SeverityLevel _internal_severity_level() const;
  void
  _internal_set_severity_level(::transit_realtime::Alert_SeverityLevel value);

public:
  // optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
  bool has_cause() const;

private:
  bool _internal_has_cause() const;

public:
  void clear_cause();
  ::transit_realtime::Alert_Cause cause() const;
  void set_cause(::transit_realtime::Alert_Cause value);

private:
  ::transit_realtime::Alert_Cause _internal_cause() const;
  void _internal_set_cause(::transit_realtime::Alert_Cause value);

public:
  // optional .transit_realtime.Alert.Effect effect = 7 [default =
  // UNKNOWN_EFFECT];
  bool has_effect() const;

private:
  bool _internal_has_effect() const;

public:
  void clear_effect();
  ::transit_realtime::Alert_Effect effect() const;
  void set_effect(::transit_realtime::Alert_Effect value);

private:
  ::transit_realtime::Alert_Effect _internal_effect() const;
  void _internal_set_effect(::transit_realtime::Alert_Effect value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Alert)
  // @@protoc_insertion_point(class_scope:transit_realtime.Alert)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::TimeRange>
      active_period_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::EntitySelector>
      informed_entity_;
  ::transit_realtime::TranslatedString *url_;
  ::transit_realtime::TranslatedString *header_text_;
  ::transit_realtime::TranslatedString *description_text_;
  ::transit_realtime::TranslatedString *tts_header_text_;
  ::transit_realtime::TranslatedString *tts_description_text_;
  ::transit_realtime::TranslatedImage *image_;
  ::transit_realtime::TranslatedString *image_alternative_text_;
  ::transit_realtime::TranslatedString *cause_detail_;
  ::transit_realtime::TranslatedString *effect_detail_;
  int severity_level_;
  int cause_;
  int effect_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TimeRange PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TimeRange)
                                                                          */
{
public:
  inline TimeRange() : TimeRange(nullptr){};
  virtual ~TimeRange();

  TimeRange(const TimeRange &from);
  TimeRange(TimeRange &&from) noexcept : TimeRange() {
    *this = ::std::move(from);
  }

  inline TimeRange &operator=(const TimeRange &from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange &operator=(TimeRange &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeRange &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TimeRange *internal_default_instance() {
    return reinterpret_cast<const TimeRange *>(&_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;

  friend void swap(TimeRange &a, TimeRange &b) { a.Swap(&b); }
  inline void Swap(TimeRange *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeRange *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimeRange *New() const final {
    return CreateMaybeMessage<TimeRange>(nullptr);
  }

  TimeRange *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TimeRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TimeRange &from);
  void MergeFrom(const TimeRange &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeRange *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TimeRange";
  }

protected:
  explicit TimeRange(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // optional uint64 start = 1;
  bool has_start() const;

private:
  bool _internal_has_start() const;

public:
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);

public:
  // optional uint64 end = 2;
  bool has_end() const;

private:
  bool _internal_has_end() const;

public:
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::uint64 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TimeRange)
  // @@protoc_insertion_point(class_scope:transit_realtime.TimeRange)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class Position PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.Position)
                                                                         */
{
public:
  inline Position() : Position(nullptr){};
  virtual ~Position();

  Position(const Position &from);
  Position(Position &&from) noexcept : Position() { *this = ::std::move(from); }

  inline Position &operator=(const Position &from) {
    CopyFrom(from);
    return *this;
  }
  inline Position &operator=(Position &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const Position *internal_default_instance() {
    return reinterpret_cast<const Position *>(&_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;

  friend void swap(Position &a, Position &b) { a.Swap(&b); }
  inline void Swap(Position *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position *New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const Position &from);
  void MergeFrom(const Position &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.Position";
  }

protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kOdometerFieldNumber = 4,
    kBearingFieldNumber = 3,
    kSpeedFieldNumber = 5,
  };
  // optional float latitude = 1;
  bool has_latitude() const;

private:
  bool _internal_has_latitude() const;

public:
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);

private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);

public:
  // optional float longitude = 2;
  bool has_longitude() const;

private:
  bool _internal_has_longitude() const;

public:
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);

private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);

public:
  // optional double odometer = 4;
  bool has_odometer() const;

private:
  bool _internal_has_odometer() const;

public:
  void clear_odometer();
  double odometer() const;
  void set_odometer(double value);

private:
  double _internal_odometer() const;
  void _internal_set_odometer(double value);

public:
  // optional float bearing = 3;
  bool has_bearing() const;

private:
  bool _internal_has_bearing() const;

public:
  void clear_bearing();
  float bearing() const;
  void set_bearing(float value);

private:
  float _internal_bearing() const;
  void _internal_set_bearing(float value);

public:
  // optional float speed = 5;
  bool has_speed() const;

private:
  bool _internal_has_speed() const;

public:
  void clear_speed();
  float speed() const;
  void set_speed(float value);

private:
  float _internal_speed() const;
  void _internal_set_speed(float value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Position)
  // @@protoc_insertion_point(class_scope:transit_realtime.Position)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float latitude_;
  float longitude_;
  double odometer_;
  float bearing_;
  float speed_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripDescriptor_ModifiedTripSelector PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripDescriptor.ModifiedTripSelector)
                                               */
{
public:
  inline TripDescriptor_ModifiedTripSelector()
      : TripDescriptor_ModifiedTripSelector(nullptr){};
  virtual ~TripDescriptor_ModifiedTripSelector();

  TripDescriptor_ModifiedTripSelector(
      const TripDescriptor_ModifiedTripSelector &from);
  TripDescriptor_ModifiedTripSelector(
      TripDescriptor_ModifiedTripSelector &&from) noexcept
      : TripDescriptor_ModifiedTripSelector() {
    *this = ::std::move(from);
  }

  inline TripDescriptor_ModifiedTripSelector &
  operator=(const TripDescriptor_ModifiedTripSelector &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripDescriptor_ModifiedTripSelector &
  operator=(TripDescriptor_ModifiedTripSelector &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripDescriptor_ModifiedTripSelector &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripDescriptor_ModifiedTripSelector *
  internal_default_instance() {
    return reinterpret_cast<const TripDescriptor_ModifiedTripSelector *>(
        &_TripDescriptor_ModifiedTripSelector_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;

  friend void swap(TripDescriptor_ModifiedTripSelector &a,
                   TripDescriptor_ModifiedTripSelector &b) {
    a.Swap(&b);
  }
  inline void Swap(TripDescriptor_ModifiedTripSelector *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripDescriptor_ModifiedTripSelector *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripDescriptor_ModifiedTripSelector *New() const final {
    return CreateMaybeMessage<TripDescriptor_ModifiedTripSelector>(nullptr);
  }

  TripDescriptor_ModifiedTripSelector *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripDescriptor_ModifiedTripSelector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripDescriptor_ModifiedTripSelector &from);
  void MergeFrom(const TripDescriptor_ModifiedTripSelector &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripDescriptor_ModifiedTripSelector *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripDescriptor.ModifiedTripSelector";
  }

protected:
  explicit TripDescriptor_ModifiedTripSelector(
      ::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModificationsIdFieldNumber = 1,
    kAffectedTripIdFieldNumber = 2,
  };
  // optional string modifications_id = 1;
  bool has_modifications_id() const;

private:
  bool _internal_has_modifications_id() const;

public:
  void clear_modifications_id();
  const std::string &modifications_id() const;
  void set_modifications_id(const std::string &value);
  void set_modifications_id(std::string &&value);
  void set_modifications_id(const char *value);
  void set_modifications_id(const char *value, size_t size);
  std::string *mutable_modifications_id();
  std::string *release_modifications_id();
  void set_allocated_modifications_id(std::string *modifications_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_modifications_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void
  unsafe_arena_set_allocated_modifications_id(std::string *modifications_id);

private:
  const std::string &_internal_modifications_id() const;
  void _internal_set_modifications_id(const std::string &value);
  std::string *_internal_mutable_modifications_id();

public:
  // optional string affected_trip_id = 2;
  bool has_affected_trip_id() const;

private:
  bool _internal_has_affected_trip_id() const;

public:
  void clear_affected_trip_id();
  const std::string &affected_trip_id() const;
  void set_affected_trip_id(const std::string &value);
  void set_affected_trip_id(std::string &&value);
  void set_affected_trip_id(const char *value);
  void set_affected_trip_id(const char *value, size_t size);
  std::string *mutable_affected_trip_id();
  std::string *release_affected_trip_id();
  void set_allocated_affected_trip_id(std::string *affected_trip_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_affected_trip_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void
  unsafe_arena_set_allocated_affected_trip_id(std::string *affected_trip_id);

private:
  const std::string &_internal_affected_trip_id() const;
  void _internal_set_affected_trip_id(const std::string &value);
  std::string *_internal_mutable_affected_trip_id();

public:
  // @@protoc_insertion_point(class_scope:transit_realtime.TripDescriptor.ModifiedTripSelector)
private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modifications_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affected_trip_id_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripDescriptor PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripDescriptor)
                                               */
{
public:
  inline TripDescriptor() : TripDescriptor(nullptr){};
  virtual ~TripDescriptor();

  TripDescriptor(const TripDescriptor &from);
  TripDescriptor(TripDescriptor &&from) noexcept : TripDescriptor() {
    *this = ::std::move(from);
  }

  inline TripDescriptor &operator=(const TripDescriptor &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripDescriptor &operator=(TripDescriptor &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripDescriptor &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripDescriptor *internal_default_instance() {
    return reinterpret_cast<const TripDescriptor *>(
        &_TripDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;

  friend void swap(TripDescriptor &a, TripDescriptor &b) { a.Swap(&b); }
  inline void Swap(TripDescriptor *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripDescriptor *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripDescriptor *New() const final {
    return CreateMaybeMessage<TripDescriptor>(nullptr);
  }

  TripDescriptor *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripDescriptor &from);
  void MergeFrom(const TripDescriptor &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripDescriptor *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripDescriptor";
  }

protected:
  explicit TripDescriptor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef TripDescriptor_ModifiedTripSelector ModifiedTripSelector;

  typedef TripDescriptor_ScheduleRelationship ScheduleRelationship;
  static constexpr ScheduleRelationship SCHEDULED =
      TripDescriptor_ScheduleRelationship_SCHEDULED;
  static constexpr ScheduleRelationship ADDED =
      TripDescriptor_ScheduleRelationship_ADDED;
  static constexpr ScheduleRelationship UNSCHEDULED =
      TripDescriptor_ScheduleRelationship_UNSCHEDULED;
  static constexpr ScheduleRelationship CANCELED =
      TripDescriptor_ScheduleRelationship_CANCELED;
  PROTOBUF_DEPRECATED_ENUM static constexpr ScheduleRelationship REPLACEMENT =
      TripDescriptor_ScheduleRelationship_REPLACEMENT;
  static constexpr ScheduleRelationship DUPLICATED =
      TripDescriptor_ScheduleRelationship_DUPLICATED;
  static constexpr ScheduleRelationship DELETED =
      TripDescriptor_ScheduleRelationship_DELETED;
  static inline bool ScheduleRelationship_IsValid(int value) {
    return TripDescriptor_ScheduleRelationship_IsValid(value);
  }
  static constexpr ScheduleRelationship ScheduleRelationship_MIN =
      TripDescriptor_ScheduleRelationship_ScheduleRelationship_MIN;
  static constexpr ScheduleRelationship ScheduleRelationship_MAX =
      TripDescriptor_ScheduleRelationship_ScheduleRelationship_MAX;
  static constexpr int ScheduleRelationship_ARRAYSIZE =
      TripDescriptor_ScheduleRelationship_ScheduleRelationship_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  ScheduleRelationship_descriptor() {
    return TripDescriptor_ScheduleRelationship_descriptor();
  }
  template <typename T>
  static inline const std::string &ScheduleRelationship_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, ScheduleRelationship>::value ||
            ::std::is_integral<T>::value,
        "Incorrect type passed to function ScheduleRelationship_Name.");
    return TripDescriptor_ScheduleRelationship_Name(enum_t_value);
  }
  static inline bool ScheduleRelationship_Parse(const std::string &name,
                                                ScheduleRelationship *value) {
    return TripDescriptor_ScheduleRelationship_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTripIdFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kStartDateFieldNumber = 3,
    kRouteIdFieldNumber = 5,
    kModifiedTripFieldNumber = 7,
    kScheduleRelationshipFieldNumber = 4,
    kDirectionIdFieldNumber = 6,
  };
  // optional string trip_id = 1;
  bool has_trip_id() const;

private:
  bool _internal_has_trip_id() const;

public:
  void clear_trip_id();
  const std::string &trip_id() const;
  void set_trip_id(const std::string &value);
  void set_trip_id(std::string &&value);
  void set_trip_id(const char *value);
  void set_trip_id(const char *value, size_t size);
  std::string *mutable_trip_id();
  std::string *release_trip_id();
  void set_allocated_trip_id(std::string *trip_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_trip_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_trip_id(std::string *trip_id);

private:
  const std::string &_internal_trip_id() const;
  void _internal_set_trip_id(const std::string &value);
  std::string *_internal_mutable_trip_id();

public:
  // optional string start_time = 2;
  bool has_start_time() const;

private:
  bool _internal_has_start_time() const;

public:
  void clear_start_time();
  const std::string &start_time() const;
  void set_start_time(const std::string &value);
  void set_start_time(std::string &&value);
  void set_start_time(const char *value);
  void set_start_time(const char *value, size_t size);
  std::string *mutable_start_time();
  std::string *release_start_time();
  void set_allocated_start_time(std::string *start_time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_start_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_start_time(std::string *start_time);

private:
  const std::string &_internal_start_time() const;
  void _internal_set_start_time(const std::string &value);
  std::string *_internal_mutable_start_time();

public:
  // optional string start_date = 3;
  bool has_start_date() const;

private:
  bool _internal_has_start_date() const;

public:
  void clear_start_date();
  const std::string &start_date() const;
  void set_start_date(const std::string &value);
  void set_start_date(std::string &&value);
  void set_start_date(const char *value);
  void set_start_date(const char *value, size_t size);
  std::string *mutable_start_date();
  std::string *release_start_date();
  void set_allocated_start_date(std::string *start_date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_start_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_start_date(std::string *start_date);

private:
  const std::string &_internal_start_date() const;
  void _internal_set_start_date(const std::string &value);
  std::string *_internal_mutable_start_date();

public:
  // optional string route_id = 5;
  bool has_route_id() const;

private:
  bool _internal_has_route_id() const;

public:
  void clear_route_id();
  const std::string &route_id() const;
  void set_route_id(const std::string &value);
  void set_route_id(std::string &&value);
  void set_route_id(const char *value);
  void set_route_id(const char *value, size_t size);
  std::string *mutable_route_id();
  std::string *release_route_id();
  void set_allocated_route_id(std::string *route_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_route_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_route_id(std::string *route_id);

private:
  const std::string &_internal_route_id() const;
  void _internal_set_route_id(const std::string &value);
  std::string *_internal_mutable_route_id();

public:
  // optional .transit_realtime.TripDescriptor.ModifiedTripSelector
  // modified_trip = 7;
  bool has_modified_trip() const;

private:
  bool _internal_has_modified_trip() const;

public:
  void clear_modified_trip();
  const ::transit_realtime::TripDescriptor_ModifiedTripSelector &
  modified_trip() const;
  ::transit_realtime::TripDescriptor_ModifiedTripSelector *
  release_modified_trip();
  ::transit_realtime::TripDescriptor_ModifiedTripSelector *
  mutable_modified_trip();
  void set_allocated_modified_trip(
      ::transit_realtime::TripDescriptor_ModifiedTripSelector *modified_trip);

private:
  const ::transit_realtime::TripDescriptor_ModifiedTripSelector &
  _internal_modified_trip() const;
  ::transit_realtime::TripDescriptor_ModifiedTripSelector *
  _internal_mutable_modified_trip();

public:
  void unsafe_arena_set_allocated_modified_trip(
      ::transit_realtime::TripDescriptor_ModifiedTripSelector *modified_trip);
  ::transit_realtime::TripDescriptor_ModifiedTripSelector *
  unsafe_arena_release_modified_trip();

  // optional .transit_realtime.TripDescriptor.ScheduleRelationship
  // schedule_relationship = 4;
  bool has_schedule_relationship() const;

private:
  bool _internal_has_schedule_relationship() const;

public:
  void clear_schedule_relationship();
  ::transit_realtime::TripDescriptor_ScheduleRelationship
  schedule_relationship() const;
  void set_schedule_relationship(
      ::transit_realtime::TripDescriptor_ScheduleRelationship value);

private:
  ::transit_realtime::TripDescriptor_ScheduleRelationship
  _internal_schedule_relationship() const;
  void _internal_set_schedule_relationship(
      ::transit_realtime::TripDescriptor_ScheduleRelationship value);

public:
  // optional uint32 direction_id = 6;
  bool has_direction_id() const;

private:
  bool _internal_has_direction_id() const;

public:
  void clear_direction_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_id() const;
  void set_direction_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction_id() const;
  void _internal_set_direction_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TripDescriptor)
  // @@protoc_insertion_point(class_scope:transit_realtime.TripDescriptor)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trip_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_id_;
  ::transit_realtime::TripDescriptor_ModifiedTripSelector *modified_trip_;
  int schedule_relationship_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_id_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class VehicleDescriptor PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.VehicleDescriptor)
                                               */
{
public:
  inline VehicleDescriptor() : VehicleDescriptor(nullptr){};
  virtual ~VehicleDescriptor();

  VehicleDescriptor(const VehicleDescriptor &from);
  VehicleDescriptor(VehicleDescriptor &&from) noexcept : VehicleDescriptor() {
    *this = ::std::move(from);
  }

  inline VehicleDescriptor &operator=(const VehicleDescriptor &from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleDescriptor &operator=(VehicleDescriptor &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleDescriptor &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const VehicleDescriptor *internal_default_instance() {
    return reinterpret_cast<const VehicleDescriptor *>(
        &_VehicleDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;

  friend void swap(VehicleDescriptor &a, VehicleDescriptor &b) { a.Swap(&b); }
  inline void Swap(VehicleDescriptor *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleDescriptor *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleDescriptor *New() const final {
    return CreateMaybeMessage<VehicleDescriptor>(nullptr);
  }

  VehicleDescriptor *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<VehicleDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const VehicleDescriptor &from);
  void MergeFrom(const VehicleDescriptor &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleDescriptor *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.VehicleDescriptor";
  }

protected:
  explicit VehicleDescriptor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef VehicleDescriptor_WheelchairAccessible WheelchairAccessible;
  static constexpr WheelchairAccessible NO_VALUE =
      VehicleDescriptor_WheelchairAccessible_NO_VALUE;
  static constexpr WheelchairAccessible UNKNOWN =
      VehicleDescriptor_WheelchairAccessible_UNKNOWN;
  static constexpr WheelchairAccessible WHEELCHAIR_ACCESSIBLE =
      VehicleDescriptor_WheelchairAccessible_WHEELCHAIR_ACCESSIBLE;
  static constexpr WheelchairAccessible WHEELCHAIR_INACCESSIBLE =
      VehicleDescriptor_WheelchairAccessible_WHEELCHAIR_INACCESSIBLE;
  static inline bool WheelchairAccessible_IsValid(int value) {
    return VehicleDescriptor_WheelchairAccessible_IsValid(value);
  }
  static constexpr WheelchairAccessible WheelchairAccessible_MIN =
      VehicleDescriptor_WheelchairAccessible_WheelchairAccessible_MIN;
  static constexpr WheelchairAccessible WheelchairAccessible_MAX =
      VehicleDescriptor_WheelchairAccessible_WheelchairAccessible_MAX;
  static constexpr int WheelchairAccessible_ARRAYSIZE =
      VehicleDescriptor_WheelchairAccessible_WheelchairAccessible_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  WheelchairAccessible_descriptor() {
    return VehicleDescriptor_WheelchairAccessible_descriptor();
  }
  template <typename T>
  static inline const std::string &WheelchairAccessible_Name(T enum_t_value) {
    static_assert(
        ::std::is_same<T, WheelchairAccessible>::value ||
            ::std::is_integral<T>::value,
        "Incorrect type passed to function WheelchairAccessible_Name.");
    return VehicleDescriptor_WheelchairAccessible_Name(enum_t_value);
  }
  static inline bool WheelchairAccessible_Parse(const std::string &name,
                                                WheelchairAccessible *value) {
    return VehicleDescriptor_WheelchairAccessible_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLabelFieldNumber = 2,
    kLicensePlateFieldNumber = 3,
    kWheelchairAccessibleFieldNumber = 4,
  };
  // optional string id = 1;
  bool has_id() const;

private:
  bool _internal_has_id() const;

public:
  void clear_id();
  const std::string &id() const;
  void set_id(const std::string &value);
  void set_id(std::string &&value);
  void set_id(const char *value);
  void set_id(const char *value, size_t size);
  std::string *mutable_id();
  std::string *release_id();
  void set_allocated_id(std::string *id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_id(std::string *id);

private:
  const std::string &_internal_id() const;
  void _internal_set_id(const std::string &value);
  std::string *_internal_mutable_id();

public:
  // optional string label = 2;
  bool has_label() const;

private:
  bool _internal_has_label() const;

public:
  void clear_label();
  const std::string &label() const;
  void set_label(const std::string &value);
  void set_label(std::string &&value);
  void set_label(const char *value);
  void set_label(const char *value, size_t size);
  std::string *mutable_label();
  std::string *release_label();
  void set_allocated_label(std::string *label);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_label();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_label(std::string *label);

private:
  const std::string &_internal_label() const;
  void _internal_set_label(const std::string &value);
  std::string *_internal_mutable_label();

public:
  // optional string license_plate = 3;
  bool has_license_plate() const;

private:
  bool _internal_has_license_plate() const;

public:
  void clear_license_plate();
  const std::string &license_plate() const;
  void set_license_plate(const std::string &value);
  void set_license_plate(std::string &&value);
  void set_license_plate(const char *value);
  void set_license_plate(const char *value, size_t size);
  std::string *mutable_license_plate();
  std::string *release_license_plate();
  void set_allocated_license_plate(std::string *license_plate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_license_plate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_license_plate(std::string *license_plate);

private:
  const std::string &_internal_license_plate() const;
  void _internal_set_license_plate(const std::string &value);
  std::string *_internal_mutable_license_plate();

public:
  // optional .transit_realtime.VehicleDescriptor.WheelchairAccessible
  // wheelchair_accessible = 4 [default = NO_VALUE];
  bool has_wheelchair_accessible() const;

private:
  bool _internal_has_wheelchair_accessible() const;

public:
  void clear_wheelchair_accessible();
  ::transit_realtime::VehicleDescriptor_WheelchairAccessible
  wheelchair_accessible() const;
  void set_wheelchair_accessible(
      ::transit_realtime::VehicleDescriptor_WheelchairAccessible value);

private:
  ::transit_realtime::VehicleDescriptor_WheelchairAccessible
  _internal_wheelchair_accessible() const;
  void _internal_set_wheelchair_accessible(
      ::transit_realtime::VehicleDescriptor_WheelchairAccessible value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(VehicleDescriptor)
  // @@protoc_insertion_point(class_scope:transit_realtime.VehicleDescriptor)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr license_plate_;
  int wheelchair_accessible_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class EntitySelector PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.EntitySelector)
                                               */
{
public:
  inline EntitySelector() : EntitySelector(nullptr){};
  virtual ~EntitySelector();

  EntitySelector(const EntitySelector &from);
  EntitySelector(EntitySelector &&from) noexcept : EntitySelector() {
    *this = ::std::move(from);
  }

  inline EntitySelector &operator=(const EntitySelector &from) {
    CopyFrom(from);
    return *this;
  }
  inline EntitySelector &operator=(EntitySelector &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EntitySelector &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const EntitySelector *internal_default_instance() {
    return reinterpret_cast<const EntitySelector *>(
        &_EntitySelector_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;

  friend void swap(EntitySelector &a, EntitySelector &b) { a.Swap(&b); }
  inline void Swap(EntitySelector *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntitySelector *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EntitySelector *New() const final {
    return CreateMaybeMessage<EntitySelector>(nullptr);
  }

  EntitySelector *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<EntitySelector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const EntitySelector &from);
  void MergeFrom(const EntitySelector &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntitySelector *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.EntitySelector";
  }

protected:
  explicit EntitySelector(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgencyIdFieldNumber = 1,
    kRouteIdFieldNumber = 2,
    kStopIdFieldNumber = 5,
    kTripFieldNumber = 4,
    kRouteTypeFieldNumber = 3,
    kDirectionIdFieldNumber = 6,
  };
  // optional string agency_id = 1;
  bool has_agency_id() const;

private:
  bool _internal_has_agency_id() const;

public:
  void clear_agency_id();
  const std::string &agency_id() const;
  void set_agency_id(const std::string &value);
  void set_agency_id(std::string &&value);
  void set_agency_id(const char *value);
  void set_agency_id(const char *value, size_t size);
  std::string *mutable_agency_id();
  std::string *release_agency_id();
  void set_allocated_agency_id(std::string *agency_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_agency_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_agency_id(std::string *agency_id);

private:
  const std::string &_internal_agency_id() const;
  void _internal_set_agency_id(const std::string &value);
  std::string *_internal_mutable_agency_id();

public:
  // optional string route_id = 2;
  bool has_route_id() const;

private:
  bool _internal_has_route_id() const;

public:
  void clear_route_id();
  const std::string &route_id() const;
  void set_route_id(const std::string &value);
  void set_route_id(std::string &&value);
  void set_route_id(const char *value);
  void set_route_id(const char *value, size_t size);
  std::string *mutable_route_id();
  std::string *release_route_id();
  void set_allocated_route_id(std::string *route_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_route_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_route_id(std::string *route_id);

private:
  const std::string &_internal_route_id() const;
  void _internal_set_route_id(const std::string &value);
  std::string *_internal_mutable_route_id();

public:
  // optional string stop_id = 5;
  bool has_stop_id() const;

private:
  bool _internal_has_stop_id() const;

public:
  void clear_stop_id();
  const std::string &stop_id() const;
  void set_stop_id(const std::string &value);
  void set_stop_id(std::string &&value);
  void set_stop_id(const char *value);
  void set_stop_id(const char *value, size_t size);
  std::string *mutable_stop_id();
  std::string *release_stop_id();
  void set_allocated_stop_id(std::string *stop_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_stop_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_stop_id(std::string *stop_id);

private:
  const std::string &_internal_stop_id() const;
  void _internal_set_stop_id(const std::string &value);
  std::string *_internal_mutable_stop_id();

public:
  // optional .transit_realtime.TripDescriptor trip = 4;
  bool has_trip() const;

private:
  bool _internal_has_trip() const;

public:
  void clear_trip();
  const ::transit_realtime::TripDescriptor &trip() const;
  ::transit_realtime::TripDescriptor *release_trip();
  ::transit_realtime::TripDescriptor *mutable_trip();
  void set_allocated_trip(::transit_realtime::TripDescriptor *trip);

private:
  const ::transit_realtime::TripDescriptor &_internal_trip() const;
  ::transit_realtime::TripDescriptor *_internal_mutable_trip();

public:
  void
  unsafe_arena_set_allocated_trip(::transit_realtime::TripDescriptor *trip);
  ::transit_realtime::TripDescriptor *unsafe_arena_release_trip();

  // optional int32 route_type = 3;
  bool has_route_type() const;

private:
  bool _internal_has_route_type() const;

public:
  void clear_route_type();
  ::PROTOBUF_NAMESPACE_ID::int32 route_type() const;
  void set_route_type(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_route_type() const;
  void _internal_set_route_type(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  // optional uint32 direction_id = 6;
  bool has_direction_id() const;

private:
  bool _internal_has_direction_id() const;

public:
  void clear_direction_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_id() const;
  void set_direction_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction_id() const;
  void _internal_set_direction_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(EntitySelector)
  // @@protoc_insertion_point(class_scope:transit_realtime.EntitySelector)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agency_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_id_;
  ::transit_realtime::TripDescriptor *trip_;
  ::PROTOBUF_NAMESPACE_ID::int32 route_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_id_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TranslatedString_Translation PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TranslatedString.Translation)
                                               */
{
public:
  inline TranslatedString_Translation()
      : TranslatedString_Translation(nullptr){};
  virtual ~TranslatedString_Translation();

  TranslatedString_Translation(const TranslatedString_Translation &from);
  TranslatedString_Translation(TranslatedString_Translation &&from) noexcept
      : TranslatedString_Translation() {
    *this = ::std::move(from);
  }

  inline TranslatedString_Translation &
  operator=(const TranslatedString_Translation &from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslatedString_Translation &
  operator=(TranslatedString_Translation &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranslatedString_Translation &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TranslatedString_Translation *
  internal_default_instance() {
    return reinterpret_cast<const TranslatedString_Translation *>(
        &_TranslatedString_Translation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;

  friend void swap(TranslatedString_Translation &a,
                   TranslatedString_Translation &b) {
    a.Swap(&b);
  }
  inline void Swap(TranslatedString_Translation *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslatedString_Translation *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranslatedString_Translation *New() const final {
    return CreateMaybeMessage<TranslatedString_Translation>(nullptr);
  }

  TranslatedString_Translation *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TranslatedString_Translation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TranslatedString_Translation &from);
  void MergeFrom(const TranslatedString_Translation &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslatedString_Translation *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TranslatedString.Translation";
  }

protected:
  explicit TranslatedString_Translation(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // optional string text = 1;
  bool has_text() const;

private:
  bool _internal_has_text() const;

public:
  void clear_text();
  const std::string &text() const;
  void set_text(const std::string &value);
  void set_text(std::string &&value);
  void set_text(const char *value);
  void set_text(const char *value, size_t size);
  std::string *mutable_text();
  std::string *release_text();
  void set_allocated_text(std::string *text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_text(std::string *text);

private:
  const std::string &_internal_text() const;
  void _internal_set_text(const std::string &value);
  std::string *_internal_mutable_text();

public:
  // optional string language = 2;
  bool has_language() const;

private:
  bool _internal_has_language() const;

public:
  void clear_language();
  const std::string &language() const;
  void set_language(const std::string &value);
  void set_language(std::string &&value);
  void set_language(const char *value);
  void set_language(const char *value, size_t size);
  std::string *mutable_language();
  std::string *release_language();
  void set_allocated_language(std::string *language);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_language();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_language(std::string *language);

private:
  const std::string &_internal_language() const;
  void _internal_set_language(const std::string &value);
  std::string *_internal_mutable_language();

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TranslatedString_Translation)
  // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedString.Translation)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TranslatedString PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TranslatedString)
                                               */
{
public:
  inline TranslatedString() : TranslatedString(nullptr){};
  virtual ~TranslatedString();

  TranslatedString(const TranslatedString &from);
  TranslatedString(TranslatedString &&from) noexcept : TranslatedString() {
    *this = ::std::move(from);
  }

  inline TranslatedString &operator=(const TranslatedString &from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslatedString &operator=(TranslatedString &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranslatedString &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TranslatedString *internal_default_instance() {
    return reinterpret_cast<const TranslatedString *>(
        &_TranslatedString_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;

  friend void swap(TranslatedString &a, TranslatedString &b) { a.Swap(&b); }
  inline void Swap(TranslatedString *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslatedString *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranslatedString *New() const final {
    return CreateMaybeMessage<TranslatedString>(nullptr);
  }

  TranslatedString *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TranslatedString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TranslatedString &from);
  void MergeFrom(const TranslatedString &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslatedString *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TranslatedString";
  }

protected:
  explicit TranslatedString(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef TranslatedString_Translation Translation;

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
  };
  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  int translation_size() const;

private:
  int _internal_translation_size() const;

public:
  void clear_translation();
  ::transit_realtime::TranslatedString_Translation *
  mutable_translation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TranslatedString_Translation> *
  mutable_translation();

private:
  const ::transit_realtime::TranslatedString_Translation &
  _internal_translation(int index) const;
  ::transit_realtime::TranslatedString_Translation *_internal_add_translation();

public:
  const ::transit_realtime::TranslatedString_Translation &
  translation(int index) const;
  ::transit_realtime::TranslatedString_Translation *add_translation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TranslatedString_Translation> &
  translation() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TranslatedString)
  // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedString)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TranslatedString_Translation>
      translation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TranslatedImage_LocalizedImage PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TranslatedImage.LocalizedImage)
                                               */
{
public:
  inline TranslatedImage_LocalizedImage()
      : TranslatedImage_LocalizedImage(nullptr){};
  virtual ~TranslatedImage_LocalizedImage();

  TranslatedImage_LocalizedImage(const TranslatedImage_LocalizedImage &from);
  TranslatedImage_LocalizedImage(TranslatedImage_LocalizedImage &&from) noexcept
      : TranslatedImage_LocalizedImage() {
    *this = ::std::move(from);
  }

  inline TranslatedImage_LocalizedImage &
  operator=(const TranslatedImage_LocalizedImage &from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslatedImage_LocalizedImage &
  operator=(TranslatedImage_LocalizedImage &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranslatedImage_LocalizedImage &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TranslatedImage_LocalizedImage *
  internal_default_instance() {
    return reinterpret_cast<const TranslatedImage_LocalizedImage *>(
        &_TranslatedImage_LocalizedImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;

  friend void swap(TranslatedImage_LocalizedImage &a,
                   TranslatedImage_LocalizedImage &b) {
    a.Swap(&b);
  }
  inline void Swap(TranslatedImage_LocalizedImage *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslatedImage_LocalizedImage *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranslatedImage_LocalizedImage *New() const final {
    return CreateMaybeMessage<TranslatedImage_LocalizedImage>(nullptr);
  }

  TranslatedImage_LocalizedImage *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TranslatedImage_LocalizedImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TranslatedImage_LocalizedImage &from);
  void MergeFrom(const TranslatedImage_LocalizedImage &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslatedImage_LocalizedImage *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TranslatedImage.LocalizedImage";
  }

protected:
  explicit TranslatedImage_LocalizedImage(
      ::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kMediaTypeFieldNumber = 2,
    kLanguageFieldNumber = 3,
  };
  // optional string url = 1;
  bool has_url() const;

private:
  bool _internal_has_url() const;

public:
  void clear_url();
  const std::string &url() const;
  void set_url(const std::string &value);
  void set_url(std::string &&value);
  void set_url(const char *value);
  void set_url(const char *value, size_t size);
  std::string *mutable_url();
  std::string *release_url();
  void set_allocated_url(std::string *url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_url(std::string *url);

private:
  const std::string &_internal_url() const;
  void _internal_set_url(const std::string &value);
  std::string *_internal_mutable_url();

public:
  // optional string media_type = 2;
  bool has_media_type() const;

private:
  bool _internal_has_media_type() const;

public:
  void clear_media_type();
  const std::string &media_type() const;
  void set_media_type(const std::string &value);
  void set_media_type(std::string &&value);
  void set_media_type(const char *value);
  void set_media_type(const char *value, size_t size);
  std::string *mutable_media_type();
  std::string *release_media_type();
  void set_allocated_media_type(std::string *media_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_media_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_media_type(std::string *media_type);

private:
  const std::string &_internal_media_type() const;
  void _internal_set_media_type(const std::string &value);
  std::string *_internal_mutable_media_type();

public:
  // optional string language = 3;
  bool has_language() const;

private:
  bool _internal_has_language() const;

public:
  void clear_language();
  const std::string &language() const;
  void set_language(const std::string &value);
  void set_language(std::string &&value);
  void set_language(const char *value);
  void set_language(const char *value, size_t size);
  std::string *mutable_language();
  std::string *release_language();
  void set_allocated_language(std::string *language);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_language();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_language(std::string *language);

private:
  const std::string &_internal_language() const;
  void _internal_set_language(const std::string &value);
  std::string *_internal_mutable_language();

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TranslatedImage_LocalizedImage)
  // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedImage.LocalizedImage)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TranslatedImage PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TranslatedImage)
                                               */
{
public:
  inline TranslatedImage() : TranslatedImage(nullptr){};
  virtual ~TranslatedImage();

  TranslatedImage(const TranslatedImage &from);
  TranslatedImage(TranslatedImage &&from) noexcept : TranslatedImage() {
    *this = ::std::move(from);
  }

  inline TranslatedImage &operator=(const TranslatedImage &from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslatedImage &operator=(TranslatedImage &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranslatedImage &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TranslatedImage *internal_default_instance() {
    return reinterpret_cast<const TranslatedImage *>(
        &_TranslatedImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;

  friend void swap(TranslatedImage &a, TranslatedImage &b) { a.Swap(&b); }
  inline void Swap(TranslatedImage *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslatedImage *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranslatedImage *New() const final {
    return CreateMaybeMessage<TranslatedImage>(nullptr);
  }

  TranslatedImage *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TranslatedImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TranslatedImage &from);
  void MergeFrom(const TranslatedImage &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranslatedImage *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TranslatedImage";
  }

protected:
  explicit TranslatedImage(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef TranslatedImage_LocalizedImage LocalizedImage;

  // accessors -------------------------------------------------------

  enum : int {
    kLocalizedImageFieldNumber = 1,
  };
  // repeated .transit_realtime.TranslatedImage.LocalizedImage localized_image =
  // 1;
  int localized_image_size() const;

private:
  int _internal_localized_image_size() const;

public:
  void clear_localized_image();
  ::transit_realtime::TranslatedImage_LocalizedImage *
  mutable_localized_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TranslatedImage_LocalizedImage> *
  mutable_localized_image();

private:
  const ::transit_realtime::TranslatedImage_LocalizedImage &
  _internal_localized_image(int index) const;
  ::transit_realtime::TranslatedImage_LocalizedImage *
  _internal_add_localized_image();

public:
  const ::transit_realtime::TranslatedImage_LocalizedImage &
  localized_image(int index) const;
  ::transit_realtime::TranslatedImage_LocalizedImage *add_localized_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TranslatedImage_LocalizedImage> &
  localized_image() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TranslatedImage)
  // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedImage)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TranslatedImage_LocalizedImage>
      localized_image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class Shape PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.Shape)
                                                                      */
{
public:
  inline Shape() : Shape(nullptr){};
  virtual ~Shape();

  Shape(const Shape &from);
  Shape(Shape &&from) noexcept : Shape() { *this = ::std::move(from); }

  inline Shape &operator=(const Shape &from) {
    CopyFrom(from);
    return *this;
  }
  inline Shape &operator=(Shape &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Shape &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const Shape *internal_default_instance() {
    return reinterpret_cast<const Shape *>(&_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;

  friend void swap(Shape &a, Shape &b) { a.Swap(&b); }
  inline void Swap(Shape *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Shape *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Shape *New() const final { return CreateMaybeMessage<Shape>(nullptr); }

  Shape *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<Shape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const Shape &from);
  void MergeFrom(const Shape &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shape *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.Shape";
  }

protected:
  explicit Shape(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeIdFieldNumber = 1,
    kEncodedPolylineFieldNumber = 2,
  };
  // optional string shape_id = 1;
  bool has_shape_id() const;

private:
  bool _internal_has_shape_id() const;

public:
  void clear_shape_id();
  const std::string &shape_id() const;
  void set_shape_id(const std::string &value);
  void set_shape_id(std::string &&value);
  void set_shape_id(const char *value);
  void set_shape_id(const char *value, size_t size);
  std::string *mutable_shape_id();
  std::string *release_shape_id();
  void set_allocated_shape_id(std::string *shape_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_shape_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_shape_id(std::string *shape_id);

private:
  const std::string &_internal_shape_id() const;
  void _internal_set_shape_id(const std::string &value);
  std::string *_internal_mutable_shape_id();

public:
  // optional string encoded_polyline = 2;
  bool has_encoded_polyline() const;

private:
  bool _internal_has_encoded_polyline() const;

public:
  void clear_encoded_polyline();
  const std::string &encoded_polyline() const;
  void set_encoded_polyline(const std::string &value);
  void set_encoded_polyline(std::string &&value);
  void set_encoded_polyline(const char *value);
  void set_encoded_polyline(const char *value, size_t size);
  std::string *mutable_encoded_polyline();
  std::string *release_encoded_polyline();
  void set_allocated_encoded_polyline(std::string *encoded_polyline);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_encoded_polyline();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void
  unsafe_arena_set_allocated_encoded_polyline(std::string *encoded_polyline);

private:
  const std::string &_internal_encoded_polyline() const;
  void _internal_set_encoded_polyline(const std::string &value);
  std::string *_internal_mutable_encoded_polyline();

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Shape)
  // @@protoc_insertion_point(class_scope:transit_realtime.Shape)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shape_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoded_polyline_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class Stop PROTOBUF_FINAL : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.Stop)
                                                                     */
{
public:
  inline Stop() : Stop(nullptr){};
  virtual ~Stop();

  Stop(const Stop &from);
  Stop(Stop &&from) noexcept : Stop() { *this = ::std::move(from); }

  inline Stop &operator=(const Stop &from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop &operator=(Stop &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stop &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const Stop *internal_default_instance() {
    return reinterpret_cast<const Stop *>(&_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;

  friend void swap(Stop &a, Stop &b) { a.Swap(&b); }
  inline void Swap(Stop *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stop *New() const final { return CreateMaybeMessage<Stop>(nullptr); }

  Stop *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const Stop &from);
  void MergeFrom(const Stop &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.Stop";
  }

protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef Stop_WheelchairBoarding WheelchairBoarding;
  static constexpr WheelchairBoarding UNKNOWN = Stop_WheelchairBoarding_UNKNOWN;
  static constexpr WheelchairBoarding AVAILABLE =
      Stop_WheelchairBoarding_AVAILABLE;
  static constexpr WheelchairBoarding NOT_AVAILABLE =
      Stop_WheelchairBoarding_NOT_AVAILABLE;
  static inline bool WheelchairBoarding_IsValid(int value) {
    return Stop_WheelchairBoarding_IsValid(value);
  }
  static constexpr WheelchairBoarding WheelchairBoarding_MIN =
      Stop_WheelchairBoarding_WheelchairBoarding_MIN;
  static constexpr WheelchairBoarding WheelchairBoarding_MAX =
      Stop_WheelchairBoarding_WheelchairBoarding_MAX;
  static constexpr int WheelchairBoarding_ARRAYSIZE =
      Stop_WheelchairBoarding_WheelchairBoarding_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor *
  WheelchairBoarding_descriptor() {
    return Stop_WheelchairBoarding_descriptor();
  }
  template <typename T>
  static inline const std::string &WheelchairBoarding_Name(T enum_t_value) {
    static_assert(::std::is_same<T, WheelchairBoarding>::value ||
                      ::std::is_integral<T>::value,
                  "Incorrect type passed to function WheelchairBoarding_Name.");
    return Stop_WheelchairBoarding_Name(enum_t_value);
  }
  static inline bool WheelchairBoarding_Parse(const std::string &name,
                                              WheelchairBoarding *value) {
    return Stop_WheelchairBoarding_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdFieldNumber = 1,
    kZoneIdFieldNumber = 8,
    kParentStationFieldNumber = 11,
    kStopTimezoneFieldNumber = 12,
    kLevelIdFieldNumber = 14,
    kStopCodeFieldNumber = 2,
    kStopNameFieldNumber = 3,
    kTtsStopNameFieldNumber = 4,
    kStopDescFieldNumber = 5,
    kStopUrlFieldNumber = 9,
    kPlatformCodeFieldNumber = 15,
    kStopLatFieldNumber = 6,
    kStopLonFieldNumber = 7,
    kWheelchairBoardingFieldNumber = 13,
  };
  // optional string stop_id = 1;
  bool has_stop_id() const;

private:
  bool _internal_has_stop_id() const;

public:
  void clear_stop_id();
  const std::string &stop_id() const;
  void set_stop_id(const std::string &value);
  void set_stop_id(std::string &&value);
  void set_stop_id(const char *value);
  void set_stop_id(const char *value, size_t size);
  std::string *mutable_stop_id();
  std::string *release_stop_id();
  void set_allocated_stop_id(std::string *stop_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_stop_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_stop_id(std::string *stop_id);

private:
  const std::string &_internal_stop_id() const;
  void _internal_set_stop_id(const std::string &value);
  std::string *_internal_mutable_stop_id();

public:
  // optional string zone_id = 8;
  bool has_zone_id() const;

private:
  bool _internal_has_zone_id() const;

public:
  void clear_zone_id();
  const std::string &zone_id() const;
  void set_zone_id(const std::string &value);
  void set_zone_id(std::string &&value);
  void set_zone_id(const char *value);
  void set_zone_id(const char *value, size_t size);
  std::string *mutable_zone_id();
  std::string *release_zone_id();
  void set_allocated_zone_id(std::string *zone_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_zone_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_zone_id(std::string *zone_id);

private:
  const std::string &_internal_zone_id() const;
  void _internal_set_zone_id(const std::string &value);
  std::string *_internal_mutable_zone_id();

public:
  // optional string parent_station = 11;
  bool has_parent_station() const;

private:
  bool _internal_has_parent_station() const;

public:
  void clear_parent_station();
  const std::string &parent_station() const;
  void set_parent_station(const std::string &value);
  void set_parent_station(std::string &&value);
  void set_parent_station(const char *value);
  void set_parent_station(const char *value, size_t size);
  std::string *mutable_parent_station();
  std::string *release_parent_station();
  void set_allocated_parent_station(std::string *parent_station);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_parent_station();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_parent_station(std::string *parent_station);

private:
  const std::string &_internal_parent_station() const;
  void _internal_set_parent_station(const std::string &value);
  std::string *_internal_mutable_parent_station();

public:
  // optional string stop_timezone = 12;
  bool has_stop_timezone() const;

private:
  bool _internal_has_stop_timezone() const;

public:
  void clear_stop_timezone();
  const std::string &stop_timezone() const;
  void set_stop_timezone(const std::string &value);
  void set_stop_timezone(std::string &&value);
  void set_stop_timezone(const char *value);
  void set_stop_timezone(const char *value, size_t size);
  std::string *mutable_stop_timezone();
  std::string *release_stop_timezone();
  void set_allocated_stop_timezone(std::string *stop_timezone);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_stop_timezone();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_stop_timezone(std::string *stop_timezone);

private:
  const std::string &_internal_stop_timezone() const;
  void _internal_set_stop_timezone(const std::string &value);
  std::string *_internal_mutable_stop_timezone();

public:
  // optional string level_id = 14;
  bool has_level_id() const;

private:
  bool _internal_has_level_id() const;

public:
  void clear_level_id();
  const std::string &level_id() const;
  void set_level_id(const std::string &value);
  void set_level_id(std::string &&value);
  void set_level_id(const char *value);
  void set_level_id(const char *value, size_t size);
  std::string *mutable_level_id();
  std::string *release_level_id();
  void set_allocated_level_id(std::string *level_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_level_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_level_id(std::string *level_id);

private:
  const std::string &_internal_level_id() const;
  void _internal_set_level_id(const std::string &value);
  std::string *_internal_mutable_level_id();

public:
  // optional .transit_realtime.TranslatedString stop_code = 2;
  bool has_stop_code() const;

private:
  bool _internal_has_stop_code() const;

public:
  void clear_stop_code();
  const ::transit_realtime::TranslatedString &stop_code() const;
  ::transit_realtime::TranslatedString *release_stop_code();
  ::transit_realtime::TranslatedString *mutable_stop_code();
  void set_allocated_stop_code(::transit_realtime::TranslatedString *stop_code);

private:
  const ::transit_realtime::TranslatedString &_internal_stop_code() const;
  ::transit_realtime::TranslatedString *_internal_mutable_stop_code();

public:
  void unsafe_arena_set_allocated_stop_code(
      ::transit_realtime::TranslatedString *stop_code);
  ::transit_realtime::TranslatedString *unsafe_arena_release_stop_code();

  // optional .transit_realtime.TranslatedString stop_name = 3;
  bool has_stop_name() const;

private:
  bool _internal_has_stop_name() const;

public:
  void clear_stop_name();
  const ::transit_realtime::TranslatedString &stop_name() const;
  ::transit_realtime::TranslatedString *release_stop_name();
  ::transit_realtime::TranslatedString *mutable_stop_name();
  void set_allocated_stop_name(::transit_realtime::TranslatedString *stop_name);

private:
  const ::transit_realtime::TranslatedString &_internal_stop_name() const;
  ::transit_realtime::TranslatedString *_internal_mutable_stop_name();

public:
  void unsafe_arena_set_allocated_stop_name(
      ::transit_realtime::TranslatedString *stop_name);
  ::transit_realtime::TranslatedString *unsafe_arena_release_stop_name();

  // optional .transit_realtime.TranslatedString tts_stop_name = 4;
  bool has_tts_stop_name() const;

private:
  bool _internal_has_tts_stop_name() const;

public:
  void clear_tts_stop_name();
  const ::transit_realtime::TranslatedString &tts_stop_name() const;
  ::transit_realtime::TranslatedString *release_tts_stop_name();
  ::transit_realtime::TranslatedString *mutable_tts_stop_name();
  void set_allocated_tts_stop_name(
      ::transit_realtime::TranslatedString *tts_stop_name);

private:
  const ::transit_realtime::TranslatedString &_internal_tts_stop_name() const;
  ::transit_realtime::TranslatedString *_internal_mutable_tts_stop_name();

public:
  void unsafe_arena_set_allocated_tts_stop_name(
      ::transit_realtime::TranslatedString *tts_stop_name);
  ::transit_realtime::TranslatedString *unsafe_arena_release_tts_stop_name();

  // optional .transit_realtime.TranslatedString stop_desc = 5;
  bool has_stop_desc() const;

private:
  bool _internal_has_stop_desc() const;

public:
  void clear_stop_desc();
  const ::transit_realtime::TranslatedString &stop_desc() const;
  ::transit_realtime::TranslatedString *release_stop_desc();
  ::transit_realtime::TranslatedString *mutable_stop_desc();
  void set_allocated_stop_desc(::transit_realtime::TranslatedString *stop_desc);

private:
  const ::transit_realtime::TranslatedString &_internal_stop_desc() const;
  ::transit_realtime::TranslatedString *_internal_mutable_stop_desc();

public:
  void unsafe_arena_set_allocated_stop_desc(
      ::transit_realtime::TranslatedString *stop_desc);
  ::transit_realtime::TranslatedString *unsafe_arena_release_stop_desc();

  // optional .transit_realtime.TranslatedString stop_url = 9;
  bool has_stop_url() const;

private:
  bool _internal_has_stop_url() const;

public:
  void clear_stop_url();
  const ::transit_realtime::TranslatedString &stop_url() const;
  ::transit_realtime::TranslatedString *release_stop_url();
  ::transit_realtime::TranslatedString *mutable_stop_url();
  void set_allocated_stop_url(::transit_realtime::TranslatedString *stop_url);

private:
  const ::transit_realtime::TranslatedString &_internal_stop_url() const;
  ::transit_realtime::TranslatedString *_internal_mutable_stop_url();

public:
  void unsafe_arena_set_allocated_stop_url(
      ::transit_realtime::TranslatedString *stop_url);
  ::transit_realtime::TranslatedString *unsafe_arena_release_stop_url();

  // optional .transit_realtime.TranslatedString platform_code = 15;
  bool has_platform_code() const;

private:
  bool _internal_has_platform_code() const;

public:
  void clear_platform_code();
  const ::transit_realtime::TranslatedString &platform_code() const;
  ::transit_realtime::TranslatedString *release_platform_code();
  ::transit_realtime::TranslatedString *mutable_platform_code();
  void set_allocated_platform_code(
      ::transit_realtime::TranslatedString *platform_code);

private:
  const ::transit_realtime::TranslatedString &_internal_platform_code() const;
  ::transit_realtime::TranslatedString *_internal_mutable_platform_code();

public:
  void unsafe_arena_set_allocated_platform_code(
      ::transit_realtime::TranslatedString *platform_code);
  ::transit_realtime::TranslatedString *unsafe_arena_release_platform_code();

  // optional float stop_lat = 6;
  bool has_stop_lat() const;

private:
  bool _internal_has_stop_lat() const;

public:
  void clear_stop_lat();
  float stop_lat() const;
  void set_stop_lat(float value);

private:
  float _internal_stop_lat() const;
  void _internal_set_stop_lat(float value);

public:
  // optional float stop_lon = 7;
  bool has_stop_lon() const;

private:
  bool _internal_has_stop_lon() const;

public:
  void clear_stop_lon();
  float stop_lon() const;
  void set_stop_lon(float value);

private:
  float _internal_stop_lon() const;
  void _internal_set_stop_lon(float value);

public:
  // optional .transit_realtime.Stop.WheelchairBoarding wheelchair_boarding = 13
  // [default = UNKNOWN];
  bool has_wheelchair_boarding() const;

private:
  bool _internal_has_wheelchair_boarding() const;

public:
  void clear_wheelchair_boarding();
  ::transit_realtime::Stop_WheelchairBoarding wheelchair_boarding() const;
  void
  set_wheelchair_boarding(::transit_realtime::Stop_WheelchairBoarding value);

private:
  ::transit_realtime::Stop_WheelchairBoarding
  _internal_wheelchair_boarding() const;
  void _internal_set_wheelchair_boarding(
      ::transit_realtime::Stop_WheelchairBoarding value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Stop)
  // @@protoc_insertion_point(class_scope:transit_realtime.Stop)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_station_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_timezone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_id_;
  ::transit_realtime::TranslatedString *stop_code_;
  ::transit_realtime::TranslatedString *stop_name_;
  ::transit_realtime::TranslatedString *tts_stop_name_;
  ::transit_realtime::TranslatedString *stop_desc_;
  ::transit_realtime::TranslatedString *stop_url_;
  ::transit_realtime::TranslatedString *platform_code_;
  float stop_lat_;
  float stop_lon_;
  int wheelchair_boarding_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripModifications_Modification PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripModifications.Modification)
                                               */
{
public:
  inline TripModifications_Modification()
      : TripModifications_Modification(nullptr){};
  virtual ~TripModifications_Modification();

  TripModifications_Modification(const TripModifications_Modification &from);
  TripModifications_Modification(TripModifications_Modification &&from) noexcept
      : TripModifications_Modification() {
    *this = ::std::move(from);
  }

  inline TripModifications_Modification &
  operator=(const TripModifications_Modification &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripModifications_Modification &
  operator=(TripModifications_Modification &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripModifications_Modification &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripModifications_Modification *
  internal_default_instance() {
    return reinterpret_cast<const TripModifications_Modification *>(
        &_TripModifications_Modification_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;

  friend void swap(TripModifications_Modification &a,
                   TripModifications_Modification &b) {
    a.Swap(&b);
  }
  inline void Swap(TripModifications_Modification *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripModifications_Modification *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripModifications_Modification *New() const final {
    return CreateMaybeMessage<TripModifications_Modification>(nullptr);
  }

  TripModifications_Modification *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripModifications_Modification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripModifications_Modification &from);
  void MergeFrom(const TripModifications_Modification &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripModifications_Modification *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripModifications.Modification";
  }

protected:
  explicit TripModifications_Modification(
      ::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplacementStopsFieldNumber = 4,
    kServiceAlertIdFieldNumber = 5,
    kStartStopSelectorFieldNumber = 1,
    kEndStopSelectorFieldNumber = 2,
    kLastModifiedTimeFieldNumber = 6,
    kPropagatedModificationDelayFieldNumber = 3,
  };
  // repeated .transit_realtime.ReplacementStop replacement_stops = 4;
  int replacement_stops_size() const;

private:
  int _internal_replacement_stops_size() const;

public:
  void clear_replacement_stops();
  ::transit_realtime::ReplacementStop *mutable_replacement_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::ReplacementStop>
      *mutable_replacement_stops();

private:
  const ::transit_realtime::ReplacementStop &
  _internal_replacement_stops(int index) const;
  ::transit_realtime::ReplacementStop *_internal_add_replacement_stops();

public:
  const ::transit_realtime::ReplacementStop &replacement_stops(int index) const;
  ::transit_realtime::ReplacementStop *add_replacement_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::ReplacementStop> &
  replacement_stops() const;

  // optional string service_alert_id = 5;
  bool has_service_alert_id() const;

private:
  bool _internal_has_service_alert_id() const;

public:
  void clear_service_alert_id();
  const std::string &service_alert_id() const;
  void set_service_alert_id(const std::string &value);
  void set_service_alert_id(std::string &&value);
  void set_service_alert_id(const char *value);
  void set_service_alert_id(const char *value, size_t size);
  std::string *mutable_service_alert_id();
  std::string *release_service_alert_id();
  void set_allocated_service_alert_id(std::string *service_alert_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_service_alert_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void
  unsafe_arena_set_allocated_service_alert_id(std::string *service_alert_id);

private:
  const std::string &_internal_service_alert_id() const;
  void _internal_set_service_alert_id(const std::string &value);
  std::string *_internal_mutable_service_alert_id();

public:
  // optional .transit_realtime.StopSelector start_stop_selector = 1;
  bool has_start_stop_selector() const;

private:
  bool _internal_has_start_stop_selector() const;

public:
  void clear_start_stop_selector();
  const ::transit_realtime::StopSelector &start_stop_selector() const;
  ::transit_realtime::StopSelector *release_start_stop_selector();
  ::transit_realtime::StopSelector *mutable_start_stop_selector();
  void set_allocated_start_stop_selector(
      ::transit_realtime::StopSelector *start_stop_selector);

private:
  const ::transit_realtime::StopSelector &_internal_start_stop_selector() const;
  ::transit_realtime::StopSelector *_internal_mutable_start_stop_selector();

public:
  void unsafe_arena_set_allocated_start_stop_selector(
      ::transit_realtime::StopSelector *start_stop_selector);
  ::transit_realtime::StopSelector *unsafe_arena_release_start_stop_selector();

  // optional .transit_realtime.StopSelector end_stop_selector = 2;
  bool has_end_stop_selector() const;

private:
  bool _internal_has_end_stop_selector() const;

public:
  void clear_end_stop_selector();
  const ::transit_realtime::StopSelector &end_stop_selector() const;
  ::transit_realtime::StopSelector *release_end_stop_selector();
  ::transit_realtime::StopSelector *mutable_end_stop_selector();
  void set_allocated_end_stop_selector(
      ::transit_realtime::StopSelector *end_stop_selector);

private:
  const ::transit_realtime::StopSelector &_internal_end_stop_selector() const;
  ::transit_realtime::StopSelector *_internal_mutable_end_stop_selector();

public:
  void unsafe_arena_set_allocated_end_stop_selector(
      ::transit_realtime::StopSelector *end_stop_selector);
  ::transit_realtime::StopSelector *unsafe_arena_release_end_stop_selector();

  // optional uint64 last_modified_time = 6;
  bool has_last_modified_time() const;

private:
  bool _internal_has_last_modified_time() const;

public:
  void clear_last_modified_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_modified_time() const;
  void set_last_modified_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_modified_time() const;
  void _internal_set_last_modified_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

public:
  // optional int32 propagated_modification_delay = 3 [default = 0];
  bool has_propagated_modification_delay() const;

private:
  bool _internal_has_propagated_modification_delay() const;

public:
  void clear_propagated_modification_delay();
  ::PROTOBUF_NAMESPACE_ID::int32 propagated_modification_delay() const;
  void set_propagated_modification_delay(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32
  _internal_propagated_modification_delay() const;
  void _internal_set_propagated_modification_delay(
      ::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TripModifications_Modification)
  // @@protoc_insertion_point(class_scope:transit_realtime.TripModifications.Modification)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::ReplacementStop>
      replacement_stops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_alert_id_;
  ::transit_realtime::StopSelector *start_stop_selector_;
  ::transit_realtime::StopSelector *end_stop_selector_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_modified_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 propagated_modification_delay_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripModifications_SelectedTrips PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripModifications.SelectedTrips)
                                               */
{
public:
  inline TripModifications_SelectedTrips()
      : TripModifications_SelectedTrips(nullptr){};
  virtual ~TripModifications_SelectedTrips();

  TripModifications_SelectedTrips(const TripModifications_SelectedTrips &from);
  TripModifications_SelectedTrips(
      TripModifications_SelectedTrips &&from) noexcept
      : TripModifications_SelectedTrips() {
    *this = ::std::move(from);
  }

  inline TripModifications_SelectedTrips &
  operator=(const TripModifications_SelectedTrips &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripModifications_SelectedTrips &
  operator=(TripModifications_SelectedTrips &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripModifications_SelectedTrips &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripModifications_SelectedTrips *
  internal_default_instance() {
    return reinterpret_cast<const TripModifications_SelectedTrips *>(
        &_TripModifications_SelectedTrips_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;

  friend void swap(TripModifications_SelectedTrips &a,
                   TripModifications_SelectedTrips &b) {
    a.Swap(&b);
  }
  inline void Swap(TripModifications_SelectedTrips *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripModifications_SelectedTrips *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripModifications_SelectedTrips *New() const final {
    return CreateMaybeMessage<TripModifications_SelectedTrips>(nullptr);
  }

  TripModifications_SelectedTrips *
  New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripModifications_SelectedTrips>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripModifications_SelectedTrips &from);
  void MergeFrom(const TripModifications_SelectedTrips &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripModifications_SelectedTrips *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripModifications.SelectedTrips";
  }

protected:
  explicit TripModifications_SelectedTrips(
      ::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTripIdsFieldNumber = 1,
    kShapeIdFieldNumber = 2,
  };
  // repeated string trip_ids = 1;
  int trip_ids_size() const;

private:
  int _internal_trip_ids_size() const;

public:
  void clear_trip_ids();
  const std::string &trip_ids(int index) const;
  std::string *mutable_trip_ids(int index);
  void set_trip_ids(int index, const std::string &value);
  void set_trip_ids(int index, std::string &&value);
  void set_trip_ids(int index, const char *value);
  void set_trip_ids(int index, const char *value, size_t size);
  std::string *add_trip_ids();
  void add_trip_ids(const std::string &value);
  void add_trip_ids(std::string &&value);
  void add_trip_ids(const char *value);
  void add_trip_ids(const char *value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &
  trip_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *mutable_trip_ids();

private:
  const std::string &_internal_trip_ids(int index) const;
  std::string *_internal_add_trip_ids();

public:
  // optional string shape_id = 2;
  bool has_shape_id() const;

private:
  bool _internal_has_shape_id() const;

public:
  void clear_shape_id();
  const std::string &shape_id() const;
  void set_shape_id(const std::string &value);
  void set_shape_id(std::string &&value);
  void set_shape_id(const char *value);
  void set_shape_id(const char *value, size_t size);
  std::string *mutable_shape_id();
  std::string *release_shape_id();
  void set_allocated_shape_id(std::string *shape_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_shape_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_shape_id(std::string *shape_id);

private:
  const std::string &_internal_shape_id() const;
  void _internal_set_shape_id(const std::string &value);
  std::string *_internal_mutable_shape_id();

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TripModifications_SelectedTrips)
  // @@protoc_insertion_point(class_scope:transit_realtime.TripModifications.SelectedTrips)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> trip_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shape_id_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class TripModifications PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripModifications)
                                               */
{
public:
  inline TripModifications() : TripModifications(nullptr){};
  virtual ~TripModifications();

  TripModifications(const TripModifications &from);
  TripModifications(TripModifications &&from) noexcept : TripModifications() {
    *this = ::std::move(from);
  }

  inline TripModifications &operator=(const TripModifications &from) {
    CopyFrom(from);
    return *this;
  }
  inline TripModifications &operator=(TripModifications &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TripModifications &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const TripModifications *internal_default_instance() {
    return reinterpret_cast<const TripModifications *>(
        &_TripModifications_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;

  friend void swap(TripModifications &a, TripModifications &b) { a.Swap(&b); }
  inline void Swap(TripModifications *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripModifications *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TripModifications *New() const final {
    return CreateMaybeMessage<TripModifications>(nullptr);
  }

  TripModifications *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<TripModifications>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const TripModifications &from);
  void MergeFrom(const TripModifications &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TripModifications *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.TripModifications";
  }

protected:
  explicit TripModifications(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  typedef TripModifications_Modification Modification;
  typedef TripModifications_SelectedTrips SelectedTrips;

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedTripsFieldNumber = 1,
    kStartTimesFieldNumber = 2,
    kServiceDatesFieldNumber = 3,
    kModificationsFieldNumber = 4,
  };
  // repeated .transit_realtime.TripModifications.SelectedTrips selected_trips =
  // 1;
  int selected_trips_size() const;

private:
  int _internal_selected_trips_size() const;

public:
  void clear_selected_trips();
  ::transit_realtime::TripModifications_SelectedTrips *
  mutable_selected_trips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TripModifications_SelectedTrips> *
  mutable_selected_trips();

private:
  const ::transit_realtime::TripModifications_SelectedTrips &
  _internal_selected_trips(int index) const;
  ::transit_realtime::TripModifications_SelectedTrips *
  _internal_add_selected_trips();

public:
  const ::transit_realtime::TripModifications_SelectedTrips &
  selected_trips(int index) const;
  ::transit_realtime::TripModifications_SelectedTrips *add_selected_trips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TripModifications_SelectedTrips> &
  selected_trips() const;

  // repeated string start_times = 2;
  int start_times_size() const;

private:
  int _internal_start_times_size() const;

public:
  void clear_start_times();
  const std::string &start_times(int index) const;
  std::string *mutable_start_times(int index);
  void set_start_times(int index, const std::string &value);
  void set_start_times(int index, std::string &&value);
  void set_start_times(int index, const char *value);
  void set_start_times(int index, const char *value, size_t size);
  std::string *add_start_times();
  void add_start_times(const std::string &value);
  void add_start_times(std::string &&value);
  void add_start_times(const char *value);
  void add_start_times(const char *value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &
  start_times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *mutable_start_times();

private:
  const std::string &_internal_start_times(int index) const;
  std::string *_internal_add_start_times();

public:
  // repeated string service_dates = 3;
  int service_dates_size() const;

private:
  int _internal_service_dates_size() const;

public:
  void clear_service_dates();
  const std::string &service_dates(int index) const;
  std::string *mutable_service_dates(int index);
  void set_service_dates(int index, const std::string &value);
  void set_service_dates(int index, std::string &&value);
  void set_service_dates(int index, const char *value);
  void set_service_dates(int index, const char *value, size_t size);
  std::string *add_service_dates();
  void add_service_dates(const std::string &value);
  void add_service_dates(std::string &&value);
  void add_service_dates(const char *value);
  void add_service_dates(const char *value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &
  service_dates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *
  mutable_service_dates();

private:
  const std::string &_internal_service_dates(int index) const;
  std::string *_internal_add_service_dates();

public:
  // repeated .transit_realtime.TripModifications.Modification modifications =
  // 4;
  int modifications_size() const;

private:
  int _internal_modifications_size() const;

public:
  void clear_modifications();
  ::transit_realtime::TripModifications_Modification *
  mutable_modifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TripModifications_Modification> *
  mutable_modifications();

private:
  const ::transit_realtime::TripModifications_Modification &
  _internal_modifications(int index) const;
  ::transit_realtime::TripModifications_Modification *
  _internal_add_modifications();

public:
  const ::transit_realtime::TripModifications_Modification &
  modifications(int index) const;
  ::transit_realtime::TripModifications_Modification *add_modifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TripModifications_Modification> &
  modifications() const;

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(TripModifications)
  // @@protoc_insertion_point(class_scope:transit_realtime.TripModifications)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TripModifications_SelectedTrips>
      selected_trips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> start_times_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_dates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
      ::transit_realtime::TripModifications_Modification>
      modifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class StopSelector PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.StopSelector)
                                               */
{
public:
  inline StopSelector() : StopSelector(nullptr){};
  virtual ~StopSelector();

  StopSelector(const StopSelector &from);
  StopSelector(StopSelector &&from) noexcept : StopSelector() {
    *this = ::std::move(from);
  }

  inline StopSelector &operator=(const StopSelector &from) {
    CopyFrom(from);
    return *this;
  }
  inline StopSelector &operator=(StopSelector &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopSelector &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const StopSelector *internal_default_instance() {
    return reinterpret_cast<const StopSelector *>(
        &_StopSelector_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;

  friend void swap(StopSelector &a, StopSelector &b) { a.Swap(&b); }
  inline void Swap(StopSelector *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopSelector *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopSelector *New() const final {
    return CreateMaybeMessage<StopSelector>(nullptr);
  }

  StopSelector *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<StopSelector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const StopSelector &from);
  void MergeFrom(const StopSelector &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopSelector *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.StopSelector";
  }

protected:
  explicit StopSelector(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdFieldNumber = 2,
    kStopSequenceFieldNumber = 1,
  };
  // optional string stop_id = 2;
  bool has_stop_id() const;

private:
  bool _internal_has_stop_id() const;

public:
  void clear_stop_id();
  const std::string &stop_id() const;
  void set_stop_id(const std::string &value);
  void set_stop_id(std::string &&value);
  void set_stop_id(const char *value);
  void set_stop_id(const char *value, size_t size);
  std::string *mutable_stop_id();
  std::string *release_stop_id();
  void set_allocated_stop_id(std::string *stop_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_stop_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_stop_id(std::string *stop_id);

private:
  const std::string &_internal_stop_id() const;
  void _internal_set_stop_id(const std::string &value);
  std::string *_internal_mutable_stop_id();

public:
  // optional uint32 stop_sequence = 1;
  bool has_stop_sequence() const;

private:
  bool _internal_has_stop_sequence() const;

public:
  void clear_stop_sequence();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_sequence() const;
  void set_stop_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_sequence() const;
  void _internal_set_stop_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(StopSelector)
  // @@protoc_insertion_point(class_scope:transit_realtime.StopSelector)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_sequence_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// -------------------------------------------------------------------

class ReplacementStop PROTOBUF_FINAL
    : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transit_realtime.ReplacementStop)
                                               */
{
public:
  inline ReplacementStop() : ReplacementStop(nullptr){};
  virtual ~ReplacementStop();

  ReplacementStop(const ReplacementStop &from);
  ReplacementStop(ReplacementStop &&from) noexcept : ReplacementStop() {
    *this = ::std::move(from);
  }

  inline ReplacementStop &operator=(const ReplacementStop &from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplacementStop &operator=(ReplacementStop &&from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from)
        InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &
  unknown_fields() const {
    return _internal_metadata_
        .unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
            ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields() {
    return _internal_metadata_
        .mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplacementStop &default_instance();

  static void InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
  static inline const ReplacementStop *internal_default_instance() {
    return reinterpret_cast<const ReplacementStop *>(
        &_ReplacementStop_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;

  friend void swap(ReplacementStop &a, ReplacementStop &b) { a.Swap(&b); }
  inline void Swap(ReplacementStop *other) {
    if (other == this)
      return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplacementStop *other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplacementStop *New() const final {
    return CreateMaybeMessage<ReplacementStop>(nullptr);
  }

  ReplacementStop *New(::PROTOBUF_NAMESPACE_ID::Arena *arena) const final {
    return CreateMaybeMessage<ReplacementStop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message &from) final;
  void CopyFrom(const ReplacementStop &from);
  void MergeFrom(const ReplacementStop &from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char *
  _InternalParse(const char *ptr,
                 ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8 *_InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8 *target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplacementStop *other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transit_realtime.ReplacementStop";
  }

protected:
  explicit ReplacementStop(::PROTOBUF_NAMESPACE_ID::Arena *arena);

private:
  static void ArenaDtor(void *object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

public:
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
        &::descriptor_table_gtfs_2drealtime_2eproto);
    return ::descriptor_table_gtfs_2drealtime_2eproto
        .file_level_metadata[kIndexInFileMessages];
  }

public:
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdFieldNumber = 2,
    kTravelTimeToStopFieldNumber = 1,
  };
  // optional string stop_id = 2;
  bool has_stop_id() const;

private:
  bool _internal_has_stop_id() const;

public:
  void clear_stop_id();
  const std::string &stop_id() const;
  void set_stop_id(const std::string &value);
  void set_stop_id(std::string &&value);
  void set_stop_id(const char *value);
  void set_stop_id(const char *value, size_t size);
  std::string *mutable_stop_id();
  std::string *release_stop_id();
  void set_allocated_stop_id(std::string *stop_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  std::string *unsafe_arena_release_stop_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED(
      "The unsafe_arena_ accessors for"
      "    string fields are deprecated and will be removed in a"
      "    future release.")
  void unsafe_arena_set_allocated_stop_id(std::string *stop_id);

private:
  const std::string &_internal_stop_id() const;
  void _internal_set_stop_id(const std::string &value);
  std::string *_internal_mutable_stop_id();

public:
  // optional int32 travel_time_to_stop = 1;
  bool has_travel_time_to_stop() const;

private:
  bool _internal_has_travel_time_to_stop() const;

public:
  void clear_travel_time_to_stop();
  ::PROTOBUF_NAMESPACE_ID::int32 travel_time_to_stop() const;
  void set_travel_time_to_stop(::PROTOBUF_NAMESPACE_ID::int32 value);

private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_travel_time_to_stop() const;
  void _internal_set_travel_time_to_stop(::PROTOBUF_NAMESPACE_ID::int32 value);

public:
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(ReplacementStop)
  // @@protoc_insertion_point(class_scope:transit_realtime.ReplacementStop)
private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 travel_time_to_stop_;
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
// FeedMessage

// optional .transit_realtime.FeedHeader header = 1;
inline bool FeedMessage::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool FeedMessage::has_header() const { return _internal_has_header(); }
inline void FeedMessage::clear_header() {
  if (header_ != nullptr)
    header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::FeedHeader &
FeedMessage::_internal_header() const {
  const ::transit_realtime::FeedHeader *p = header_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::FeedHeader *>(
                   &::transit_realtime::_FeedHeader_default_instance_);
}
inline const ::transit_realtime::FeedHeader &FeedMessage::header() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedMessage.header)
  return _internal_header();
}
inline void FeedMessage::unsafe_arena_set_allocated_header(
    ::transit_realtime::FeedHeader *header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedMessage.header)
}
inline ::transit_realtime::FeedHeader *FeedMessage::release_header() {
  auto temp = unsafe_arena_release_header();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::FeedHeader *
FeedMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedMessage.header)
  _has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::FeedHeader *temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::transit_realtime::FeedHeader *FeedMessage::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::FeedHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::transit_realtime::FeedHeader *FeedMessage::mutable_header() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedMessage.header)
  return _internal_mutable_header();
}
inline void
FeedMessage::set_allocated_header(::transit_realtime::FeedHeader *header) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedMessage.header)
}

// repeated .transit_realtime.FeedEntity entity = 2;
inline int FeedMessage::_internal_entity_size() const { return entity_.size(); }
inline int FeedMessage::entity_size() const { return _internal_entity_size(); }
inline void FeedMessage::clear_entity() { entity_.Clear(); }
inline ::transit_realtime::FeedEntity *FeedMessage::mutable_entity(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedMessage.entity)
  return entity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::FeedEntity>
    *FeedMessage::mutable_entity() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.FeedMessage.entity)
  return &entity_;
}
inline const ::transit_realtime::FeedEntity &
FeedMessage::_internal_entity(int index) const {
  return entity_.Get(index);
}
inline const ::transit_realtime::FeedEntity &
FeedMessage::entity(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedMessage.entity)
  return _internal_entity(index);
}
inline ::transit_realtime::FeedEntity *FeedMessage::_internal_add_entity() {
  return entity_.Add();
}
inline ::transit_realtime::FeedEntity *FeedMessage::add_entity() {
  // @@protoc_insertion_point(field_add:transit_realtime.FeedMessage.entity)
  return _internal_add_entity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::FeedEntity> &
FeedMessage::entity() const {
  // @@protoc_insertion_point(field_list:transit_realtime.FeedMessage.entity)
  return entity_;
}

// -------------------------------------------------------------------

// FeedHeader

// optional string gtfs_realtime_version = 1;
inline bool FeedHeader::_internal_has_gtfs_realtime_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeedHeader::has_gtfs_realtime_version() const {
  return _internal_has_gtfs_realtime_version();
}
inline void FeedHeader::clear_gtfs_realtime_version() {
  gtfs_realtime_version_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &FeedHeader::gtfs_realtime_version() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedHeader.gtfs_realtime_version)
  return _internal_gtfs_realtime_version();
}
inline void FeedHeader::set_gtfs_realtime_version(const std::string &value) {
  _internal_set_gtfs_realtime_version(value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedHeader.gtfs_realtime_version)
}
inline std::string *FeedHeader::mutable_gtfs_realtime_version() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedHeader.gtfs_realtime_version)
  return _internal_mutable_gtfs_realtime_version();
}
inline const std::string &FeedHeader::_internal_gtfs_realtime_version() const {
  return gtfs_realtime_version_.Get();
}
inline void
FeedHeader::_internal_set_gtfs_realtime_version(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  gtfs_realtime_version_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void FeedHeader::set_gtfs_realtime_version(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  gtfs_realtime_version_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.FeedHeader.gtfs_realtime_version)
}
inline void FeedHeader::set_gtfs_realtime_version(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  gtfs_realtime_version_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.FeedHeader.gtfs_realtime_version)
}
inline void FeedHeader::set_gtfs_realtime_version(const char *value,
                                                  size_t size) {
  _has_bits_[0] |= 0x00000001u;
  gtfs_realtime_version_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.FeedHeader.gtfs_realtime_version)
}
inline std::string *FeedHeader::_internal_mutable_gtfs_realtime_version() {
  _has_bits_[0] |= 0x00000001u;
  return gtfs_realtime_version_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *FeedHeader::release_gtfs_realtime_version() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedHeader.gtfs_realtime_version)
  if (!_internal_has_gtfs_realtime_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return gtfs_realtime_version_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FeedHeader::set_allocated_gtfs_realtime_version(
    std::string *gtfs_realtime_version) {
  if (gtfs_realtime_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gtfs_realtime_version_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gtfs_realtime_version, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedHeader.gtfs_realtime_version)
}
inline std::string *FeedHeader::unsafe_arena_release_gtfs_realtime_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.FeedHeader.gtfs_realtime_version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return gtfs_realtime_version_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FeedHeader::unsafe_arena_set_allocated_gtfs_realtime_version(
    std::string *gtfs_realtime_version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (gtfs_realtime_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gtfs_realtime_version_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      gtfs_realtime_version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedHeader.gtfs_realtime_version)
}

// optional .transit_realtime.FeedHeader.Incrementality incrementality = 2
// [default = FULL_DATASET];
inline bool FeedHeader::_internal_has_incrementality() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FeedHeader::has_incrementality() const {
  return _internal_has_incrementality();
}
inline void FeedHeader::clear_incrementality() {
  incrementality_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::transit_realtime::FeedHeader_Incrementality
FeedHeader::_internal_incrementality() const {
  return static_cast<::transit_realtime::FeedHeader_Incrementality>(
      incrementality_);
}
inline ::transit_realtime::FeedHeader_Incrementality
FeedHeader::incrementality() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedHeader.incrementality)
  return _internal_incrementality();
}
inline void FeedHeader::_internal_set_incrementality(
    ::transit_realtime::FeedHeader_Incrementality value) {
  assert(::transit_realtime::FeedHeader_Incrementality_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  incrementality_ = value;
}
inline void FeedHeader::set_incrementality(
    ::transit_realtime::FeedHeader_Incrementality value) {
  _internal_set_incrementality(value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedHeader.incrementality)
}

// optional uint64 timestamp = 3;
inline bool FeedHeader::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeedHeader::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void FeedHeader::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeedHeader::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeedHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedHeader.timestamp)
  return _internal_timestamp();
}
inline void
FeedHeader::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  timestamp_ = value;
}
inline void FeedHeader::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedHeader.timestamp)
}

// -------------------------------------------------------------------

// FeedEntity

// optional string id = 1;
inline bool FeedEntity::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeedEntity::has_id() const { return _internal_has_id(); }
inline void FeedEntity::clear_id() {
  id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &FeedEntity::id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.id)
  return _internal_id();
}
inline void FeedEntity::set_id(const std::string &value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedEntity.id)
}
inline std::string *FeedEntity::mutable_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.id)
  return _internal_mutable_id();
}
inline const std::string &FeedEntity::_internal_id() const { return id_.Get(); }
inline void FeedEntity::_internal_set_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          value, GetArena());
}
inline void FeedEntity::set_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.FeedEntity.id)
}
inline void FeedEntity::set_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.FeedEntity.id)
}
inline void FeedEntity::set_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          ::std::string(reinterpret_cast<const char *>(value), size),
          GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.FeedEntity.id)
}
inline std::string *FeedEntity::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *FeedEntity::release_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FeedEntity::set_allocated_id(std::string *id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.id)
}
inline std::string *FeedEntity::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.FeedEntity.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FeedEntity::unsafe_arena_set_allocated_id(std::string *id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.id)
}

// optional bool is_deleted = 2 [default = false];
inline bool FeedEntity::_internal_has_is_deleted() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool FeedEntity::has_is_deleted() const {
  return _internal_has_is_deleted();
}
inline void FeedEntity::clear_is_deleted() {
  is_deleted_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool FeedEntity::_internal_is_deleted() const { return is_deleted_; }
inline bool FeedEntity::is_deleted() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.is_deleted)
  return _internal_is_deleted();
}
inline void FeedEntity::_internal_set_is_deleted(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_deleted_ = value;
}
inline void FeedEntity::set_is_deleted(bool value) {
  _internal_set_is_deleted(value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedEntity.is_deleted)
}

// optional .transit_realtime.TripUpdate trip_update = 3;
inline bool FeedEntity::_internal_has_trip_update() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || trip_update_ != nullptr);
  return value;
}
inline bool FeedEntity::has_trip_update() const {
  return _internal_has_trip_update();
}
inline void FeedEntity::clear_trip_update() {
  if (trip_update_ != nullptr)
    trip_update_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::TripUpdate &
FeedEntity::_internal_trip_update() const {
  const ::transit_realtime::TripUpdate *p = trip_update_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TripUpdate *>(
                   &::transit_realtime::_TripUpdate_default_instance_);
}
inline const ::transit_realtime::TripUpdate &FeedEntity::trip_update() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.trip_update)
  return _internal_trip_update();
}
inline void FeedEntity::unsafe_arena_set_allocated_trip_update(
    ::transit_realtime::TripUpdate *trip_update) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        trip_update_);
  }
  trip_update_ = trip_update;
  if (trip_update) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.trip_update)
}
inline ::transit_realtime::TripUpdate *FeedEntity::release_trip_update() {
  auto temp = unsafe_arena_release_trip_update();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripUpdate *
FeedEntity::unsafe_arena_release_trip_update() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.trip_update)
  _has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::TripUpdate *temp = trip_update_;
  trip_update_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripUpdate *
FeedEntity::_internal_mutable_trip_update() {
  _has_bits_[0] |= 0x00000002u;
  if (trip_update_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::TripUpdate>(GetArena());
    trip_update_ = p;
  }
  return trip_update_;
}
inline ::transit_realtime::TripUpdate *FeedEntity::mutable_trip_update() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.trip_update)
  return _internal_mutable_trip_update();
}
inline void FeedEntity::set_allocated_trip_update(
    ::transit_realtime::TripUpdate *trip_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trip_update_;
  }
  if (trip_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trip_update);
    if (message_arena != submessage_arena) {
      trip_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trip_update, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trip_update_ = trip_update;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.trip_update)
}

// optional .transit_realtime.VehiclePosition vehicle = 4;
inline bool FeedEntity::_internal_has_vehicle() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_ != nullptr);
  return value;
}
inline bool FeedEntity::has_vehicle() const { return _internal_has_vehicle(); }
inline void FeedEntity::clear_vehicle() {
  if (vehicle_ != nullptr)
    vehicle_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::transit_realtime::VehiclePosition &
FeedEntity::_internal_vehicle() const {
  const ::transit_realtime::VehiclePosition *p = vehicle_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::VehiclePosition *>(
                   &::transit_realtime::_VehiclePosition_default_instance_);
}
inline const ::transit_realtime::VehiclePosition &FeedEntity::vehicle() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.vehicle)
  return _internal_vehicle();
}
inline void FeedEntity::unsafe_arena_set_allocated_vehicle(
    ::transit_realtime::VehiclePosition *vehicle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(vehicle_);
  }
  vehicle_ = vehicle;
  if (vehicle) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.vehicle)
}
inline ::transit_realtime::VehiclePosition *FeedEntity::release_vehicle() {
  auto temp = unsafe_arena_release_vehicle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::VehiclePosition *
FeedEntity::unsafe_arena_release_vehicle() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.vehicle)
  _has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::VehiclePosition *temp = vehicle_;
  vehicle_ = nullptr;
  return temp;
}
inline ::transit_realtime::VehiclePosition *
FeedEntity::_internal_mutable_vehicle() {
  _has_bits_[0] |= 0x00000004u;
  if (vehicle_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::VehiclePosition>(GetArena());
    vehicle_ = p;
  }
  return vehicle_;
}
inline ::transit_realtime::VehiclePosition *FeedEntity::mutable_vehicle() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.vehicle)
  return _internal_mutable_vehicle();
}
inline void FeedEntity::set_allocated_vehicle(
    ::transit_realtime::VehiclePosition *vehicle) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_;
  }
  if (vehicle) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle);
    if (message_arena != submessage_arena) {
      vehicle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vehicle_ = vehicle;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.vehicle)
}

// optional .transit_realtime.Alert alert = 5;
inline bool FeedEntity::_internal_has_alert() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || alert_ != nullptr);
  return value;
}
inline bool FeedEntity::has_alert() const { return _internal_has_alert(); }
inline void FeedEntity::clear_alert() {
  if (alert_ != nullptr)
    alert_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::transit_realtime::Alert &FeedEntity::_internal_alert() const {
  const ::transit_realtime::Alert *p = alert_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::transit_realtime::Alert *>(
                            &::transit_realtime::_Alert_default_instance_);
}
inline const ::transit_realtime::Alert &FeedEntity::alert() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.alert)
  return _internal_alert();
}
inline void
FeedEntity::unsafe_arena_set_allocated_alert(::transit_realtime::Alert *alert) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(alert_);
  }
  alert_ = alert;
  if (alert) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.alert)
}
inline ::transit_realtime::Alert *FeedEntity::release_alert() {
  auto temp = unsafe_arena_release_alert();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::Alert *FeedEntity::unsafe_arena_release_alert() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.alert)
  _has_bits_[0] &= ~0x00000008u;
  ::transit_realtime::Alert *temp = alert_;
  alert_ = nullptr;
  return temp;
}
inline ::transit_realtime::Alert *FeedEntity::_internal_mutable_alert() {
  _has_bits_[0] |= 0x00000008u;
  if (alert_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::Alert>(GetArena());
    alert_ = p;
  }
  return alert_;
}
inline ::transit_realtime::Alert *FeedEntity::mutable_alert() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.alert)
  return _internal_mutable_alert();
}
inline void FeedEntity::set_allocated_alert(::transit_realtime::Alert *alert) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete alert_;
  }
  if (alert) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(alert);
    if (message_arena != submessage_arena) {
      alert = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alert, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  alert_ = alert;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.alert)
}

// optional .transit_realtime.Shape shape = 6;
inline bool FeedEntity::_internal_has_shape() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || shape_ != nullptr);
  return value;
}
inline bool FeedEntity::has_shape() const { return _internal_has_shape(); }
inline void FeedEntity::clear_shape() {
  if (shape_ != nullptr)
    shape_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::transit_realtime::Shape &FeedEntity::_internal_shape() const {
  const ::transit_realtime::Shape *p = shape_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::transit_realtime::Shape *>(
                            &::transit_realtime::_Shape_default_instance_);
}
inline const ::transit_realtime::Shape &FeedEntity::shape() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.shape)
  return _internal_shape();
}
inline void
FeedEntity::unsafe_arena_set_allocated_shape(::transit_realtime::Shape *shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(shape_);
  }
  shape_ = shape;
  if (shape) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.shape)
}
inline ::transit_realtime::Shape *FeedEntity::release_shape() {
  auto temp = unsafe_arena_release_shape();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::Shape *FeedEntity::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.shape)
  _has_bits_[0] &= ~0x00000010u;
  ::transit_realtime::Shape *temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::transit_realtime::Shape *FeedEntity::_internal_mutable_shape() {
  _has_bits_[0] |= 0x00000010u;
  if (shape_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::Shape>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::transit_realtime::Shape *FeedEntity::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.shape)
  return _internal_mutable_shape();
}
inline void FeedEntity::set_allocated_shape(::transit_realtime::Shape *shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.shape)
}

// optional .transit_realtime.Stop stop = 7;
inline bool FeedEntity::_internal_has_stop() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || stop_ != nullptr);
  return value;
}
inline bool FeedEntity::has_stop() const { return _internal_has_stop(); }
inline void FeedEntity::clear_stop() {
  if (stop_ != nullptr)
    stop_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::transit_realtime::Stop &FeedEntity::_internal_stop() const {
  const ::transit_realtime::Stop *p = stop_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::transit_realtime::Stop *>(
                            &::transit_realtime::_Stop_default_instance_);
}
inline const ::transit_realtime::Stop &FeedEntity::stop() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.stop)
  return _internal_stop();
}
inline void
FeedEntity::unsafe_arena_set_allocated_stop(::transit_realtime::Stop *stop) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(stop_);
  }
  stop_ = stop;
  if (stop) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.stop)
}
inline ::transit_realtime::Stop *FeedEntity::release_stop() {
  auto temp = unsafe_arena_release_stop();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::Stop *FeedEntity::unsafe_arena_release_stop() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.stop)
  _has_bits_[0] &= ~0x00000020u;
  ::transit_realtime::Stop *temp = stop_;
  stop_ = nullptr;
  return temp;
}
inline ::transit_realtime::Stop *FeedEntity::_internal_mutable_stop() {
  _has_bits_[0] |= 0x00000020u;
  if (stop_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::Stop>(GetArena());
    stop_ = p;
  }
  return stop_;
}
inline ::transit_realtime::Stop *FeedEntity::mutable_stop() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.stop)
  return _internal_mutable_stop();
}
inline void FeedEntity::set_allocated_stop(::transit_realtime::Stop *stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_;
  }
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop);
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  stop_ = stop;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.stop)
}

// optional .transit_realtime.TripModifications trip_modifications = 8;
inline bool FeedEntity::_internal_has_trip_modifications() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || trip_modifications_ != nullptr);
  return value;
}
inline bool FeedEntity::has_trip_modifications() const {
  return _internal_has_trip_modifications();
}
inline void FeedEntity::clear_trip_modifications() {
  if (trip_modifications_ != nullptr)
    trip_modifications_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::transit_realtime::TripModifications &
FeedEntity::_internal_trip_modifications() const {
  const ::transit_realtime::TripModifications *p = trip_modifications_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TripModifications *>(
                   &::transit_realtime::_TripModifications_default_instance_);
}
inline const ::transit_realtime::TripModifications &
FeedEntity::trip_modifications() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.trip_modifications)
  return _internal_trip_modifications();
}
inline void FeedEntity::unsafe_arena_set_allocated_trip_modifications(
    ::transit_realtime::TripModifications *trip_modifications) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        trip_modifications_);
  }
  trip_modifications_ = trip_modifications;
  if (trip_modifications) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.trip_modifications)
}
inline ::transit_realtime::TripModifications *
FeedEntity::release_trip_modifications() {
  auto temp = unsafe_arena_release_trip_modifications();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripModifications *
FeedEntity::unsafe_arena_release_trip_modifications() {
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.trip_modifications)
  _has_bits_[0] &= ~0x00000040u;
  ::transit_realtime::TripModifications *temp = trip_modifications_;
  trip_modifications_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripModifications *
FeedEntity::_internal_mutable_trip_modifications() {
  _has_bits_[0] |= 0x00000040u;
  if (trip_modifications_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TripModifications>(GetArena());
    trip_modifications_ = p;
  }
  return trip_modifications_;
}
inline ::transit_realtime::TripModifications *
FeedEntity::mutable_trip_modifications() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.trip_modifications)
  return _internal_mutable_trip_modifications();
}
inline void FeedEntity::set_allocated_trip_modifications(
    ::transit_realtime::TripModifications *trip_modifications) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trip_modifications_;
  }
  if (trip_modifications) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trip_modifications);
    if (message_arena != submessage_arena) {
      trip_modifications = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trip_modifications, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  trip_modifications_ = trip_modifications;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.trip_modifications)
}

// -------------------------------------------------------------------

// TripUpdate_StopTimeEvent

// optional int32 delay = 1;
inline bool TripUpdate_StopTimeEvent::_internal_has_delay() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TripUpdate_StopTimeEvent::has_delay() const {
  return _internal_has_delay();
}
inline void TripUpdate_StopTimeEvent::clear_delay() {
  delay_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
TripUpdate_StopTimeEvent::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TripUpdate_StopTimeEvent::delay() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeEvent.delay)
  return _internal_delay();
}
inline void TripUpdate_StopTimeEvent::_internal_set_delay(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  delay_ = value;
}
inline void
TripUpdate_StopTimeEvent::set_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeEvent.delay)
}

// optional int64 time = 2;
inline bool TripUpdate_StopTimeEvent::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TripUpdate_StopTimeEvent::has_time() const {
  return _internal_has_time();
}
inline void TripUpdate_StopTimeEvent::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64
TripUpdate_StopTimeEvent::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TripUpdate_StopTimeEvent::time() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeEvent.time)
  return _internal_time();
}
inline void TripUpdate_StopTimeEvent::_internal_set_time(
    ::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  time_ = value;
}
inline void
TripUpdate_StopTimeEvent::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeEvent.time)
}

// optional int32 uncertainty = 3;
inline bool TripUpdate_StopTimeEvent::_internal_has_uncertainty() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TripUpdate_StopTimeEvent::has_uncertainty() const {
  return _internal_has_uncertainty();
}
inline void TripUpdate_StopTimeEvent::clear_uncertainty() {
  uncertainty_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
TripUpdate_StopTimeEvent::_internal_uncertainty() const {
  return uncertainty_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
TripUpdate_StopTimeEvent::uncertainty() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeEvent.uncertainty)
  return _internal_uncertainty();
}
inline void TripUpdate_StopTimeEvent::_internal_set_uncertainty(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  uncertainty_ = value;
}
inline void TripUpdate_StopTimeEvent::set_uncertainty(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_uncertainty(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeEvent.uncertainty)
}

// -------------------------------------------------------------------

// TripUpdate_StopTimeUpdate_StopTimeProperties

// optional string assigned_stop_id = 1;
inline bool
TripUpdate_StopTimeUpdate_StopTimeProperties::_internal_has_assigned_stop_id()
    const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool
TripUpdate_StopTimeUpdate_StopTimeProperties::has_assigned_stop_id() const {
  return _internal_has_assigned_stop_id();
}
inline void
TripUpdate_StopTimeUpdate_StopTimeProperties::clear_assigned_stop_id() {
  assigned_stop_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &
TripUpdate_StopTimeUpdate_StopTimeProperties::assigned_stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
  return _internal_assigned_stop_id();
}
inline void TripUpdate_StopTimeUpdate_StopTimeProperties::set_assigned_stop_id(
    const std::string &value) {
  _internal_set_assigned_stop_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
}
inline std::string *
TripUpdate_StopTimeUpdate_StopTimeProperties::mutable_assigned_stop_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
  return _internal_mutable_assigned_stop_id();
}
inline const std::string &
TripUpdate_StopTimeUpdate_StopTimeProperties::_internal_assigned_stop_id()
    const {
  return assigned_stop_id_.Get();
}
inline void
TripUpdate_StopTimeUpdate_StopTimeProperties::_internal_set_assigned_stop_id(
    const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  assigned_stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripUpdate_StopTimeUpdate_StopTimeProperties::set_assigned_stop_id(
    std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  assigned_stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
}
inline void TripUpdate_StopTimeUpdate_StopTimeProperties::set_assigned_stop_id(
    const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  assigned_stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
}
inline void TripUpdate_StopTimeUpdate_StopTimeProperties::set_assigned_stop_id(
    const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  assigned_stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
}
inline std::string *TripUpdate_StopTimeUpdate_StopTimeProperties::
    _internal_mutable_assigned_stop_id() {
  _has_bits_[0] |= 0x00000001u;
  return assigned_stop_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *
TripUpdate_StopTimeUpdate_StopTimeProperties::release_assigned_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
  if (!_internal_has_assigned_stop_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return assigned_stop_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripUpdate_StopTimeUpdate_StopTimeProperties::set_allocated_assigned_stop_id(
    std::string *assigned_stop_id) {
  if (assigned_stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  assigned_stop_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assigned_stop_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
}
inline std::string *TripUpdate_StopTimeUpdate_StopTimeProperties::
    unsafe_arena_release_assigned_stop_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return assigned_stop_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripUpdate_StopTimeUpdate_StopTimeProperties::
    unsafe_arena_set_allocated_assigned_stop_id(std::string *assigned_stop_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (assigned_stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  assigned_stop_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      assigned_stop_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties.assigned_stop_id)
}

// -------------------------------------------------------------------

// TripUpdate_StopTimeUpdate

// optional uint32 stop_sequence = 1;
inline bool TripUpdate_StopTimeUpdate::_internal_has_stop_sequence() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TripUpdate_StopTimeUpdate::has_stop_sequence() const {
  return _internal_has_stop_sequence();
}
inline void TripUpdate_StopTimeUpdate::clear_stop_sequence() {
  stop_sequence_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
TripUpdate_StopTimeUpdate::_internal_stop_sequence() const {
  return stop_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
TripUpdate_StopTimeUpdate::stop_sequence() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.stop_sequence)
  return _internal_stop_sequence();
}
inline void TripUpdate_StopTimeUpdate::_internal_set_stop_sequence(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  stop_sequence_ = value;
}
inline void TripUpdate_StopTimeUpdate::set_stop_sequence(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_sequence(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.stop_sequence)
}

// optional string stop_id = 4;
inline bool TripUpdate_StopTimeUpdate::_internal_has_stop_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TripUpdate_StopTimeUpdate::has_stop_id() const {
  return _internal_has_stop_id();
}
inline void TripUpdate_StopTimeUpdate::clear_stop_id() {
  stop_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &TripUpdate_StopTimeUpdate::stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  return _internal_stop_id();
}
inline void TripUpdate_StopTimeUpdate::set_stop_id(const std::string &value) {
  _internal_set_stop_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}
inline std::string *TripUpdate_StopTimeUpdate::mutable_stop_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  return _internal_mutable_stop_id();
}
inline const std::string &TripUpdate_StopTimeUpdate::_internal_stop_id() const {
  return stop_id_.Get();
}
inline void
TripUpdate_StopTimeUpdate::_internal_set_stop_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripUpdate_StopTimeUpdate::set_stop_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}
inline void TripUpdate_StopTimeUpdate::set_stop_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}
inline void TripUpdate_StopTimeUpdate::set_stop_id(const char *value,
                                                   size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}
inline std::string *TripUpdate_StopTimeUpdate::_internal_mutable_stop_id() {
  _has_bits_[0] |= 0x00000001u;
  return stop_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripUpdate_StopTimeUpdate::release_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  if (!_internal_has_stop_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripUpdate_StopTimeUpdate::set_allocated_stop_id(std::string *stop_id) {
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}
inline std::string *TripUpdate_StopTimeUpdate::unsafe_arena_release_stop_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripUpdate_StopTimeUpdate::unsafe_arena_set_allocated_stop_id(
    std::string *stop_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}

// optional .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
inline bool TripUpdate_StopTimeUpdate::_internal_has_arrival() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || arrival_ != nullptr);
  return value;
}
inline bool TripUpdate_StopTimeUpdate::has_arrival() const {
  return _internal_has_arrival();
}
inline void TripUpdate_StopTimeUpdate::clear_arrival() {
  if (arrival_ != nullptr)
    arrival_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::TripUpdate_StopTimeEvent &
TripUpdate_StopTimeUpdate::_internal_arrival() const {
  const ::transit_realtime::TripUpdate_StopTimeEvent *p = arrival_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<
                   const ::transit_realtime::TripUpdate_StopTimeEvent *>(
                   &::transit_realtime::
                       _TripUpdate_StopTimeEvent_default_instance_);
}
inline const ::transit_realtime::TripUpdate_StopTimeEvent &
TripUpdate_StopTimeUpdate::arrival() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
  return _internal_arrival();
}
inline void TripUpdate_StopTimeUpdate::unsafe_arena_set_allocated_arrival(
    ::transit_realtime::TripUpdate_StopTimeEvent *arrival) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(arrival_);
  }
  arrival_ = arrival;
  if (arrival) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
}
inline ::transit_realtime::TripUpdate_StopTimeEvent *
TripUpdate_StopTimeUpdate::release_arrival() {
  auto temp = unsafe_arena_release_arrival();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent *
TripUpdate_StopTimeUpdate::unsafe_arena_release_arrival() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
  _has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::TripUpdate_StopTimeEvent *temp = arrival_;
  arrival_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent *
TripUpdate_StopTimeUpdate::_internal_mutable_arrival() {
  _has_bits_[0] |= 0x00000002u;
  if (arrival_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::TripUpdate_StopTimeEvent>(
        GetArena());
    arrival_ = p;
  }
  return arrival_;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent *
TripUpdate_StopTimeUpdate::mutable_arrival() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
  return _internal_mutable_arrival();
}
inline void TripUpdate_StopTimeUpdate::set_allocated_arrival(
    ::transit_realtime::TripUpdate_StopTimeEvent *arrival) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete arrival_;
  }
  if (arrival) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(arrival);
    if (message_arena != submessage_arena) {
      arrival = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arrival, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  arrival_ = arrival;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
}

// optional .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
inline bool TripUpdate_StopTimeUpdate::_internal_has_departure() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || departure_ != nullptr);
  return value;
}
inline bool TripUpdate_StopTimeUpdate::has_departure() const {
  return _internal_has_departure();
}
inline void TripUpdate_StopTimeUpdate::clear_departure() {
  if (departure_ != nullptr)
    departure_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::transit_realtime::TripUpdate_StopTimeEvent &
TripUpdate_StopTimeUpdate::_internal_departure() const {
  const ::transit_realtime::TripUpdate_StopTimeEvent *p = departure_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<
                   const ::transit_realtime::TripUpdate_StopTimeEvent *>(
                   &::transit_realtime::
                       _TripUpdate_StopTimeEvent_default_instance_);
}
inline const ::transit_realtime::TripUpdate_StopTimeEvent &
TripUpdate_StopTimeUpdate::departure() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.departure)
  return _internal_departure();
}
inline void TripUpdate_StopTimeUpdate::unsafe_arena_set_allocated_departure(
    ::transit_realtime::TripUpdate_StopTimeEvent *departure) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(departure_);
  }
  departure_ = departure;
  if (departure) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.departure)
}
inline ::transit_realtime::TripUpdate_StopTimeEvent *
TripUpdate_StopTimeUpdate::release_departure() {
  auto temp = unsafe_arena_release_departure();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent *
TripUpdate_StopTimeUpdate::unsafe_arena_release_departure() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.departure)
  _has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::TripUpdate_StopTimeEvent *temp = departure_;
  departure_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent *
TripUpdate_StopTimeUpdate::_internal_mutable_departure() {
  _has_bits_[0] |= 0x00000004u;
  if (departure_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::TripUpdate_StopTimeEvent>(
        GetArena());
    departure_ = p;
  }
  return departure_;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent *
TripUpdate_StopTimeUpdate::mutable_departure() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.departure)
  return _internal_mutable_departure();
}
inline void TripUpdate_StopTimeUpdate::set_allocated_departure(
    ::transit_realtime::TripUpdate_StopTimeEvent *departure) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete departure_;
  }
  if (departure) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(departure);
    if (message_arena != submessage_arena) {
      departure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, departure, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  departure_ = departure;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.departure)
}

// optional .transit_realtime.VehiclePosition.OccupancyStatus
// departure_occupancy_status = 7;
inline bool
TripUpdate_StopTimeUpdate::_internal_has_departure_occupancy_status() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TripUpdate_StopTimeUpdate::has_departure_occupancy_status() const {
  return _internal_has_departure_occupancy_status();
}
inline void TripUpdate_StopTimeUpdate::clear_departure_occupancy_status() {
  departure_occupancy_status_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::transit_realtime::VehiclePosition_OccupancyStatus
TripUpdate_StopTimeUpdate::_internal_departure_occupancy_status() const {
  return static_cast<::transit_realtime::VehiclePosition_OccupancyStatus>(
      departure_occupancy_status_);
}
inline ::transit_realtime::VehiclePosition_OccupancyStatus
TripUpdate_StopTimeUpdate::departure_occupancy_status() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.departure_occupancy_status)
  return _internal_departure_occupancy_status();
}
inline void TripUpdate_StopTimeUpdate::_internal_set_departure_occupancy_status(
    ::transit_realtime::VehiclePosition_OccupancyStatus value) {
  assert(::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  departure_occupancy_status_ = value;
}
inline void TripUpdate_StopTimeUpdate::set_departure_occupancy_status(
    ::transit_realtime::VehiclePosition_OccupancyStatus value) {
  _internal_set_departure_occupancy_status(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.departure_occupancy_status)
}

// optional .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship
// schedule_relationship = 5 [default = SCHEDULED];
inline bool
TripUpdate_StopTimeUpdate::_internal_has_schedule_relationship() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TripUpdate_StopTimeUpdate::has_schedule_relationship() const {
  return _internal_has_schedule_relationship();
}
inline void TripUpdate_StopTimeUpdate::clear_schedule_relationship() {
  schedule_relationship_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship
TripUpdate_StopTimeUpdate::_internal_schedule_relationship() const {
  return static_cast<
      ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship>(
      schedule_relationship_);
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship
TripUpdate_StopTimeUpdate::schedule_relationship() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.schedule_relationship)
  return _internal_schedule_relationship();
}
inline void TripUpdate_StopTimeUpdate::_internal_set_schedule_relationship(
    ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship value) {
  assert(::transit_realtime::
             TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  schedule_relationship_ = value;
}
inline void TripUpdate_StopTimeUpdate::set_schedule_relationship(
    ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship value) {
  _internal_set_schedule_relationship(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.schedule_relationship)
}

// optional .transit_realtime.TripUpdate.StopTimeUpdate.StopTimeProperties
// stop_time_properties = 6;
inline bool
TripUpdate_StopTimeUpdate::_internal_has_stop_time_properties() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || stop_time_properties_ != nullptr);
  return value;
}
inline bool TripUpdate_StopTimeUpdate::has_stop_time_properties() const {
  return _internal_has_stop_time_properties();
}
inline void TripUpdate_StopTimeUpdate::clear_stop_time_properties() {
  if (stop_time_properties_ != nullptr)
    stop_time_properties_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties &
TripUpdate_StopTimeUpdate::_internal_stop_time_properties() const {
  const ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *p =
      stop_time_properties_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<
                   const ::transit_realtime::
                       TripUpdate_StopTimeUpdate_StopTimeProperties *>(
                   &::transit_realtime::
                       _TripUpdate_StopTimeUpdate_StopTimeProperties_default_instance_);
}
inline const ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties &
TripUpdate_StopTimeUpdate::stop_time_properties() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.stop_time_properties)
  return _internal_stop_time_properties();
}
inline void
TripUpdate_StopTimeUpdate::unsafe_arena_set_allocated_stop_time_properties(
    ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties
        *stop_time_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        stop_time_properties_);
  }
  stop_time_properties_ = stop_time_properties;
  if (stop_time_properties) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.stop_time_properties)
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *
TripUpdate_StopTimeUpdate::release_stop_time_properties() {
  auto temp = unsafe_arena_release_stop_time_properties();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *
TripUpdate_StopTimeUpdate::unsafe_arena_release_stop_time_properties() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.stop_time_properties)
  _has_bits_[0] &= ~0x00000008u;
  ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *temp =
      stop_time_properties_;
  stop_time_properties_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *
TripUpdate_StopTimeUpdate::_internal_mutable_stop_time_properties() {
  _has_bits_[0] |= 0x00000008u;
  if (stop_time_properties_ == nullptr) {
    auto *p = CreateMaybeMessage<
        ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties>(
        GetArena());
    stop_time_properties_ = p;
  }
  return stop_time_properties_;
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties *
TripUpdate_StopTimeUpdate::mutable_stop_time_properties() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.stop_time_properties)
  return _internal_mutable_stop_time_properties();
}
inline void TripUpdate_StopTimeUpdate::set_allocated_stop_time_properties(
    ::transit_realtime::TripUpdate_StopTimeUpdate_StopTimeProperties
        *stop_time_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_time_properties_;
  }
  if (stop_time_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_time_properties);
    if (message_arena != submessage_arena) {
      stop_time_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_time_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stop_time_properties_ = stop_time_properties;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.stop_time_properties)
}

// -------------------------------------------------------------------

// TripUpdate_TripProperties

// optional string trip_id = 1;
inline bool TripUpdate_TripProperties::_internal_has_trip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TripUpdate_TripProperties::has_trip_id() const {
  return _internal_has_trip_id();
}
inline void TripUpdate_TripProperties::clear_trip_id() {
  trip_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &TripUpdate_TripProperties::trip_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.TripProperties.trip_id)
  return _internal_trip_id();
}
inline void TripUpdate_TripProperties::set_trip_id(const std::string &value) {
  _internal_set_trip_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.TripProperties.trip_id)
}
inline std::string *TripUpdate_TripProperties::mutable_trip_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.TripProperties.trip_id)
  return _internal_mutable_trip_id();
}
inline const std::string &TripUpdate_TripProperties::_internal_trip_id() const {
  return trip_id_.Get();
}
inline void
TripUpdate_TripProperties::_internal_set_trip_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripUpdate_TripProperties::set_trip_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripUpdate.TripProperties.trip_id)
}
inline void TripUpdate_TripProperties::set_trip_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripUpdate.TripProperties.trip_id)
}
inline void TripUpdate_TripProperties::set_trip_id(const char *value,
                                                   size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripUpdate.TripProperties.trip_id)
}
inline std::string *TripUpdate_TripProperties::_internal_mutable_trip_id() {
  _has_bits_[0] |= 0x00000001u;
  return trip_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripUpdate_TripProperties::release_trip_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.TripProperties.trip_id)
  if (!_internal_has_trip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trip_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripUpdate_TripProperties::set_allocated_trip_id(std::string *trip_id) {
  if (trip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trip_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trip_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.TripProperties.trip_id)
}
inline std::string *TripUpdate_TripProperties::unsafe_arena_release_trip_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripUpdate.TripProperties.trip_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return trip_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripUpdate_TripProperties::unsafe_arena_set_allocated_trip_id(
    std::string *trip_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trip_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trip_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.TripProperties.trip_id)
}

// optional string start_date = 2;
inline bool TripUpdate_TripProperties::_internal_has_start_date() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TripUpdate_TripProperties::has_start_date() const {
  return _internal_has_start_date();
}
inline void TripUpdate_TripProperties::clear_start_date() {
  start_date_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &TripUpdate_TripProperties::start_date() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.TripProperties.start_date)
  return _internal_start_date();
}
inline void
TripUpdate_TripProperties::set_start_date(const std::string &value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.TripProperties.start_date)
}
inline std::string *TripUpdate_TripProperties::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.TripProperties.start_date)
  return _internal_mutable_start_date();
}
inline const std::string &
TripUpdate_TripProperties::_internal_start_date() const {
  return start_date_.Get();
}
inline void
TripUpdate_TripProperties::_internal_set_start_date(const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  start_date_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripUpdate_TripProperties::set_start_date(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  start_date_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripUpdate.TripProperties.start_date)
}
inline void TripUpdate_TripProperties::set_start_date(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  start_date_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripUpdate.TripProperties.start_date)
}
inline void TripUpdate_TripProperties::set_start_date(const char *value,
                                                      size_t size) {
  _has_bits_[0] |= 0x00000002u;
  start_date_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripUpdate.TripProperties.start_date)
}
inline std::string *TripUpdate_TripProperties::_internal_mutable_start_date() {
  _has_bits_[0] |= 0x00000002u;
  return start_date_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripUpdate_TripProperties::release_start_date() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.TripProperties.start_date)
  if (!_internal_has_start_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return start_date_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripUpdate_TripProperties::set_allocated_start_date(std::string *start_date) {
  if (start_date != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_date_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_date, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.TripProperties.start_date)
}
inline std::string *
TripUpdate_TripProperties::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripUpdate.TripProperties.start_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return start_date_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripUpdate_TripProperties::unsafe_arena_set_allocated_start_date(
    std::string *start_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_date != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_date_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.TripProperties.start_date)
}

// optional string start_time = 3;
inline bool TripUpdate_TripProperties::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TripUpdate_TripProperties::has_start_time() const {
  return _internal_has_start_time();
}
inline void TripUpdate_TripProperties::clear_start_time() {
  start_time_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string &TripUpdate_TripProperties::start_time() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.TripProperties.start_time)
  return _internal_start_time();
}
inline void
TripUpdate_TripProperties::set_start_time(const std::string &value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.TripProperties.start_time)
}
inline std::string *TripUpdate_TripProperties::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.TripProperties.start_time)
  return _internal_mutable_start_time();
}
inline const std::string &
TripUpdate_TripProperties::_internal_start_time() const {
  return start_time_.Get();
}
inline void
TripUpdate_TripProperties::_internal_set_start_time(const std::string &value) {
  _has_bits_[0] |= 0x00000004u;
  start_time_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripUpdate_TripProperties::set_start_time(std::string &&value) {
  _has_bits_[0] |= 0x00000004u;
  start_time_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripUpdate.TripProperties.start_time)
}
inline void TripUpdate_TripProperties::set_start_time(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  start_time_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripUpdate.TripProperties.start_time)
}
inline void TripUpdate_TripProperties::set_start_time(const char *value,
                                                      size_t size) {
  _has_bits_[0] |= 0x00000004u;
  start_time_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripUpdate.TripProperties.start_time)
}
inline std::string *TripUpdate_TripProperties::_internal_mutable_start_time() {
  _has_bits_[0] |= 0x00000004u;
  return start_time_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripUpdate_TripProperties::release_start_time() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.TripProperties.start_time)
  if (!_internal_has_start_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return start_time_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripUpdate_TripProperties::set_allocated_start_time(std::string *start_time) {
  if (start_time != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  start_time_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_time, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.TripProperties.start_time)
}
inline std::string *
TripUpdate_TripProperties::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripUpdate.TripProperties.start_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return start_time_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripUpdate_TripProperties::unsafe_arena_set_allocated_start_time(
    std::string *start_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_time != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  start_time_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.TripProperties.start_time)
}

// optional string shape_id = 4;
inline bool TripUpdate_TripProperties::_internal_has_shape_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TripUpdate_TripProperties::has_shape_id() const {
  return _internal_has_shape_id();
}
inline void TripUpdate_TripProperties::clear_shape_id() {
  shape_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string &TripUpdate_TripProperties::shape_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.TripProperties.shape_id)
  return _internal_shape_id();
}
inline void TripUpdate_TripProperties::set_shape_id(const std::string &value) {
  _internal_set_shape_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.TripProperties.shape_id)
}
inline std::string *TripUpdate_TripProperties::mutable_shape_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.TripProperties.shape_id)
  return _internal_mutable_shape_id();
}
inline const std::string &
TripUpdate_TripProperties::_internal_shape_id() const {
  return shape_id_.Get();
}
inline void
TripUpdate_TripProperties::_internal_set_shape_id(const std::string &value) {
  _has_bits_[0] |= 0x00000008u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripUpdate_TripProperties::set_shape_id(std::string &&value) {
  _has_bits_[0] |= 0x00000008u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripUpdate.TripProperties.shape_id)
}
inline void TripUpdate_TripProperties::set_shape_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripUpdate.TripProperties.shape_id)
}
inline void TripUpdate_TripProperties::set_shape_id(const char *value,
                                                    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripUpdate.TripProperties.shape_id)
}
inline std::string *TripUpdate_TripProperties::_internal_mutable_shape_id() {
  _has_bits_[0] |= 0x00000008u;
  return shape_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripUpdate_TripProperties::release_shape_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.TripProperties.shape_id)
  if (!_internal_has_shape_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return shape_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripUpdate_TripProperties::set_allocated_shape_id(std::string *shape_id) {
  if (shape_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  shape_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shape_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.TripProperties.shape_id)
}
inline std::string *TripUpdate_TripProperties::unsafe_arena_release_shape_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripUpdate.TripProperties.shape_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return shape_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripUpdate_TripProperties::unsafe_arena_set_allocated_shape_id(
    std::string *shape_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shape_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  shape_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shape_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.TripProperties.shape_id)
}

// -------------------------------------------------------------------

// TripUpdate

// optional .transit_realtime.TripDescriptor trip = 1;
inline bool TripUpdate::_internal_has_trip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || trip_ != nullptr);
  return value;
}
inline bool TripUpdate::has_trip() const { return _internal_has_trip(); }
inline void TripUpdate::clear_trip() {
  if (trip_ != nullptr)
    trip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::TripDescriptor &
TripUpdate::_internal_trip() const {
  const ::transit_realtime::TripDescriptor *p = trip_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TripDescriptor *>(
                   &::transit_realtime::_TripDescriptor_default_instance_);
}
inline const ::transit_realtime::TripDescriptor &TripUpdate::trip() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.trip)
  return _internal_trip();
}
inline void TripUpdate::unsafe_arena_set_allocated_trip(
    ::transit_realtime::TripDescriptor *trip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(trip_);
  }
  trip_ = trip;
  if (trip) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.trip)
}
inline ::transit_realtime::TripDescriptor *TripUpdate::release_trip() {
  auto temp = unsafe_arena_release_trip();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripDescriptor *
TripUpdate::unsafe_arena_release_trip() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.trip)
  _has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripDescriptor *temp = trip_;
  trip_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripDescriptor *
TripUpdate::_internal_mutable_trip() {
  _has_bits_[0] |= 0x00000001u;
  if (trip_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TripDescriptor>(GetArena());
    trip_ = p;
  }
  return trip_;
}
inline ::transit_realtime::TripDescriptor *TripUpdate::mutable_trip() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.trip)
  return _internal_mutable_trip();
}
inline void
TripUpdate::set_allocated_trip(::transit_realtime::TripDescriptor *trip) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trip_;
  }
  if (trip) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trip);
    if (message_arena != submessage_arena) {
      trip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trip_ = trip;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.trip)
}

// optional .transit_realtime.VehicleDescriptor vehicle = 3;
inline bool TripUpdate::_internal_has_vehicle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_ != nullptr);
  return value;
}
inline bool TripUpdate::has_vehicle() const { return _internal_has_vehicle(); }
inline void TripUpdate::clear_vehicle() {
  if (vehicle_ != nullptr)
    vehicle_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::VehicleDescriptor &
TripUpdate::_internal_vehicle() const {
  const ::transit_realtime::VehicleDescriptor *p = vehicle_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::VehicleDescriptor *>(
                   &::transit_realtime::_VehicleDescriptor_default_instance_);
}
inline const ::transit_realtime::VehicleDescriptor &
TripUpdate::vehicle() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.vehicle)
  return _internal_vehicle();
}
inline void TripUpdate::unsafe_arena_set_allocated_vehicle(
    ::transit_realtime::VehicleDescriptor *vehicle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(vehicle_);
  }
  vehicle_ = vehicle;
  if (vehicle) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.vehicle)
}
inline ::transit_realtime::VehicleDescriptor *TripUpdate::release_vehicle() {
  auto temp = unsafe_arena_release_vehicle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::VehicleDescriptor *
TripUpdate::unsafe_arena_release_vehicle() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.vehicle)
  _has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::VehicleDescriptor *temp = vehicle_;
  vehicle_ = nullptr;
  return temp;
}
inline ::transit_realtime::VehicleDescriptor *
TripUpdate::_internal_mutable_vehicle() {
  _has_bits_[0] |= 0x00000002u;
  if (vehicle_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::VehicleDescriptor>(GetArena());
    vehicle_ = p;
  }
  return vehicle_;
}
inline ::transit_realtime::VehicleDescriptor *TripUpdate::mutable_vehicle() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.vehicle)
  return _internal_mutable_vehicle();
}
inline void TripUpdate::set_allocated_vehicle(
    ::transit_realtime::VehicleDescriptor *vehicle) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_;
  }
  if (vehicle) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle);
    if (message_arena != submessage_arena) {
      vehicle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vehicle_ = vehicle;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.vehicle)
}

// repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
inline int TripUpdate::_internal_stop_time_update_size() const {
  return stop_time_update_.size();
}
inline int TripUpdate::stop_time_update_size() const {
  return _internal_stop_time_update_size();
}
inline void TripUpdate::clear_stop_time_update() { stop_time_update_.Clear(); }
inline ::transit_realtime::TripUpdate_StopTimeUpdate *
TripUpdate::mutable_stop_time_update(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.stop_time_update)
  return stop_time_update_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TripUpdate_StopTimeUpdate> *
TripUpdate::mutable_stop_time_update() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TripUpdate.stop_time_update)
  return &stop_time_update_;
}
inline const ::transit_realtime::TripUpdate_StopTimeUpdate &
TripUpdate::_internal_stop_time_update(int index) const {
  return stop_time_update_.Get(index);
}
inline const ::transit_realtime::TripUpdate_StopTimeUpdate &
TripUpdate::stop_time_update(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.stop_time_update)
  return _internal_stop_time_update(index);
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate *
TripUpdate::_internal_add_stop_time_update() {
  return stop_time_update_.Add();
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate *
TripUpdate::add_stop_time_update() {
  // @@protoc_insertion_point(field_add:transit_realtime.TripUpdate.stop_time_update)
  return _internal_add_stop_time_update();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TripUpdate_StopTimeUpdate> &
TripUpdate::stop_time_update() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TripUpdate.stop_time_update)
  return stop_time_update_;
}

// optional uint64 timestamp = 4;
inline bool TripUpdate::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TripUpdate::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void TripUpdate::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TripUpdate::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TripUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.timestamp)
  return _internal_timestamp();
}
inline void
TripUpdate::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
}
inline void TripUpdate::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.timestamp)
}

// optional int32 delay = 5;
inline bool TripUpdate::_internal_has_delay() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TripUpdate::has_delay() const { return _internal_has_delay(); }
inline void TripUpdate::clear_delay() {
  delay_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TripUpdate::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TripUpdate::delay() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.delay)
  return _internal_delay();
}
inline void
TripUpdate::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  delay_ = value;
}
inline void TripUpdate::set_delay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.delay)
}

// optional .transit_realtime.TripUpdate.TripProperties trip_properties = 6;
inline bool TripUpdate::_internal_has_trip_properties() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || trip_properties_ != nullptr);
  return value;
}
inline bool TripUpdate::has_trip_properties() const {
  return _internal_has_trip_properties();
}
inline void TripUpdate::clear_trip_properties() {
  if (trip_properties_ != nullptr)
    trip_properties_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::transit_realtime::TripUpdate_TripProperties &
TripUpdate::_internal_trip_properties() const {
  const ::transit_realtime::TripUpdate_TripProperties *p = trip_properties_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<
                   const ::transit_realtime::TripUpdate_TripProperties *>(
                   &::transit_realtime::
                       _TripUpdate_TripProperties_default_instance_);
}
inline const ::transit_realtime::TripUpdate_TripProperties &
TripUpdate::trip_properties() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.trip_properties)
  return _internal_trip_properties();
}
inline void TripUpdate::unsafe_arena_set_allocated_trip_properties(
    ::transit_realtime::TripUpdate_TripProperties *trip_properties) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        trip_properties_);
  }
  trip_properties_ = trip_properties;
  if (trip_properties) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.trip_properties)
}
inline ::transit_realtime::TripUpdate_TripProperties *
TripUpdate::release_trip_properties() {
  auto temp = unsafe_arena_release_trip_properties();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripUpdate_TripProperties *
TripUpdate::unsafe_arena_release_trip_properties() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.trip_properties)
  _has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::TripUpdate_TripProperties *temp = trip_properties_;
  trip_properties_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripUpdate_TripProperties *
TripUpdate::_internal_mutable_trip_properties() {
  _has_bits_[0] |= 0x00000004u;
  if (trip_properties_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::TripUpdate_TripProperties>(
        GetArena());
    trip_properties_ = p;
  }
  return trip_properties_;
}
inline ::transit_realtime::TripUpdate_TripProperties *
TripUpdate::mutable_trip_properties() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.trip_properties)
  return _internal_mutable_trip_properties();
}
inline void TripUpdate::set_allocated_trip_properties(
    ::transit_realtime::TripUpdate_TripProperties *trip_properties) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trip_properties_;
  }
  if (trip_properties) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trip_properties);
    if (message_arena != submessage_arena) {
      trip_properties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trip_properties, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  trip_properties_ = trip_properties;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.trip_properties)
}

// -------------------------------------------------------------------

// VehiclePosition_CarriageDetails

// optional string id = 1;
inline bool VehiclePosition_CarriageDetails::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehiclePosition_CarriageDetails::has_id() const {
  return _internal_has_id();
}
inline void VehiclePosition_CarriageDetails::clear_id() {
  id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &VehiclePosition_CarriageDetails::id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.CarriageDetails.id)
  return _internal_id();
}
inline void VehiclePosition_CarriageDetails::set_id(const std::string &value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.CarriageDetails.id)
}
inline std::string *VehiclePosition_CarriageDetails::mutable_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.CarriageDetails.id)
  return _internal_mutable_id();
}
inline const std::string &
VehiclePosition_CarriageDetails::_internal_id() const {
  return id_.Get();
}
inline void
VehiclePosition_CarriageDetails::_internal_set_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          value, GetArena());
}
inline void VehiclePosition_CarriageDetails::set_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.VehiclePosition.CarriageDetails.id)
}
inline void VehiclePosition_CarriageDetails::set_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehiclePosition.CarriageDetails.id)
}
inline void VehiclePosition_CarriageDetails::set_id(const char *value,
                                                    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          ::std::string(reinterpret_cast<const char *>(value), size),
          GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehiclePosition.CarriageDetails.id)
}
inline std::string *VehiclePosition_CarriageDetails::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *VehiclePosition_CarriageDetails::release_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.CarriageDetails.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehiclePosition_CarriageDetails::set_allocated_id(std::string *id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.CarriageDetails.id)
}
inline std::string *VehiclePosition_CarriageDetails::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.VehiclePosition.CarriageDetails.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehiclePosition_CarriageDetails::unsafe_arena_set_allocated_id(
    std::string *id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehiclePosition.CarriageDetails.id)
}

// optional string label = 2;
inline bool VehiclePosition_CarriageDetails::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehiclePosition_CarriageDetails::has_label() const {
  return _internal_has_label();
}
inline void VehiclePosition_CarriageDetails::clear_label() {
  label_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &VehiclePosition_CarriageDetails::label() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.CarriageDetails.label)
  return _internal_label();
}
inline void
VehiclePosition_CarriageDetails::set_label(const std::string &value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.CarriageDetails.label)
}
inline std::string *VehiclePosition_CarriageDetails::mutable_label() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.CarriageDetails.label)
  return _internal_mutable_label();
}
inline const std::string &
VehiclePosition_CarriageDetails::_internal_label() const {
  return label_.Get();
}
inline void
VehiclePosition_CarriageDetails::_internal_set_label(const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             value, GetArena());
}
inline void VehiclePosition_CarriageDetails::set_label(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.VehiclePosition.CarriageDetails.label)
}
inline void VehiclePosition_CarriageDetails::set_label(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehiclePosition.CarriageDetails.label)
}
inline void VehiclePosition_CarriageDetails::set_label(const char *value,
                                                       size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::string(reinterpret_cast<const char *>(value), size),
             GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehiclePosition.CarriageDetails.label)
}
inline std::string *VehiclePosition_CarriageDetails::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *VehiclePosition_CarriageDetails::release_label() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.CarriageDetails.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
VehiclePosition_CarriageDetails::set_allocated_label(std::string *label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.CarriageDetails.label)
}
inline std::string *
VehiclePosition_CarriageDetails::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.VehiclePosition.CarriageDetails.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return label_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehiclePosition_CarriageDetails::unsafe_arena_set_allocated_label(
    std::string *label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehiclePosition.CarriageDetails.label)
}

// optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status =
// 3 [default = NO_DATA_AVAILABLE];
inline bool
VehiclePosition_CarriageDetails::_internal_has_occupancy_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehiclePosition_CarriageDetails::has_occupancy_status() const {
  return _internal_has_occupancy_status();
}
inline void VehiclePosition_CarriageDetails::clear_occupancy_status() {
  occupancy_status_ = 7;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::transit_realtime::VehiclePosition_OccupancyStatus
VehiclePosition_CarriageDetails::_internal_occupancy_status() const {
  return static_cast<::transit_realtime::VehiclePosition_OccupancyStatus>(
      occupancy_status_);
}
inline ::transit_realtime::VehiclePosition_OccupancyStatus
VehiclePosition_CarriageDetails::occupancy_status() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.CarriageDetails.occupancy_status)
  return _internal_occupancy_status();
}
inline void VehiclePosition_CarriageDetails::_internal_set_occupancy_status(
    ::transit_realtime::VehiclePosition_OccupancyStatus value) {
  assert(::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  occupancy_status_ = value;
}
inline void VehiclePosition_CarriageDetails::set_occupancy_status(
    ::transit_realtime::VehiclePosition_OccupancyStatus value) {
  _internal_set_occupancy_status(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.CarriageDetails.occupancy_status)
}

// optional int32 occupancy_percentage = 4 [default = -1];
inline bool
VehiclePosition_CarriageDetails::_internal_has_occupancy_percentage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehiclePosition_CarriageDetails::has_occupancy_percentage() const {
  return _internal_has_occupancy_percentage();
}
inline void VehiclePosition_CarriageDetails::clear_occupancy_percentage() {
  occupancy_percentage_ = -1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
VehiclePosition_CarriageDetails::_internal_occupancy_percentage() const {
  return occupancy_percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
VehiclePosition_CarriageDetails::occupancy_percentage() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.CarriageDetails.occupancy_percentage)
  return _internal_occupancy_percentage();
}
inline void VehiclePosition_CarriageDetails::_internal_set_occupancy_percentage(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  occupancy_percentage_ = value;
}
inline void VehiclePosition_CarriageDetails::set_occupancy_percentage(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_occupancy_percentage(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.CarriageDetails.occupancy_percentage)
}

// optional uint32 carriage_sequence = 5;
inline bool
VehiclePosition_CarriageDetails::_internal_has_carriage_sequence() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehiclePosition_CarriageDetails::has_carriage_sequence() const {
  return _internal_has_carriage_sequence();
}
inline void VehiclePosition_CarriageDetails::clear_carriage_sequence() {
  carriage_sequence_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
VehiclePosition_CarriageDetails::_internal_carriage_sequence() const {
  return carriage_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
VehiclePosition_CarriageDetails::carriage_sequence() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.CarriageDetails.carriage_sequence)
  return _internal_carriage_sequence();
}
inline void VehiclePosition_CarriageDetails::_internal_set_carriage_sequence(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  carriage_sequence_ = value;
}
inline void VehiclePosition_CarriageDetails::set_carriage_sequence(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_carriage_sequence(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.CarriageDetails.carriage_sequence)
}

// -------------------------------------------------------------------

// VehiclePosition

// optional .transit_realtime.TripDescriptor trip = 1;
inline bool VehiclePosition::_internal_has_trip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || trip_ != nullptr);
  return value;
}
inline bool VehiclePosition::has_trip() const { return _internal_has_trip(); }
inline void VehiclePosition::clear_trip() {
  if (trip_ != nullptr)
    trip_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::TripDescriptor &
VehiclePosition::_internal_trip() const {
  const ::transit_realtime::TripDescriptor *p = trip_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TripDescriptor *>(
                   &::transit_realtime::_TripDescriptor_default_instance_);
}
inline const ::transit_realtime::TripDescriptor &VehiclePosition::trip() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.trip)
  return _internal_trip();
}
inline void VehiclePosition::unsafe_arena_set_allocated_trip(
    ::transit_realtime::TripDescriptor *trip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(trip_);
  }
  trip_ = trip;
  if (trip) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehiclePosition.trip)
}
inline ::transit_realtime::TripDescriptor *VehiclePosition::release_trip() {
  auto temp = unsafe_arena_release_trip();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripDescriptor *
VehiclePosition::unsafe_arena_release_trip() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.trip)
  _has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::TripDescriptor *temp = trip_;
  trip_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripDescriptor *
VehiclePosition::_internal_mutable_trip() {
  _has_bits_[0] |= 0x00000002u;
  if (trip_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TripDescriptor>(GetArena());
    trip_ = p;
  }
  return trip_;
}
inline ::transit_realtime::TripDescriptor *VehiclePosition::mutable_trip() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.trip)
  return _internal_mutable_trip();
}
inline void
VehiclePosition::set_allocated_trip(::transit_realtime::TripDescriptor *trip) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trip_;
  }
  if (trip) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trip);
    if (message_arena != submessage_arena) {
      trip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trip_ = trip;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.trip)
}

// optional .transit_realtime.VehicleDescriptor vehicle = 8;
inline bool VehiclePosition::_internal_has_vehicle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_ != nullptr);
  return value;
}
inline bool VehiclePosition::has_vehicle() const {
  return _internal_has_vehicle();
}
inline void VehiclePosition::clear_vehicle() {
  if (vehicle_ != nullptr)
    vehicle_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::transit_realtime::VehicleDescriptor &
VehiclePosition::_internal_vehicle() const {
  const ::transit_realtime::VehicleDescriptor *p = vehicle_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::VehicleDescriptor *>(
                   &::transit_realtime::_VehicleDescriptor_default_instance_);
}
inline const ::transit_realtime::VehicleDescriptor &
VehiclePosition::vehicle() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.vehicle)
  return _internal_vehicle();
}
inline void VehiclePosition::unsafe_arena_set_allocated_vehicle(
    ::transit_realtime::VehicleDescriptor *vehicle) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(vehicle_);
  }
  vehicle_ = vehicle;
  if (vehicle) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehiclePosition.vehicle)
}
inline ::transit_realtime::VehicleDescriptor *
VehiclePosition::release_vehicle() {
  auto temp = unsafe_arena_release_vehicle();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::VehicleDescriptor *
VehiclePosition::unsafe_arena_release_vehicle() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.vehicle)
  _has_bits_[0] &= ~0x00000008u;
  ::transit_realtime::VehicleDescriptor *temp = vehicle_;
  vehicle_ = nullptr;
  return temp;
}
inline ::transit_realtime::VehicleDescriptor *
VehiclePosition::_internal_mutable_vehicle() {
  _has_bits_[0] |= 0x00000008u;
  if (vehicle_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::VehicleDescriptor>(GetArena());
    vehicle_ = p;
  }
  return vehicle_;
}
inline ::transit_realtime::VehicleDescriptor *
VehiclePosition::mutable_vehicle() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.vehicle)
  return _internal_mutable_vehicle();
}
inline void VehiclePosition::set_allocated_vehicle(
    ::transit_realtime::VehicleDescriptor *vehicle) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vehicle_;
  }
  if (vehicle) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vehicle);
    if (message_arena != submessage_arena) {
      vehicle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vehicle_ = vehicle;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.vehicle)
}

// optional .transit_realtime.Position position = 2;
inline bool VehiclePosition::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool VehiclePosition::has_position() const {
  return _internal_has_position();
}
inline void VehiclePosition::clear_position() {
  if (position_ != nullptr)
    position_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::transit_realtime::Position &
VehiclePosition::_internal_position() const {
  const ::transit_realtime::Position *p = position_;
  return p != nullptr ? *p
                      : *reinterpret_cast<const ::transit_realtime::Position *>(
                            &::transit_realtime::_Position_default_instance_);
}
inline const ::transit_realtime::Position &VehiclePosition::position() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.position)
  return _internal_position();
}
inline void VehiclePosition::unsafe_arena_set_allocated_position(
    ::transit_realtime::Position *position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehiclePosition.position)
}
inline ::transit_realtime::Position *VehiclePosition::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::Position *
VehiclePosition::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.position)
  _has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::Position *temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::transit_realtime::Position *
VehiclePosition::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000004u;
  if (position_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::Position>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::transit_realtime::Position *VehiclePosition::mutable_position() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.position)
  return _internal_mutable_position();
}
inline void VehiclePosition::set_allocated_position(
    ::transit_realtime::Position *position) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.position)
}

// optional uint32 current_stop_sequence = 3;
inline bool VehiclePosition::_internal_has_current_stop_sequence() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehiclePosition::has_current_stop_sequence() const {
  return _internal_has_current_stop_sequence();
}
inline void VehiclePosition::clear_current_stop_sequence() {
  current_stop_sequence_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
VehiclePosition::_internal_current_stop_sequence() const {
  return current_stop_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
VehiclePosition::current_stop_sequence() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.current_stop_sequence)
  return _internal_current_stop_sequence();
}
inline void VehiclePosition::_internal_set_current_stop_sequence(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  current_stop_sequence_ = value;
}
inline void VehiclePosition::set_current_stop_sequence(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_stop_sequence(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.current_stop_sequence)
}

// optional string stop_id = 7;
inline bool VehiclePosition::_internal_has_stop_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehiclePosition::has_stop_id() const {
  return _internal_has_stop_id();
}
inline void VehiclePosition::clear_stop_id() {
  stop_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &VehiclePosition::stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.stop_id)
  return _internal_stop_id();
}
inline void VehiclePosition::set_stop_id(const std::string &value) {
  _internal_set_stop_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.stop_id)
}
inline std::string *VehiclePosition::mutable_stop_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.stop_id)
  return _internal_mutable_stop_id();
}
inline const std::string &VehiclePosition::_internal_stop_id() const {
  return stop_id_.Get();
}
inline void VehiclePosition::_internal_set_stop_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void VehiclePosition::set_stop_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.VehiclePosition.stop_id)
}
inline void VehiclePosition::set_stop_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehiclePosition.stop_id)
}
inline void VehiclePosition::set_stop_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehiclePosition.stop_id)
}
inline std::string *VehiclePosition::_internal_mutable_stop_id() {
  _has_bits_[0] |= 0x00000001u;
  return stop_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *VehiclePosition::release_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.stop_id)
  if (!_internal_has_stop_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehiclePosition::set_allocated_stop_id(std::string *stop_id) {
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.stop_id)
}
inline std::string *VehiclePosition::unsafe_arena_release_stop_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.VehiclePosition.stop_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
VehiclePosition::unsafe_arena_set_allocated_stop_id(std::string *stop_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehiclePosition.stop_id)
}

// optional .transit_realtime.VehiclePosition.VehicleStopStatus current_status =
// 4 [default = IN_TRANSIT_TO];
inline bool VehiclePosition::_internal_has_current_status() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VehiclePosition::has_current_status() const {
  return _internal_has_current_status();
}
inline void VehiclePosition::clear_current_status() {
  current_status_ = 2;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::transit_realtime::VehiclePosition_VehicleStopStatus
VehiclePosition::_internal_current_status() const {
  return static_cast<::transit_realtime::VehiclePosition_VehicleStopStatus>(
      current_status_);
}
inline ::transit_realtime::VehiclePosition_VehicleStopStatus
VehiclePosition::current_status() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.current_status)
  return _internal_current_status();
}
inline void VehiclePosition::_internal_set_current_status(
    ::transit_realtime::VehiclePosition_VehicleStopStatus value) {
  assert(::transit_realtime::VehiclePosition_VehicleStopStatus_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  current_status_ = value;
}
inline void VehiclePosition::set_current_status(
    ::transit_realtime::VehiclePosition_VehicleStopStatus value) {
  _internal_set_current_status(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.current_status)
}

// optional uint64 timestamp = 5;
inline bool VehiclePosition::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VehiclePosition::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void VehiclePosition::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
VehiclePosition::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VehiclePosition::timestamp() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.timestamp)
  return _internal_timestamp();
}
inline void VehiclePosition::_internal_set_timestamp(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  timestamp_ = value;
}
inline void
VehiclePosition::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.timestamp)
}

// optional .transit_realtime.VehiclePosition.CongestionLevel congestion_level =
// 6;
inline bool VehiclePosition::_internal_has_congestion_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VehiclePosition::has_congestion_level() const {
  return _internal_has_congestion_level();
}
inline void VehiclePosition::clear_congestion_level() {
  congestion_level_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::transit_realtime::VehiclePosition_CongestionLevel
VehiclePosition::_internal_congestion_level() const {
  return static_cast<::transit_realtime::VehiclePosition_CongestionLevel>(
      congestion_level_);
}
inline ::transit_realtime::VehiclePosition_CongestionLevel
VehiclePosition::congestion_level() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.congestion_level)
  return _internal_congestion_level();
}
inline void VehiclePosition::_internal_set_congestion_level(
    ::transit_realtime::VehiclePosition_CongestionLevel value) {
  assert(::transit_realtime::VehiclePosition_CongestionLevel_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  congestion_level_ = value;
}
inline void VehiclePosition::set_congestion_level(
    ::transit_realtime::VehiclePosition_CongestionLevel value) {
  _internal_set_congestion_level(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.congestion_level)
}

// optional .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status =
// 9;
inline bool VehiclePosition::_internal_has_occupancy_status() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VehiclePosition::has_occupancy_status() const {
  return _internal_has_occupancy_status();
}
inline void VehiclePosition::clear_occupancy_status() {
  occupancy_status_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::transit_realtime::VehiclePosition_OccupancyStatus
VehiclePosition::_internal_occupancy_status() const {
  return static_cast<::transit_realtime::VehiclePosition_OccupancyStatus>(
      occupancy_status_);
}
inline ::transit_realtime::VehiclePosition_OccupancyStatus
VehiclePosition::occupancy_status() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.occupancy_status)
  return _internal_occupancy_status();
}
inline void VehiclePosition::_internal_set_occupancy_status(
    ::transit_realtime::VehiclePosition_OccupancyStatus value) {
  assert(::transit_realtime::VehiclePosition_OccupancyStatus_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  occupancy_status_ = value;
}
inline void VehiclePosition::set_occupancy_status(
    ::transit_realtime::VehiclePosition_OccupancyStatus value) {
  _internal_set_occupancy_status(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.occupancy_status)
}

// optional uint32 occupancy_percentage = 10;
inline bool VehiclePosition::_internal_has_occupancy_percentage() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VehiclePosition::has_occupancy_percentage() const {
  return _internal_has_occupancy_percentage();
}
inline void VehiclePosition::clear_occupancy_percentage() {
  occupancy_percentage_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
VehiclePosition::_internal_occupancy_percentage() const {
  return occupancy_percentage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
VehiclePosition::occupancy_percentage() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.occupancy_percentage)
  return _internal_occupancy_percentage();
}
inline void VehiclePosition::_internal_set_occupancy_percentage(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  occupancy_percentage_ = value;
}
inline void VehiclePosition::set_occupancy_percentage(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_occupancy_percentage(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.occupancy_percentage)
}

// repeated .transit_realtime.VehiclePosition.CarriageDetails
// multi_carriage_details = 11;
inline int VehiclePosition::_internal_multi_carriage_details_size() const {
  return multi_carriage_details_.size();
}
inline int VehiclePosition::multi_carriage_details_size() const {
  return _internal_multi_carriage_details_size();
}
inline void VehiclePosition::clear_multi_carriage_details() {
  multi_carriage_details_.Clear();
}
inline ::transit_realtime::VehiclePosition_CarriageDetails *
VehiclePosition::mutable_multi_carriage_details(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.multi_carriage_details)
  return multi_carriage_details_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::VehiclePosition_CarriageDetails> *
VehiclePosition::mutable_multi_carriage_details() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.VehiclePosition.multi_carriage_details)
  return &multi_carriage_details_;
}
inline const ::transit_realtime::VehiclePosition_CarriageDetails &
VehiclePosition::_internal_multi_carriage_details(int index) const {
  return multi_carriage_details_.Get(index);
}
inline const ::transit_realtime::VehiclePosition_CarriageDetails &
VehiclePosition::multi_carriage_details(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.multi_carriage_details)
  return _internal_multi_carriage_details(index);
}
inline ::transit_realtime::VehiclePosition_CarriageDetails *
VehiclePosition::_internal_add_multi_carriage_details() {
  return multi_carriage_details_.Add();
}
inline ::transit_realtime::VehiclePosition_CarriageDetails *
VehiclePosition::add_multi_carriage_details() {
  // @@protoc_insertion_point(field_add:transit_realtime.VehiclePosition.multi_carriage_details)
  return _internal_add_multi_carriage_details();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::VehiclePosition_CarriageDetails> &
VehiclePosition::multi_carriage_details() const {
  // @@protoc_insertion_point(field_list:transit_realtime.VehiclePosition.multi_carriage_details)
  return multi_carriage_details_;
}

// -------------------------------------------------------------------

// Alert

// repeated .transit_realtime.TimeRange active_period = 1;
inline int Alert::_internal_active_period_size() const {
  return active_period_.size();
}
inline int Alert::active_period_size() const {
  return _internal_active_period_size();
}
inline void Alert::clear_active_period() { active_period_.Clear(); }
inline ::transit_realtime::TimeRange *Alert::mutable_active_period(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.active_period)
  return active_period_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::transit_realtime::TimeRange>
    *Alert::mutable_active_period() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.Alert.active_period)
  return &active_period_;
}
inline const ::transit_realtime::TimeRange &
Alert::_internal_active_period(int index) const {
  return active_period_.Get(index);
}
inline const ::transit_realtime::TimeRange &
Alert::active_period(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.active_period)
  return _internal_active_period(index);
}
inline ::transit_realtime::TimeRange *Alert::_internal_add_active_period() {
  return active_period_.Add();
}
inline ::transit_realtime::TimeRange *Alert::add_active_period() {
  // @@protoc_insertion_point(field_add:transit_realtime.Alert.active_period)
  return _internal_add_active_period();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TimeRange> &
Alert::active_period() const {
  // @@protoc_insertion_point(field_list:transit_realtime.Alert.active_period)
  return active_period_;
}

// repeated .transit_realtime.EntitySelector informed_entity = 5;
inline int Alert::_internal_informed_entity_size() const {
  return informed_entity_.size();
}
inline int Alert::informed_entity_size() const {
  return _internal_informed_entity_size();
}
inline void Alert::clear_informed_entity() { informed_entity_.Clear(); }
inline ::transit_realtime::EntitySelector *
Alert::mutable_informed_entity(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.informed_entity)
  return informed_entity_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::EntitySelector> *
Alert::mutable_informed_entity() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.Alert.informed_entity)
  return &informed_entity_;
}
inline const ::transit_realtime::EntitySelector &
Alert::_internal_informed_entity(int index) const {
  return informed_entity_.Get(index);
}
inline const ::transit_realtime::EntitySelector &
Alert::informed_entity(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.informed_entity)
  return _internal_informed_entity(index);
}
inline ::transit_realtime::EntitySelector *
Alert::_internal_add_informed_entity() {
  return informed_entity_.Add();
}
inline ::transit_realtime::EntitySelector *Alert::add_informed_entity() {
  // @@protoc_insertion_point(field_add:transit_realtime.Alert.informed_entity)
  return _internal_add_informed_entity();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::EntitySelector> &
Alert::informed_entity() const {
  // @@protoc_insertion_point(field_list:transit_realtime.Alert.informed_entity)
  return informed_entity_;
}

// optional .transit_realtime.Alert.Cause cause = 6 [default = UNKNOWN_CAUSE];
inline bool Alert::_internal_has_cause() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Alert::has_cause() const { return _internal_has_cause(); }
inline void Alert::clear_cause() {
  cause_ = 1;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::transit_realtime::Alert_Cause Alert::_internal_cause() const {
  return static_cast<::transit_realtime::Alert_Cause>(cause_);
}
inline ::transit_realtime::Alert_Cause Alert::cause() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.cause)
  return _internal_cause();
}
inline void Alert::_internal_set_cause(::transit_realtime::Alert_Cause value) {
  assert(::transit_realtime::Alert_Cause_IsValid(value));
  _has_bits_[0] |= 0x00000400u;
  cause_ = value;
}
inline void Alert::set_cause(::transit_realtime::Alert_Cause value) {
  _internal_set_cause(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Alert.cause)
}

// optional .transit_realtime.Alert.Effect effect = 7 [default =
// UNKNOWN_EFFECT];
inline bool Alert::_internal_has_effect() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Alert::has_effect() const { return _internal_has_effect(); }
inline void Alert::clear_effect() {
  effect_ = 8;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::transit_realtime::Alert_Effect Alert::_internal_effect() const {
  return static_cast<::transit_realtime::Alert_Effect>(effect_);
}
inline ::transit_realtime::Alert_Effect Alert::effect() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.effect)
  return _internal_effect();
}
inline void
Alert::_internal_set_effect(::transit_realtime::Alert_Effect value) {
  assert(::transit_realtime::Alert_Effect_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  effect_ = value;
}
inline void Alert::set_effect(::transit_realtime::Alert_Effect value) {
  _internal_set_effect(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Alert.effect)
}

// optional .transit_realtime.TranslatedString url = 8;
inline bool Alert::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || url_ != nullptr);
  return value;
}
inline bool Alert::has_url() const { return _internal_has_url(); }
inline void Alert::clear_url() {
  if (url_ != nullptr)
    url_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::TranslatedString &
Alert::_internal_url() const {
  const ::transit_realtime::TranslatedString *p = url_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &Alert::url() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.url)
  return _internal_url();
}
inline void Alert::unsafe_arena_set_allocated_url(
    ::transit_realtime::TranslatedString *url) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(url_);
  }
  url_ = url;
  if (url) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.url)
}
inline ::transit_realtime::TranslatedString *Alert::release_url() {
  auto temp = unsafe_arena_release_url();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *Alert::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.url)
  _has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TranslatedString *temp = url_;
  url_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *Alert::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  if (url_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    url_ = p;
  }
  return url_;
}
inline ::transit_realtime::TranslatedString *Alert::mutable_url() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.url)
  return _internal_mutable_url();
}
inline void
Alert::set_allocated_url(::transit_realtime::TranslatedString *url) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete url_;
  }
  if (url) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(url);
    if (message_arena != submessage_arena) {
      url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_ = url;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.url)
}

// optional .transit_realtime.TranslatedString header_text = 10;
inline bool Alert::_internal_has_header_text() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_text_ != nullptr);
  return value;
}
inline bool Alert::has_header_text() const {
  return _internal_has_header_text();
}
inline void Alert::clear_header_text() {
  if (header_text_ != nullptr)
    header_text_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::TranslatedString &
Alert::_internal_header_text() const {
  const ::transit_realtime::TranslatedString *p = header_text_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &Alert::header_text() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.header_text)
  return _internal_header_text();
}
inline void Alert::unsafe_arena_set_allocated_header_text(
    ::transit_realtime::TranslatedString *header_text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        header_text_);
  }
  header_text_ = header_text;
  if (header_text) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.header_text)
}
inline ::transit_realtime::TranslatedString *Alert::release_header_text() {
  auto temp = unsafe_arena_release_header_text();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::unsafe_arena_release_header_text() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.header_text)
  _has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::TranslatedString *temp = header_text_;
  header_text_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::_internal_mutable_header_text() {
  _has_bits_[0] |= 0x00000002u;
  if (header_text_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    header_text_ = p;
  }
  return header_text_;
}
inline ::transit_realtime::TranslatedString *Alert::mutable_header_text() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.header_text)
  return _internal_mutable_header_text();
}
inline void Alert::set_allocated_header_text(
    ::transit_realtime::TranslatedString *header_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete header_text_;
  }
  if (header_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(header_text);
    if (message_arena != submessage_arena) {
      header_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header_text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_text_ = header_text;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.header_text)
}

// optional .transit_realtime.TranslatedString description_text = 11;
inline bool Alert::_internal_has_description_text() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || description_text_ != nullptr);
  return value;
}
inline bool Alert::has_description_text() const {
  return _internal_has_description_text();
}
inline void Alert::clear_description_text() {
  if (description_text_ != nullptr)
    description_text_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::transit_realtime::TranslatedString &
Alert::_internal_description_text() const {
  const ::transit_realtime::TranslatedString *p = description_text_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &
Alert::description_text() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.description_text)
  return _internal_description_text();
}
inline void Alert::unsafe_arena_set_allocated_description_text(
    ::transit_realtime::TranslatedString *description_text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        description_text_);
  }
  description_text_ = description_text;
  if (description_text) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.description_text)
}
inline ::transit_realtime::TranslatedString *Alert::release_description_text() {
  auto temp = unsafe_arena_release_description_text();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::unsafe_arena_release_description_text() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.description_text)
  _has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::TranslatedString *temp = description_text_;
  description_text_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::_internal_mutable_description_text() {
  _has_bits_[0] |= 0x00000004u;
  if (description_text_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    description_text_ = p;
  }
  return description_text_;
}
inline ::transit_realtime::TranslatedString *Alert::mutable_description_text() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.description_text)
  return _internal_mutable_description_text();
}
inline void Alert::set_allocated_description_text(
    ::transit_realtime::TranslatedString *description_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete description_text_;
  }
  if (description_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(description_text);
    if (message_arena != submessage_arena) {
      description_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description_text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  description_text_ = description_text;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.description_text)
}

// optional .transit_realtime.TranslatedString tts_header_text = 12;
inline bool Alert::_internal_has_tts_header_text() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tts_header_text_ != nullptr);
  return value;
}
inline bool Alert::has_tts_header_text() const {
  return _internal_has_tts_header_text();
}
inline void Alert::clear_tts_header_text() {
  if (tts_header_text_ != nullptr)
    tts_header_text_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::transit_realtime::TranslatedString &
Alert::_internal_tts_header_text() const {
  const ::transit_realtime::TranslatedString *p = tts_header_text_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &
Alert::tts_header_text() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.tts_header_text)
  return _internal_tts_header_text();
}
inline void Alert::unsafe_arena_set_allocated_tts_header_text(
    ::transit_realtime::TranslatedString *tts_header_text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        tts_header_text_);
  }
  tts_header_text_ = tts_header_text;
  if (tts_header_text) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.tts_header_text)
}
inline ::transit_realtime::TranslatedString *Alert::release_tts_header_text() {
  auto temp = unsafe_arena_release_tts_header_text();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::unsafe_arena_release_tts_header_text() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.tts_header_text)
  _has_bits_[0] &= ~0x00000008u;
  ::transit_realtime::TranslatedString *temp = tts_header_text_;
  tts_header_text_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::_internal_mutable_tts_header_text() {
  _has_bits_[0] |= 0x00000008u;
  if (tts_header_text_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    tts_header_text_ = p;
  }
  return tts_header_text_;
}
inline ::transit_realtime::TranslatedString *Alert::mutable_tts_header_text() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.tts_header_text)
  return _internal_mutable_tts_header_text();
}
inline void Alert::set_allocated_tts_header_text(
    ::transit_realtime::TranslatedString *tts_header_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tts_header_text_;
  }
  if (tts_header_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tts_header_text);
    if (message_arena != submessage_arena) {
      tts_header_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tts_header_text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tts_header_text_ = tts_header_text;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.tts_header_text)
}

// optional .transit_realtime.TranslatedString tts_description_text = 13;
inline bool Alert::_internal_has_tts_description_text() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tts_description_text_ != nullptr);
  return value;
}
inline bool Alert::has_tts_description_text() const {
  return _internal_has_tts_description_text();
}
inline void Alert::clear_tts_description_text() {
  if (tts_description_text_ != nullptr)
    tts_description_text_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::transit_realtime::TranslatedString &
Alert::_internal_tts_description_text() const {
  const ::transit_realtime::TranslatedString *p = tts_description_text_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &
Alert::tts_description_text() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.tts_description_text)
  return _internal_tts_description_text();
}
inline void Alert::unsafe_arena_set_allocated_tts_description_text(
    ::transit_realtime::TranslatedString *tts_description_text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        tts_description_text_);
  }
  tts_description_text_ = tts_description_text;
  if (tts_description_text) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.tts_description_text)
}
inline ::transit_realtime::TranslatedString *
Alert::release_tts_description_text() {
  auto temp = unsafe_arena_release_tts_description_text();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::unsafe_arena_release_tts_description_text() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.tts_description_text)
  _has_bits_[0] &= ~0x00000010u;
  ::transit_realtime::TranslatedString *temp = tts_description_text_;
  tts_description_text_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::_internal_mutable_tts_description_text() {
  _has_bits_[0] |= 0x00000010u;
  if (tts_description_text_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    tts_description_text_ = p;
  }
  return tts_description_text_;
}
inline ::transit_realtime::TranslatedString *
Alert::mutable_tts_description_text() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.tts_description_text)
  return _internal_mutable_tts_description_text();
}
inline void Alert::set_allocated_tts_description_text(
    ::transit_realtime::TranslatedString *tts_description_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tts_description_text_;
  }
  if (tts_description_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tts_description_text);
    if (message_arena != submessage_arena) {
      tts_description_text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tts_description_text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tts_description_text_ = tts_description_text;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.tts_description_text)
}

// optional .transit_realtime.Alert.SeverityLevel severity_level = 14 [default =
// UNKNOWN_SEVERITY];
inline bool Alert::_internal_has_severity_level() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Alert::has_severity_level() const {
  return _internal_has_severity_level();
}
inline void Alert::clear_severity_level() {
  severity_level_ = 1;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::transit_realtime::Alert_SeverityLevel
Alert::_internal_severity_level() const {
  return static_cast<::transit_realtime::Alert_SeverityLevel>(severity_level_);
}
inline ::transit_realtime::Alert_SeverityLevel Alert::severity_level() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.severity_level)
  return _internal_severity_level();
}
inline void Alert::_internal_set_severity_level(
    ::transit_realtime::Alert_SeverityLevel value) {
  assert(::transit_realtime::Alert_SeverityLevel_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  severity_level_ = value;
}
inline void
Alert::set_severity_level(::transit_realtime::Alert_SeverityLevel value) {
  _internal_set_severity_level(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Alert.severity_level)
}

// optional .transit_realtime.TranslatedImage image = 15;
inline bool Alert::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || image_ != nullptr);
  return value;
}
inline bool Alert::has_image() const { return _internal_has_image(); }
inline void Alert::clear_image() {
  if (image_ != nullptr)
    image_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::transit_realtime::TranslatedImage &
Alert::_internal_image() const {
  const ::transit_realtime::TranslatedImage *p = image_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedImage *>(
                   &::transit_realtime::_TranslatedImage_default_instance_);
}
inline const ::transit_realtime::TranslatedImage &Alert::image() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.image)
  return _internal_image();
}
inline void Alert::unsafe_arena_set_allocated_image(
    ::transit_realtime::TranslatedImage *image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(image_);
  }
  image_ = image;
  if (image) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.image)
}
inline ::transit_realtime::TranslatedImage *Alert::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedImage *
Alert::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.image)
  _has_bits_[0] &= ~0x00000020u;
  ::transit_realtime::TranslatedImage *temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedImage *Alert::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000020u;
  if (image_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedImage>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::transit_realtime::TranslatedImage *Alert::mutable_image() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.image)
  return _internal_mutable_image();
}
inline void
Alert::set_allocated_image(::transit_realtime::TranslatedImage *image) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.image)
}

// optional .transit_realtime.TranslatedString image_alternative_text = 16;
inline bool Alert::_internal_has_image_alternative_text() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || image_alternative_text_ != nullptr);
  return value;
}
inline bool Alert::has_image_alternative_text() const {
  return _internal_has_image_alternative_text();
}
inline void Alert::clear_image_alternative_text() {
  if (image_alternative_text_ != nullptr)
    image_alternative_text_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::transit_realtime::TranslatedString &
Alert::_internal_image_alternative_text() const {
  const ::transit_realtime::TranslatedString *p = image_alternative_text_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &
Alert::image_alternative_text() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.image_alternative_text)
  return _internal_image_alternative_text();
}
inline void Alert::unsafe_arena_set_allocated_image_alternative_text(
    ::transit_realtime::TranslatedString *image_alternative_text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        image_alternative_text_);
  }
  image_alternative_text_ = image_alternative_text;
  if (image_alternative_text) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.image_alternative_text)
}
inline ::transit_realtime::TranslatedString *
Alert::release_image_alternative_text() {
  auto temp = unsafe_arena_release_image_alternative_text();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::unsafe_arena_release_image_alternative_text() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.image_alternative_text)
  _has_bits_[0] &= ~0x00000040u;
  ::transit_realtime::TranslatedString *temp = image_alternative_text_;
  image_alternative_text_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::_internal_mutable_image_alternative_text() {
  _has_bits_[0] |= 0x00000040u;
  if (image_alternative_text_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    image_alternative_text_ = p;
  }
  return image_alternative_text_;
}
inline ::transit_realtime::TranslatedString *
Alert::mutable_image_alternative_text() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.image_alternative_text)
  return _internal_mutable_image_alternative_text();
}
inline void Alert::set_allocated_image_alternative_text(
    ::transit_realtime::TranslatedString *image_alternative_text) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_alternative_text_;
  }
  if (image_alternative_text) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image_alternative_text);
    if (message_arena != submessage_arena) {
      image_alternative_text =
          ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
              message_arena, image_alternative_text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  image_alternative_text_ = image_alternative_text;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.image_alternative_text)
}

// optional .transit_realtime.TranslatedString cause_detail = 17;
inline bool Alert::_internal_has_cause_detail() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || cause_detail_ != nullptr);
  return value;
}
inline bool Alert::has_cause_detail() const {
  return _internal_has_cause_detail();
}
inline void Alert::clear_cause_detail() {
  if (cause_detail_ != nullptr)
    cause_detail_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::transit_realtime::TranslatedString &
Alert::_internal_cause_detail() const {
  const ::transit_realtime::TranslatedString *p = cause_detail_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &Alert::cause_detail() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.cause_detail)
  return _internal_cause_detail();
}
inline void Alert::unsafe_arena_set_allocated_cause_detail(
    ::transit_realtime::TranslatedString *cause_detail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        cause_detail_);
  }
  cause_detail_ = cause_detail;
  if (cause_detail) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.cause_detail)
}
inline ::transit_realtime::TranslatedString *Alert::release_cause_detail() {
  auto temp = unsafe_arena_release_cause_detail();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::unsafe_arena_release_cause_detail() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.cause_detail)
  _has_bits_[0] &= ~0x00000080u;
  ::transit_realtime::TranslatedString *temp = cause_detail_;
  cause_detail_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::_internal_mutable_cause_detail() {
  _has_bits_[0] |= 0x00000080u;
  if (cause_detail_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    cause_detail_ = p;
  }
  return cause_detail_;
}
inline ::transit_realtime::TranslatedString *Alert::mutable_cause_detail() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.cause_detail)
  return _internal_mutable_cause_detail();
}
inline void Alert::set_allocated_cause_detail(
    ::transit_realtime::TranslatedString *cause_detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cause_detail_;
  }
  if (cause_detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cause_detail);
    if (message_arena != submessage_arena) {
      cause_detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cause_detail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  cause_detail_ = cause_detail;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.cause_detail)
}

// optional .transit_realtime.TranslatedString effect_detail = 18;
inline bool Alert::_internal_has_effect_detail() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || effect_detail_ != nullptr);
  return value;
}
inline bool Alert::has_effect_detail() const {
  return _internal_has_effect_detail();
}
inline void Alert::clear_effect_detail() {
  if (effect_detail_ != nullptr)
    effect_detail_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::transit_realtime::TranslatedString &
Alert::_internal_effect_detail() const {
  const ::transit_realtime::TranslatedString *p = effect_detail_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &
Alert::effect_detail() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.effect_detail)
  return _internal_effect_detail();
}
inline void Alert::unsafe_arena_set_allocated_effect_detail(
    ::transit_realtime::TranslatedString *effect_detail) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        effect_detail_);
  }
  effect_detail_ = effect_detail;
  if (effect_detail) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.effect_detail)
}
inline ::transit_realtime::TranslatedString *Alert::release_effect_detail() {
  auto temp = unsafe_arena_release_effect_detail();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::unsafe_arena_release_effect_detail() {
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.effect_detail)
  _has_bits_[0] &= ~0x00000100u;
  ::transit_realtime::TranslatedString *temp = effect_detail_;
  effect_detail_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Alert::_internal_mutable_effect_detail() {
  _has_bits_[0] |= 0x00000100u;
  if (effect_detail_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    effect_detail_ = p;
  }
  return effect_detail_;
}
inline ::transit_realtime::TranslatedString *Alert::mutable_effect_detail() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.effect_detail)
  return _internal_mutable_effect_detail();
}
inline void Alert::set_allocated_effect_detail(
    ::transit_realtime::TranslatedString *effect_detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete effect_detail_;
  }
  if (effect_detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(effect_detail);
    if (message_arena != submessage_arena) {
      effect_detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, effect_detail, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  effect_detail_ = effect_detail;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.effect_detail)
}

// -------------------------------------------------------------------

// TimeRange

// optional uint64 start = 1;
inline bool TimeRange::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TimeRange::has_start() const { return _internal_has_start(); }
inline void TimeRange::clear_start() {
  start_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimeRange::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimeRange::start() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TimeRange.start)
  return _internal_start();
}
inline void
TimeRange::_internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  start_ = value;
}
inline void TimeRange::set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TimeRange.start)
}

// optional uint64 end = 2;
inline bool TimeRange::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TimeRange::has_end() const { return _internal_has_end(); }
inline void TimeRange::clear_end() {
  end_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimeRange::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimeRange::end() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TimeRange.end)
  return _internal_end();
}
inline void
TimeRange::_internal_set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  end_ = value;
}
inline void TimeRange::set_end(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TimeRange.end)
}

// -------------------------------------------------------------------

// Position

// optional float latitude = 1;
inline bool Position::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Position::has_latitude() const { return _internal_has_latitude(); }
inline void Position::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Position::_internal_latitude() const { return latitude_; }
inline float Position::latitude() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.latitude)
  return _internal_latitude();
}
inline void Position::_internal_set_latitude(float value) {
  _has_bits_[0] |= 0x00000001u;
  latitude_ = value;
}
inline void Position::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.latitude)
}

// optional float longitude = 2;
inline bool Position::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Position::has_longitude() const {
  return _internal_has_longitude();
}
inline void Position::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Position::_internal_longitude() const { return longitude_; }
inline float Position::longitude() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.longitude)
  return _internal_longitude();
}
inline void Position::_internal_set_longitude(float value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_ = value;
}
inline void Position::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.longitude)
}

// optional float bearing = 3;
inline bool Position::_internal_has_bearing() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Position::has_bearing() const { return _internal_has_bearing(); }
inline void Position::clear_bearing() {
  bearing_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Position::_internal_bearing() const { return bearing_; }
inline float Position::bearing() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.bearing)
  return _internal_bearing();
}
inline void Position::_internal_set_bearing(float value) {
  _has_bits_[0] |= 0x00000008u;
  bearing_ = value;
}
inline void Position::set_bearing(float value) {
  _internal_set_bearing(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.bearing)
}

// optional double odometer = 4;
inline bool Position::_internal_has_odometer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Position::has_odometer() const { return _internal_has_odometer(); }
inline void Position::clear_odometer() {
  odometer_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Position::_internal_odometer() const { return odometer_; }
inline double Position::odometer() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.odometer)
  return _internal_odometer();
}
inline void Position::_internal_set_odometer(double value) {
  _has_bits_[0] |= 0x00000004u;
  odometer_ = value;
}
inline void Position::set_odometer(double value) {
  _internal_set_odometer(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.odometer)
}

// optional float speed = 5;
inline bool Position::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Position::has_speed() const { return _internal_has_speed(); }
inline void Position::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Position::_internal_speed() const { return speed_; }
inline float Position::speed() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.speed)
  return _internal_speed();
}
inline void Position::_internal_set_speed(float value) {
  _has_bits_[0] |= 0x00000010u;
  speed_ = value;
}
inline void Position::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.speed)
}

// -------------------------------------------------------------------

// TripDescriptor_ModifiedTripSelector

// optional string modifications_id = 1;
inline bool
TripDescriptor_ModifiedTripSelector::_internal_has_modifications_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TripDescriptor_ModifiedTripSelector::has_modifications_id() const {
  return _internal_has_modifications_id();
}
inline void TripDescriptor_ModifiedTripSelector::clear_modifications_id() {
  modifications_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &
TripDescriptor_ModifiedTripSelector::modifications_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
  return _internal_modifications_id();
}
inline void TripDescriptor_ModifiedTripSelector::set_modifications_id(
    const std::string &value) {
  _internal_set_modifications_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
}
inline std::string *
TripDescriptor_ModifiedTripSelector::mutable_modifications_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
  return _internal_mutable_modifications_id();
}
inline const std::string &
TripDescriptor_ModifiedTripSelector::_internal_modifications_id() const {
  return modifications_id_.Get();
}
inline void TripDescriptor_ModifiedTripSelector::_internal_set_modifications_id(
    const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  modifications_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void
TripDescriptor_ModifiedTripSelector::set_modifications_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  modifications_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
}
inline void
TripDescriptor_ModifiedTripSelector::set_modifications_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  modifications_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
}
inline void
TripDescriptor_ModifiedTripSelector::set_modifications_id(const char *value,
                                                          size_t size) {
  _has_bits_[0] |= 0x00000001u;
  modifications_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
}
inline std::string *
TripDescriptor_ModifiedTripSelector::_internal_mutable_modifications_id() {
  _has_bits_[0] |= 0x00000001u;
  return modifications_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *
TripDescriptor_ModifiedTripSelector::release_modifications_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
  if (!_internal_has_modifications_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return modifications_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripDescriptor_ModifiedTripSelector::set_allocated_modifications_id(
    std::string *modifications_id) {
  if (modifications_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modifications_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      modifications_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
}
inline std::string *
TripDescriptor_ModifiedTripSelector::unsafe_arena_release_modifications_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return modifications_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripDescriptor_ModifiedTripSelector::
    unsafe_arena_set_allocated_modifications_id(std::string *modifications_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (modifications_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modifications_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      modifications_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripDescriptor.ModifiedTripSelector.modifications_id)
}

// optional string affected_trip_id = 2;
inline bool
TripDescriptor_ModifiedTripSelector::_internal_has_affected_trip_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TripDescriptor_ModifiedTripSelector::has_affected_trip_id() const {
  return _internal_has_affected_trip_id();
}
inline void TripDescriptor_ModifiedTripSelector::clear_affected_trip_id() {
  affected_trip_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &
TripDescriptor_ModifiedTripSelector::affected_trip_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
  return _internal_affected_trip_id();
}
inline void TripDescriptor_ModifiedTripSelector::set_affected_trip_id(
    const std::string &value) {
  _internal_set_affected_trip_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
}
inline std::string *
TripDescriptor_ModifiedTripSelector::mutable_affected_trip_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
  return _internal_mutable_affected_trip_id();
}
inline const std::string &
TripDescriptor_ModifiedTripSelector::_internal_affected_trip_id() const {
  return affected_trip_id_.Get();
}
inline void TripDescriptor_ModifiedTripSelector::_internal_set_affected_trip_id(
    const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  affected_trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void
TripDescriptor_ModifiedTripSelector::set_affected_trip_id(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  affected_trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
}
inline void
TripDescriptor_ModifiedTripSelector::set_affected_trip_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  affected_trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
}
inline void
TripDescriptor_ModifiedTripSelector::set_affected_trip_id(const char *value,
                                                          size_t size) {
  _has_bits_[0] |= 0x00000002u;
  affected_trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
}
inline std::string *
TripDescriptor_ModifiedTripSelector::_internal_mutable_affected_trip_id() {
  _has_bits_[0] |= 0x00000002u;
  return affected_trip_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *
TripDescriptor_ModifiedTripSelector::release_affected_trip_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
  if (!_internal_has_affected_trip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return affected_trip_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripDescriptor_ModifiedTripSelector::set_allocated_affected_trip_id(
    std::string *affected_trip_id) {
  if (affected_trip_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  affected_trip_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      affected_trip_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
}
inline std::string *
TripDescriptor_ModifiedTripSelector::unsafe_arena_release_affected_trip_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return affected_trip_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripDescriptor_ModifiedTripSelector::
    unsafe_arena_set_allocated_affected_trip_id(std::string *affected_trip_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (affected_trip_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  affected_trip_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      affected_trip_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripDescriptor.ModifiedTripSelector.affected_trip_id)
}

// -------------------------------------------------------------------

// TripDescriptor

// optional string trip_id = 1;
inline bool TripDescriptor::_internal_has_trip_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TripDescriptor::has_trip_id() const {
  return _internal_has_trip_id();
}
inline void TripDescriptor::clear_trip_id() {
  trip_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &TripDescriptor::trip_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.trip_id)
  return _internal_trip_id();
}
inline void TripDescriptor::set_trip_id(const std::string &value) {
  _internal_set_trip_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.trip_id)
}
inline std::string *TripDescriptor::mutable_trip_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.trip_id)
  return _internal_mutable_trip_id();
}
inline const std::string &TripDescriptor::_internal_trip_id() const {
  return trip_id_.Get();
}
inline void TripDescriptor::_internal_set_trip_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripDescriptor::set_trip_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripDescriptor.trip_id)
}
inline void TripDescriptor::set_trip_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.trip_id)
}
inline void TripDescriptor::set_trip_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trip_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.trip_id)
}
inline std::string *TripDescriptor::_internal_mutable_trip_id() {
  _has_bits_[0] |= 0x00000001u;
  return trip_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripDescriptor::release_trip_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.trip_id)
  if (!_internal_has_trip_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trip_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripDescriptor::set_allocated_trip_id(std::string *trip_id) {
  if (trip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trip_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trip_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.trip_id)
}
inline std::string *TripDescriptor::unsafe_arena_release_trip_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripDescriptor.trip_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return trip_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripDescriptor::unsafe_arena_set_allocated_trip_id(std::string *trip_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trip_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trip_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trip_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripDescriptor.trip_id)
}

// optional string route_id = 5;
inline bool TripDescriptor::_internal_has_route_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TripDescriptor::has_route_id() const {
  return _internal_has_route_id();
}
inline void TripDescriptor::clear_route_id() {
  route_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string &TripDescriptor::route_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.route_id)
  return _internal_route_id();
}
inline void TripDescriptor::set_route_id(const std::string &value) {
  _internal_set_route_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.route_id)
}
inline std::string *TripDescriptor::mutable_route_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.route_id)
  return _internal_mutable_route_id();
}
inline const std::string &TripDescriptor::_internal_route_id() const {
  return route_id_.Get();
}
inline void TripDescriptor::_internal_set_route_id(const std::string &value) {
  _has_bits_[0] |= 0x00000008u;
  route_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripDescriptor::set_route_id(std::string &&value) {
  _has_bits_[0] |= 0x00000008u;
  route_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripDescriptor.route_id)
}
inline void TripDescriptor::set_route_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  route_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.route_id)
}
inline void TripDescriptor::set_route_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  route_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.route_id)
}
inline std::string *TripDescriptor::_internal_mutable_route_id() {
  _has_bits_[0] |= 0x00000008u;
  return route_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripDescriptor::release_route_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.route_id)
  if (!_internal_has_route_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return route_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripDescriptor::set_allocated_route_id(std::string *route_id) {
  if (route_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  route_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      route_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.route_id)
}
inline std::string *TripDescriptor::unsafe_arena_release_route_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripDescriptor.route_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return route_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripDescriptor::unsafe_arena_set_allocated_route_id(std::string *route_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (route_id != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  route_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      route_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripDescriptor.route_id)
}

// optional uint32 direction_id = 6;
inline bool TripDescriptor::_internal_has_direction_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TripDescriptor::has_direction_id() const {
  return _internal_has_direction_id();
}
inline void TripDescriptor::clear_direction_id() {
  direction_id_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
TripDescriptor::_internal_direction_id() const {
  return direction_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TripDescriptor::direction_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.direction_id)
  return _internal_direction_id();
}
inline void TripDescriptor::_internal_set_direction_id(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  direction_id_ = value;
}
inline void
TripDescriptor::set_direction_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.direction_id)
}

// optional string start_time = 2;
inline bool TripDescriptor::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TripDescriptor::has_start_time() const {
  return _internal_has_start_time();
}
inline void TripDescriptor::clear_start_time() {
  start_time_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &TripDescriptor::start_time() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.start_time)
  return _internal_start_time();
}
inline void TripDescriptor::set_start_time(const std::string &value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.start_time)
}
inline std::string *TripDescriptor::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.start_time)
  return _internal_mutable_start_time();
}
inline const std::string &TripDescriptor::_internal_start_time() const {
  return start_time_.Get();
}
inline void TripDescriptor::_internal_set_start_time(const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  start_time_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripDescriptor::set_start_time(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  start_time_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripDescriptor.start_time)
}
inline void TripDescriptor::set_start_time(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  start_time_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.start_time)
}
inline void TripDescriptor::set_start_time(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  start_time_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.start_time)
}
inline std::string *TripDescriptor::_internal_mutable_start_time() {
  _has_bits_[0] |= 0x00000002u;
  return start_time_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripDescriptor::release_start_time() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.start_time)
  if (!_internal_has_start_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return start_time_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripDescriptor::set_allocated_start_time(std::string *start_time) {
  if (start_time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_time_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_time, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.start_time)
}
inline std::string *TripDescriptor::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripDescriptor.start_time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return start_time_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripDescriptor::unsafe_arena_set_allocated_start_time(std::string *start_time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_time != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_time_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripDescriptor.start_time)
}

// optional string start_date = 3;
inline bool TripDescriptor::_internal_has_start_date() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TripDescriptor::has_start_date() const {
  return _internal_has_start_date();
}
inline void TripDescriptor::clear_start_date() {
  start_date_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string &TripDescriptor::start_date() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.start_date)
  return _internal_start_date();
}
inline void TripDescriptor::set_start_date(const std::string &value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.start_date)
}
inline std::string *TripDescriptor::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.start_date)
  return _internal_mutable_start_date();
}
inline const std::string &TripDescriptor::_internal_start_date() const {
  return start_date_.Get();
}
inline void TripDescriptor::_internal_set_start_date(const std::string &value) {
  _has_bits_[0] |= 0x00000004u;
  start_date_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripDescriptor::set_start_date(std::string &&value) {
  _has_bits_[0] |= 0x00000004u;
  start_date_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripDescriptor.start_date)
}
inline void TripDescriptor::set_start_date(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  start_date_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripDescriptor.start_date)
}
inline void TripDescriptor::set_start_date(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  start_date_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripDescriptor.start_date)
}
inline std::string *TripDescriptor::_internal_mutable_start_date() {
  _has_bits_[0] |= 0x00000004u;
  return start_date_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripDescriptor::release_start_date() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.start_date)
  if (!_internal_has_start_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return start_date_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripDescriptor::set_allocated_start_date(std::string *start_date) {
  if (start_date != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  start_date_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_date, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.start_date)
}
inline std::string *TripDescriptor::unsafe_arena_release_start_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripDescriptor.start_date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return start_date_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripDescriptor::unsafe_arena_set_allocated_start_date(std::string *start_date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (start_date != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  start_date_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      start_date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripDescriptor.start_date)
}

// optional .transit_realtime.TripDescriptor.ScheduleRelationship
// schedule_relationship = 4;
inline bool TripDescriptor::_internal_has_schedule_relationship() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TripDescriptor::has_schedule_relationship() const {
  return _internal_has_schedule_relationship();
}
inline void TripDescriptor::clear_schedule_relationship() {
  schedule_relationship_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::transit_realtime::TripDescriptor_ScheduleRelationship
TripDescriptor::_internal_schedule_relationship() const {
  return static_cast<::transit_realtime::TripDescriptor_ScheduleRelationship>(
      schedule_relationship_);
}
inline ::transit_realtime::TripDescriptor_ScheduleRelationship
TripDescriptor::schedule_relationship() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.schedule_relationship)
  return _internal_schedule_relationship();
}
inline void TripDescriptor::_internal_set_schedule_relationship(
    ::transit_realtime::TripDescriptor_ScheduleRelationship value) {
  assert(
      ::transit_realtime::TripDescriptor_ScheduleRelationship_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  schedule_relationship_ = value;
}
inline void TripDescriptor::set_schedule_relationship(
    ::transit_realtime::TripDescriptor_ScheduleRelationship value) {
  _internal_set_schedule_relationship(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.schedule_relationship)
}

// optional .transit_realtime.TripDescriptor.ModifiedTripSelector modified_trip
// = 7;
inline bool TripDescriptor::_internal_has_modified_trip() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || modified_trip_ != nullptr);
  return value;
}
inline bool TripDescriptor::has_modified_trip() const {
  return _internal_has_modified_trip();
}
inline void TripDescriptor::clear_modified_trip() {
  if (modified_trip_ != nullptr)
    modified_trip_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::transit_realtime::TripDescriptor_ModifiedTripSelector &
TripDescriptor::_internal_modified_trip() const {
  const ::transit_realtime::TripDescriptor_ModifiedTripSelector *p =
      modified_trip_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::
                                     TripDescriptor_ModifiedTripSelector *>(
                   &::transit_realtime::
                       _TripDescriptor_ModifiedTripSelector_default_instance_);
}
inline const ::transit_realtime::TripDescriptor_ModifiedTripSelector &
TripDescriptor::modified_trip() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.modified_trip)
  return _internal_modified_trip();
}
inline void TripDescriptor::unsafe_arena_set_allocated_modified_trip(
    ::transit_realtime::TripDescriptor_ModifiedTripSelector *modified_trip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        modified_trip_);
  }
  modified_trip_ = modified_trip;
  if (modified_trip) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripDescriptor.modified_trip)
}
inline ::transit_realtime::TripDescriptor_ModifiedTripSelector *
TripDescriptor::release_modified_trip() {
  auto temp = unsafe_arena_release_modified_trip();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripDescriptor_ModifiedTripSelector *
TripDescriptor::unsafe_arena_release_modified_trip() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.modified_trip)
  _has_bits_[0] &= ~0x00000010u;
  ::transit_realtime::TripDescriptor_ModifiedTripSelector *temp =
      modified_trip_;
  modified_trip_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripDescriptor_ModifiedTripSelector *
TripDescriptor::_internal_mutable_modified_trip() {
  _has_bits_[0] |= 0x00000010u;
  if (modified_trip_ == nullptr) {
    auto *p = CreateMaybeMessage<
        ::transit_realtime::TripDescriptor_ModifiedTripSelector>(GetArena());
    modified_trip_ = p;
  }
  return modified_trip_;
}
inline ::transit_realtime::TripDescriptor_ModifiedTripSelector *
TripDescriptor::mutable_modified_trip() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.modified_trip)
  return _internal_mutable_modified_trip();
}
inline void TripDescriptor::set_allocated_modified_trip(
    ::transit_realtime::TripDescriptor_ModifiedTripSelector *modified_trip) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete modified_trip_;
  }
  if (modified_trip) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(modified_trip);
    if (message_arena != submessage_arena) {
      modified_trip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modified_trip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  modified_trip_ = modified_trip;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.modified_trip)
}

// -------------------------------------------------------------------

// VehicleDescriptor

// optional string id = 1;
inline bool VehicleDescriptor::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleDescriptor::has_id() const { return _internal_has_id(); }
inline void VehicleDescriptor::clear_id() {
  id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &VehicleDescriptor::id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.id)
  return _internal_id();
}
inline void VehicleDescriptor::set_id(const std::string &value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.id)
}
inline std::string *VehicleDescriptor::mutable_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehicleDescriptor.id)
  return _internal_mutable_id();
}
inline const std::string &VehicleDescriptor::_internal_id() const {
  return id_.Get();
}
inline void VehicleDescriptor::_internal_set_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          value, GetArena());
}
inline void VehicleDescriptor::set_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.VehicleDescriptor.id)
}
inline void VehicleDescriptor::set_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehicleDescriptor.id)
}
inline void VehicleDescriptor::set_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          ::std::string(reinterpret_cast<const char *>(value), size),
          GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehicleDescriptor.id)
}
inline std::string *VehicleDescriptor::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *VehicleDescriptor::release_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehicleDescriptor.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehicleDescriptor::set_allocated_id(std::string *id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehicleDescriptor.id)
}
inline std::string *VehicleDescriptor::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.VehicleDescriptor.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehicleDescriptor::unsafe_arena_set_allocated_id(std::string *id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehicleDescriptor.id)
}

// optional string label = 2;
inline bool VehicleDescriptor::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleDescriptor::has_label() const {
  return _internal_has_label();
}
inline void VehicleDescriptor::clear_label() {
  label_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &VehicleDescriptor::label() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.label)
  return _internal_label();
}
inline void VehicleDescriptor::set_label(const std::string &value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.label)
}
inline std::string *VehicleDescriptor::mutable_label() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehicleDescriptor.label)
  return _internal_mutable_label();
}
inline const std::string &VehicleDescriptor::_internal_label() const {
  return label_.Get();
}
inline void VehicleDescriptor::_internal_set_label(const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             value, GetArena());
}
inline void VehicleDescriptor::set_label(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.VehicleDescriptor.label)
}
inline void VehicleDescriptor::set_label(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehicleDescriptor.label)
}
inline void VehicleDescriptor::set_label(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
             ::std::string(reinterpret_cast<const char *>(value), size),
             GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehicleDescriptor.label)
}
inline std::string *VehicleDescriptor::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000002u;
  return label_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *VehicleDescriptor::release_label() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehicleDescriptor.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return label_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehicleDescriptor::set_allocated_label(std::string *label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehicleDescriptor.label)
}
inline std::string *VehicleDescriptor::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.VehicleDescriptor.label)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return label_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
VehicleDescriptor::unsafe_arena_set_allocated_label(std::string *label) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  label_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehicleDescriptor.label)
}

// optional string license_plate = 3;
inline bool VehicleDescriptor::_internal_has_license_plate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleDescriptor::has_license_plate() const {
  return _internal_has_license_plate();
}
inline void VehicleDescriptor::clear_license_plate() {
  license_plate_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string &VehicleDescriptor::license_plate() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.license_plate)
  return _internal_license_plate();
}
inline void VehicleDescriptor::set_license_plate(const std::string &value) {
  _internal_set_license_plate(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.license_plate)
}
inline std::string *VehicleDescriptor::mutable_license_plate() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehicleDescriptor.license_plate)
  return _internal_mutable_license_plate();
}
inline const std::string &VehicleDescriptor::_internal_license_plate() const {
  return license_plate_.Get();
}
inline void
VehicleDescriptor::_internal_set_license_plate(const std::string &value) {
  _has_bits_[0] |= 0x00000004u;
  license_plate_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void VehicleDescriptor::set_license_plate(std::string &&value) {
  _has_bits_[0] |= 0x00000004u;
  license_plate_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.VehicleDescriptor.license_plate)
}
inline void VehicleDescriptor::set_license_plate(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  license_plate_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.VehicleDescriptor.license_plate)
}
inline void VehicleDescriptor::set_license_plate(const char *value,
                                                 size_t size) {
  _has_bits_[0] |= 0x00000004u;
  license_plate_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.VehicleDescriptor.license_plate)
}
inline std::string *VehicleDescriptor::_internal_mutable_license_plate() {
  _has_bits_[0] |= 0x00000004u;
  return license_plate_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *VehicleDescriptor::release_license_plate() {
  // @@protoc_insertion_point(field_release:transit_realtime.VehicleDescriptor.license_plate)
  if (!_internal_has_license_plate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return license_plate_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
VehicleDescriptor::set_allocated_license_plate(std::string *license_plate) {
  if (license_plate != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  license_plate_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      license_plate, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehicleDescriptor.license_plate)
}
inline std::string *VehicleDescriptor::unsafe_arena_release_license_plate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.VehicleDescriptor.license_plate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return license_plate_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VehicleDescriptor::unsafe_arena_set_allocated_license_plate(
    std::string *license_plate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (license_plate != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  license_plate_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      license_plate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehicleDescriptor.license_plate)
}

// optional .transit_realtime.VehicleDescriptor.WheelchairAccessible
// wheelchair_accessible = 4 [default = NO_VALUE];
inline bool VehicleDescriptor::_internal_has_wheelchair_accessible() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehicleDescriptor::has_wheelchair_accessible() const {
  return _internal_has_wheelchair_accessible();
}
inline void VehicleDescriptor::clear_wheelchair_accessible() {
  wheelchair_accessible_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::transit_realtime::VehicleDescriptor_WheelchairAccessible
VehicleDescriptor::_internal_wheelchair_accessible() const {
  return static_cast<
      ::transit_realtime::VehicleDescriptor_WheelchairAccessible>(
      wheelchair_accessible_);
}
inline ::transit_realtime::VehicleDescriptor_WheelchairAccessible
VehicleDescriptor::wheelchair_accessible() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.wheelchair_accessible)
  return _internal_wheelchair_accessible();
}
inline void VehicleDescriptor::_internal_set_wheelchair_accessible(
    ::transit_realtime::VehicleDescriptor_WheelchairAccessible value) {
  assert(::transit_realtime::VehicleDescriptor_WheelchairAccessible_IsValid(
      value));
  _has_bits_[0] |= 0x00000008u;
  wheelchair_accessible_ = value;
}
inline void VehicleDescriptor::set_wheelchair_accessible(
    ::transit_realtime::VehicleDescriptor_WheelchairAccessible value) {
  _internal_set_wheelchair_accessible(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.wheelchair_accessible)
}

// -------------------------------------------------------------------

// EntitySelector

// optional string agency_id = 1;
inline bool EntitySelector::_internal_has_agency_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EntitySelector::has_agency_id() const {
  return _internal_has_agency_id();
}
inline void EntitySelector::clear_agency_id() {
  agency_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &EntitySelector::agency_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.agency_id)
  return _internal_agency_id();
}
inline void EntitySelector::set_agency_id(const std::string &value) {
  _internal_set_agency_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.agency_id)
}
inline std::string *EntitySelector::mutable_agency_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.agency_id)
  return _internal_mutable_agency_id();
}
inline const std::string &EntitySelector::_internal_agency_id() const {
  return agency_id_.Get();
}
inline void EntitySelector::_internal_set_agency_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  agency_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void EntitySelector::set_agency_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  agency_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.EntitySelector.agency_id)
}
inline void EntitySelector::set_agency_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  agency_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.EntitySelector.agency_id)
}
inline void EntitySelector::set_agency_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  agency_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.EntitySelector.agency_id)
}
inline std::string *EntitySelector::_internal_mutable_agency_id() {
  _has_bits_[0] |= 0x00000001u;
  return agency_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *EntitySelector::release_agency_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.agency_id)
  if (!_internal_has_agency_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return agency_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntitySelector::set_allocated_agency_id(std::string *agency_id) {
  if (agency_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agency_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agency_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.agency_id)
}
inline std::string *EntitySelector::unsafe_arena_release_agency_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.EntitySelector.agency_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return agency_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
EntitySelector::unsafe_arena_set_allocated_agency_id(std::string *agency_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (agency_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  agency_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agency_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.EntitySelector.agency_id)
}

// optional string route_id = 2;
inline bool EntitySelector::_internal_has_route_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EntitySelector::has_route_id() const {
  return _internal_has_route_id();
}
inline void EntitySelector::clear_route_id() {
  route_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &EntitySelector::route_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.route_id)
  return _internal_route_id();
}
inline void EntitySelector::set_route_id(const std::string &value) {
  _internal_set_route_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.route_id)
}
inline std::string *EntitySelector::mutable_route_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.route_id)
  return _internal_mutable_route_id();
}
inline const std::string &EntitySelector::_internal_route_id() const {
  return route_id_.Get();
}
inline void EntitySelector::_internal_set_route_id(const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  route_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void EntitySelector::set_route_id(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  route_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.EntitySelector.route_id)
}
inline void EntitySelector::set_route_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  route_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.EntitySelector.route_id)
}
inline void EntitySelector::set_route_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  route_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.EntitySelector.route_id)
}
inline std::string *EntitySelector::_internal_mutable_route_id() {
  _has_bits_[0] |= 0x00000002u;
  return route_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *EntitySelector::release_route_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.route_id)
  if (!_internal_has_route_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return route_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntitySelector::set_allocated_route_id(std::string *route_id) {
  if (route_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  route_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      route_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.route_id)
}
inline std::string *EntitySelector::unsafe_arena_release_route_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.EntitySelector.route_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return route_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
EntitySelector::unsafe_arena_set_allocated_route_id(std::string *route_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (route_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  route_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      route_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.EntitySelector.route_id)
}

// optional int32 route_type = 3;
inline bool EntitySelector::_internal_has_route_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EntitySelector::has_route_type() const {
  return _internal_has_route_type();
}
inline void EntitySelector::clear_route_type() {
  route_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
EntitySelector::_internal_route_type() const {
  return route_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EntitySelector::route_type() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.route_type)
  return _internal_route_type();
}
inline void
EntitySelector::_internal_set_route_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  route_type_ = value;
}
inline void
EntitySelector::set_route_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_route_type(value);
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.route_type)
}

// optional .transit_realtime.TripDescriptor trip = 4;
inline bool EntitySelector::_internal_has_trip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || trip_ != nullptr);
  return value;
}
inline bool EntitySelector::has_trip() const { return _internal_has_trip(); }
inline void EntitySelector::clear_trip() {
  if (trip_ != nullptr)
    trip_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::transit_realtime::TripDescriptor &
EntitySelector::_internal_trip() const {
  const ::transit_realtime::TripDescriptor *p = trip_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TripDescriptor *>(
                   &::transit_realtime::_TripDescriptor_default_instance_);
}
inline const ::transit_realtime::TripDescriptor &EntitySelector::trip() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.trip)
  return _internal_trip();
}
inline void EntitySelector::unsafe_arena_set_allocated_trip(
    ::transit_realtime::TripDescriptor *trip) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(trip_);
  }
  trip_ = trip;
  if (trip) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.EntitySelector.trip)
}
inline ::transit_realtime::TripDescriptor *EntitySelector::release_trip() {
  auto temp = unsafe_arena_release_trip();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TripDescriptor *
EntitySelector::unsafe_arena_release_trip() {
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.trip)
  _has_bits_[0] &= ~0x00000008u;
  ::transit_realtime::TripDescriptor *temp = trip_;
  trip_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripDescriptor *
EntitySelector::_internal_mutable_trip() {
  _has_bits_[0] |= 0x00000008u;
  if (trip_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TripDescriptor>(GetArena());
    trip_ = p;
  }
  return trip_;
}
inline ::transit_realtime::TripDescriptor *EntitySelector::mutable_trip() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.trip)
  return _internal_mutable_trip();
}
inline void
EntitySelector::set_allocated_trip(::transit_realtime::TripDescriptor *trip) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trip_;
  }
  if (trip) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trip);
    if (message_arena != submessage_arena) {
      trip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  trip_ = trip;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.trip)
}

// optional string stop_id = 5;
inline bool EntitySelector::_internal_has_stop_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EntitySelector::has_stop_id() const {
  return _internal_has_stop_id();
}
inline void EntitySelector::clear_stop_id() {
  stop_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string &EntitySelector::stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.stop_id)
  return _internal_stop_id();
}
inline void EntitySelector::set_stop_id(const std::string &value) {
  _internal_set_stop_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.stop_id)
}
inline std::string *EntitySelector::mutable_stop_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.stop_id)
  return _internal_mutable_stop_id();
}
inline const std::string &EntitySelector::_internal_stop_id() const {
  return stop_id_.Get();
}
inline void EntitySelector::_internal_set_stop_id(const std::string &value) {
  _has_bits_[0] |= 0x00000004u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void EntitySelector::set_stop_id(std::string &&value) {
  _has_bits_[0] |= 0x00000004u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.EntitySelector.stop_id)
}
inline void EntitySelector::set_stop_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.EntitySelector.stop_id)
}
inline void EntitySelector::set_stop_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.EntitySelector.stop_id)
}
inline std::string *EntitySelector::_internal_mutable_stop_id() {
  _has_bits_[0] |= 0x00000004u;
  return stop_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *EntitySelector::release_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.stop_id)
  if (!_internal_has_stop_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return stop_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void EntitySelector::set_allocated_stop_id(std::string *stop_id) {
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stop_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.stop_id)
}
inline std::string *EntitySelector::unsafe_arena_release_stop_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.EntitySelector.stop_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return stop_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
EntitySelector::unsafe_arena_set_allocated_stop_id(std::string *stop_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  stop_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.EntitySelector.stop_id)
}

// optional uint32 direction_id = 6;
inline bool EntitySelector::_internal_has_direction_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EntitySelector::has_direction_id() const {
  return _internal_has_direction_id();
}
inline void EntitySelector::clear_direction_id() {
  direction_id_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
EntitySelector::_internal_direction_id() const {
  return direction_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EntitySelector::direction_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.direction_id)
  return _internal_direction_id();
}
inline void EntitySelector::_internal_set_direction_id(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  direction_id_ = value;
}
inline void
EntitySelector::set_direction_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.direction_id)
}

// -------------------------------------------------------------------

// TranslatedString_Translation

// optional string text = 1;
inline bool TranslatedString_Translation::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TranslatedString_Translation::has_text() const {
  return _internal_has_text();
}
inline void TranslatedString_Translation::clear_text() {
  text_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &TranslatedString_Translation::text() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedString.Translation.text)
  return _internal_text();
}
inline void TranslatedString_Translation::set_text(const std::string &value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TranslatedString.Translation.text)
}
inline std::string *TranslatedString_Translation::mutable_text() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedString.Translation.text)
  return _internal_mutable_text();
}
inline const std::string &TranslatedString_Translation::_internal_text() const {
  return text_.Get();
}
inline void
TranslatedString_Translation::_internal_set_text(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            value, GetArena());
}
inline void TranslatedString_Translation::set_text(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TranslatedString.Translation.text)
}
inline void TranslatedString_Translation::set_text(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TranslatedString.Translation.text)
}
inline void TranslatedString_Translation::set_text(const char *value,
                                                   size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
            ::std::string(reinterpret_cast<const char *>(value), size),
            GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TranslatedString.Translation.text)
}
inline std::string *TranslatedString_Translation::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TranslatedString_Translation::release_text() {
  // @@protoc_insertion_point(field_release:transit_realtime.TranslatedString.Translation.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TranslatedString_Translation::set_allocated_text(std::string *text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TranslatedString.Translation.text)
}
inline std::string *TranslatedString_Translation::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TranslatedString.Translation.text)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return text_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TranslatedString_Translation::unsafe_arena_set_allocated_text(
    std::string *text) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TranslatedString.Translation.text)
}

// optional string language = 2;
inline bool TranslatedString_Translation::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TranslatedString_Translation::has_language() const {
  return _internal_has_language();
}
inline void TranslatedString_Translation::clear_language() {
  language_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &TranslatedString_Translation::language() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedString.Translation.language)
  return _internal_language();
}
inline void
TranslatedString_Translation::set_language(const std::string &value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TranslatedString.Translation.language)
}
inline std::string *TranslatedString_Translation::mutable_language() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedString.Translation.language)
  return _internal_mutable_language();
}
inline const std::string &
TranslatedString_Translation::_internal_language() const {
  return language_.Get();
}
inline void
TranslatedString_Translation::_internal_set_language(const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  language_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TranslatedString_Translation::set_language(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  language_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TranslatedString.Translation.language)
}
inline void TranslatedString_Translation::set_language(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  language_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TranslatedString.Translation.language)
}
inline void TranslatedString_Translation::set_language(const char *value,
                                                       size_t size) {
  _has_bits_[0] |= 0x00000002u;
  language_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TranslatedString.Translation.language)
}
inline std::string *TranslatedString_Translation::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000002u;
  return language_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TranslatedString_Translation::release_language() {
  // @@protoc_insertion_point(field_release:transit_realtime.TranslatedString.Translation.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return language_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TranslatedString_Translation::set_allocated_language(std::string *language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  language_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TranslatedString.Translation.language)
}
inline std::string *
TranslatedString_Translation::unsafe_arena_release_language() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TranslatedString.Translation.language)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return language_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TranslatedString_Translation::unsafe_arena_set_allocated_language(
    std::string *language) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  language_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TranslatedString.Translation.language)
}

// -------------------------------------------------------------------

// TranslatedString

// repeated .transit_realtime.TranslatedString.Translation translation = 1;
inline int TranslatedString::_internal_translation_size() const {
  return translation_.size();
}
inline int TranslatedString::translation_size() const {
  return _internal_translation_size();
}
inline void TranslatedString::clear_translation() { translation_.Clear(); }
inline ::transit_realtime::TranslatedString_Translation *
TranslatedString::mutable_translation(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedString.translation)
  return translation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TranslatedString_Translation> *
TranslatedString::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TranslatedString.translation)
  return &translation_;
}
inline const ::transit_realtime::TranslatedString_Translation &
TranslatedString::_internal_translation(int index) const {
  return translation_.Get(index);
}
inline const ::transit_realtime::TranslatedString_Translation &
TranslatedString::translation(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedString.translation)
  return _internal_translation(index);
}
inline ::transit_realtime::TranslatedString_Translation *
TranslatedString::_internal_add_translation() {
  return translation_.Add();
}
inline ::transit_realtime::TranslatedString_Translation *
TranslatedString::add_translation() {
  // @@protoc_insertion_point(field_add:transit_realtime.TranslatedString.translation)
  return _internal_add_translation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TranslatedString_Translation> &
TranslatedString::translation() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TranslatedString.translation)
  return translation_;
}

// -------------------------------------------------------------------

// TranslatedImage_LocalizedImage

// optional string url = 1;
inline bool TranslatedImage_LocalizedImage::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TranslatedImage_LocalizedImage::has_url() const {
  return _internal_has_url();
}
inline void TranslatedImage_LocalizedImage::clear_url() {
  url_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &TranslatedImage_LocalizedImage::url() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedImage.LocalizedImage.url)
  return _internal_url();
}
inline void TranslatedImage_LocalizedImage::set_url(const std::string &value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TranslatedImage.LocalizedImage.url)
}
inline std::string *TranslatedImage_LocalizedImage::mutable_url() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedImage.LocalizedImage.url)
  return _internal_mutable_url();
}
inline const std::string &
TranslatedImage_LocalizedImage::_internal_url() const {
  return url_.Get();
}
inline void
TranslatedImage_LocalizedImage::_internal_set_url(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
           value, GetArena());
}
inline void TranslatedImage_LocalizedImage::set_url(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
           ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TranslatedImage.LocalizedImage.url)
}
inline void TranslatedImage_LocalizedImage::set_url(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
           ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TranslatedImage.LocalizedImage.url)
}
inline void TranslatedImage_LocalizedImage::set_url(const char *value,
                                                    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
           ::std::string(reinterpret_cast<const char *>(value), size),
           GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TranslatedImage.LocalizedImage.url)
}
inline std::string *TranslatedImage_LocalizedImage::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TranslatedImage_LocalizedImage::release_url() {
  // @@protoc_insertion_point(field_release:transit_realtime.TranslatedImage.LocalizedImage.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TranslatedImage_LocalizedImage::set_allocated_url(std::string *url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TranslatedImage.LocalizedImage.url)
}
inline std::string *TranslatedImage_LocalizedImage::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TranslatedImage.LocalizedImage.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return url_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TranslatedImage_LocalizedImage::unsafe_arena_set_allocated_url(
    std::string *url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TranslatedImage.LocalizedImage.url)
}

// optional string media_type = 2;
inline bool TranslatedImage_LocalizedImage::_internal_has_media_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TranslatedImage_LocalizedImage::has_media_type() const {
  return _internal_has_media_type();
}
inline void TranslatedImage_LocalizedImage::clear_media_type() {
  media_type_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &TranslatedImage_LocalizedImage::media_type() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedImage.LocalizedImage.media_type)
  return _internal_media_type();
}
inline void
TranslatedImage_LocalizedImage::set_media_type(const std::string &value) {
  _internal_set_media_type(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TranslatedImage.LocalizedImage.media_type)
}
inline std::string *TranslatedImage_LocalizedImage::mutable_media_type() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedImage.LocalizedImage.media_type)
  return _internal_mutable_media_type();
}
inline const std::string &
TranslatedImage_LocalizedImage::_internal_media_type() const {
  return media_type_.Get();
}
inline void TranslatedImage_LocalizedImage::_internal_set_media_type(
    const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  media_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void
TranslatedImage_LocalizedImage::set_media_type(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  media_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TranslatedImage.LocalizedImage.media_type)
}
inline void TranslatedImage_LocalizedImage::set_media_type(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  media_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TranslatedImage.LocalizedImage.media_type)
}
inline void TranslatedImage_LocalizedImage::set_media_type(const char *value,
                                                           size_t size) {
  _has_bits_[0] |= 0x00000002u;
  media_type_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TranslatedImage.LocalizedImage.media_type)
}
inline std::string *
TranslatedImage_LocalizedImage::_internal_mutable_media_type() {
  _has_bits_[0] |= 0x00000002u;
  return media_type_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TranslatedImage_LocalizedImage::release_media_type() {
  // @@protoc_insertion_point(field_release:transit_realtime.TranslatedImage.LocalizedImage.media_type)
  if (!_internal_has_media_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return media_type_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TranslatedImage_LocalizedImage::set_allocated_media_type(
    std::string *media_type) {
  if (media_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  media_type_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_type, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TranslatedImage.LocalizedImage.media_type)
}
inline std::string *
TranslatedImage_LocalizedImage::unsafe_arena_release_media_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TranslatedImage.LocalizedImage.media_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return media_type_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TranslatedImage_LocalizedImage::unsafe_arena_set_allocated_media_type(
    std::string *media_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (media_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  media_type_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TranslatedImage.LocalizedImage.media_type)
}

// optional string language = 3;
inline bool TranslatedImage_LocalizedImage::_internal_has_language() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TranslatedImage_LocalizedImage::has_language() const {
  return _internal_has_language();
}
inline void TranslatedImage_LocalizedImage::clear_language() {
  language_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string &TranslatedImage_LocalizedImage::language() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedImage.LocalizedImage.language)
  return _internal_language();
}
inline void
TranslatedImage_LocalizedImage::set_language(const std::string &value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TranslatedImage.LocalizedImage.language)
}
inline std::string *TranslatedImage_LocalizedImage::mutable_language() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedImage.LocalizedImage.language)
  return _internal_mutable_language();
}
inline const std::string &
TranslatedImage_LocalizedImage::_internal_language() const {
  return language_.Get();
}
inline void TranslatedImage_LocalizedImage::_internal_set_language(
    const std::string &value) {
  _has_bits_[0] |= 0x00000004u;
  language_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TranslatedImage_LocalizedImage::set_language(std::string &&value) {
  _has_bits_[0] |= 0x00000004u;
  language_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TranslatedImage.LocalizedImage.language)
}
inline void TranslatedImage_LocalizedImage::set_language(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  language_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TranslatedImage.LocalizedImage.language)
}
inline void TranslatedImage_LocalizedImage::set_language(const char *value,
                                                         size_t size) {
  _has_bits_[0] |= 0x00000004u;
  language_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TranslatedImage.LocalizedImage.language)
}
inline std::string *
TranslatedImage_LocalizedImage::_internal_mutable_language() {
  _has_bits_[0] |= 0x00000004u;
  return language_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TranslatedImage_LocalizedImage::release_language() {
  // @@protoc_insertion_point(field_release:transit_realtime.TranslatedImage.LocalizedImage.language)
  if (!_internal_has_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return language_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TranslatedImage_LocalizedImage::set_allocated_language(std::string *language) {
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  language_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TranslatedImage.LocalizedImage.language)
}
inline std::string *
TranslatedImage_LocalizedImage::unsafe_arena_release_language() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TranslatedImage.LocalizedImage.language)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return language_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TranslatedImage_LocalizedImage::unsafe_arena_set_allocated_language(
    std::string *language) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (language != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  language_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TranslatedImage.LocalizedImage.language)
}

// -------------------------------------------------------------------

// TranslatedImage

// repeated .transit_realtime.TranslatedImage.LocalizedImage localized_image =
// 1;
inline int TranslatedImage::_internal_localized_image_size() const {
  return localized_image_.size();
}
inline int TranslatedImage::localized_image_size() const {
  return _internal_localized_image_size();
}
inline void TranslatedImage::clear_localized_image() {
  localized_image_.Clear();
}
inline ::transit_realtime::TranslatedImage_LocalizedImage *
TranslatedImage::mutable_localized_image(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedImage.localized_image)
  return localized_image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TranslatedImage_LocalizedImage> *
TranslatedImage::mutable_localized_image() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TranslatedImage.localized_image)
  return &localized_image_;
}
inline const ::transit_realtime::TranslatedImage_LocalizedImage &
TranslatedImage::_internal_localized_image(int index) const {
  return localized_image_.Get(index);
}
inline const ::transit_realtime::TranslatedImage_LocalizedImage &
TranslatedImage::localized_image(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedImage.localized_image)
  return _internal_localized_image(index);
}
inline ::transit_realtime::TranslatedImage_LocalizedImage *
TranslatedImage::_internal_add_localized_image() {
  return localized_image_.Add();
}
inline ::transit_realtime::TranslatedImage_LocalizedImage *
TranslatedImage::add_localized_image() {
  // @@protoc_insertion_point(field_add:transit_realtime.TranslatedImage.localized_image)
  return _internal_add_localized_image();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TranslatedImage_LocalizedImage> &
TranslatedImage::localized_image() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TranslatedImage.localized_image)
  return localized_image_;
}

// -------------------------------------------------------------------

// Shape

// optional string shape_id = 1;
inline bool Shape::_internal_has_shape_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Shape::has_shape_id() const { return _internal_has_shape_id(); }
inline void Shape::clear_shape_id() {
  shape_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &Shape::shape_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Shape.shape_id)
  return _internal_shape_id();
}
inline void Shape::set_shape_id(const std::string &value) {
  _internal_set_shape_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Shape.shape_id)
}
inline std::string *Shape::mutable_shape_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Shape.shape_id)
  return _internal_mutable_shape_id();
}
inline const std::string &Shape::_internal_shape_id() const {
  return shape_id_.Get();
}
inline void Shape::_internal_set_shape_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void Shape::set_shape_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.Shape.shape_id)
}
inline void Shape::set_shape_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.Shape.shape_id)
}
inline void Shape::set_shape_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.Shape.shape_id)
}
inline std::string *Shape::_internal_mutable_shape_id() {
  _has_bits_[0] |= 0x00000001u;
  return shape_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *Shape::release_shape_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.Shape.shape_id)
  if (!_internal_has_shape_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return shape_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Shape::set_allocated_shape_id(std::string *shape_id) {
  if (shape_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shape_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Shape.shape_id)
}
inline std::string *Shape::unsafe_arena_release_shape_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.Shape.shape_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return shape_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Shape::unsafe_arena_set_allocated_shape_id(std::string *shape_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shape_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shape_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Shape.shape_id)
}

// optional string encoded_polyline = 2;
inline bool Shape::_internal_has_encoded_polyline() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Shape::has_encoded_polyline() const {
  return _internal_has_encoded_polyline();
}
inline void Shape::clear_encoded_polyline() {
  encoded_polyline_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &Shape::encoded_polyline() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Shape.encoded_polyline)
  return _internal_encoded_polyline();
}
inline void Shape::set_encoded_polyline(const std::string &value) {
  _internal_set_encoded_polyline(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Shape.encoded_polyline)
}
inline std::string *Shape::mutable_encoded_polyline() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Shape.encoded_polyline)
  return _internal_mutable_encoded_polyline();
}
inline const std::string &Shape::_internal_encoded_polyline() const {
  return encoded_polyline_.Get();
}
inline void Shape::_internal_set_encoded_polyline(const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  encoded_polyline_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void Shape::set_encoded_polyline(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  encoded_polyline_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.Shape.encoded_polyline)
}
inline void Shape::set_encoded_polyline(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  encoded_polyline_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.Shape.encoded_polyline)
}
inline void Shape::set_encoded_polyline(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  encoded_polyline_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.Shape.encoded_polyline)
}
inline std::string *Shape::_internal_mutable_encoded_polyline() {
  _has_bits_[0] |= 0x00000002u;
  return encoded_polyline_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *Shape::release_encoded_polyline() {
  // @@protoc_insertion_point(field_release:transit_realtime.Shape.encoded_polyline)
  if (!_internal_has_encoded_polyline()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return encoded_polyline_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
Shape::set_allocated_encoded_polyline(std::string *encoded_polyline) {
  if (encoded_polyline != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encoded_polyline_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encoded_polyline, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Shape.encoded_polyline)
}
inline std::string *Shape::unsafe_arena_release_encoded_polyline() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.Shape.encoded_polyline)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return encoded_polyline_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Shape::unsafe_arena_set_allocated_encoded_polyline(
    std::string *encoded_polyline) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encoded_polyline != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  encoded_polyline_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encoded_polyline, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Shape.encoded_polyline)
}

// -------------------------------------------------------------------

// Stop

// optional string stop_id = 1;
inline bool Stop::_internal_has_stop_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Stop::has_stop_id() const { return _internal_has_stop_id(); }
inline void Stop::clear_stop_id() {
  stop_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &Stop::stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.stop_id)
  return _internal_stop_id();
}
inline void Stop::set_stop_id(const std::string &value) {
  _internal_set_stop_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Stop.stop_id)
}
inline std::string *Stop::mutable_stop_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.stop_id)
  return _internal_mutable_stop_id();
}
inline const std::string &Stop::_internal_stop_id() const {
  return stop_id_.Get();
}
inline void Stop::_internal_set_stop_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void Stop::set_stop_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.Stop.stop_id)
}
inline void Stop::set_stop_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.Stop.stop_id)
}
inline void Stop::set_stop_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.Stop.stop_id)
}
inline std::string *Stop::_internal_mutable_stop_id() {
  _has_bits_[0] |= 0x00000001u;
  return stop_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *Stop::release_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.stop_id)
  if (!_internal_has_stop_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stop::set_allocated_stop_id(std::string *stop_id) {
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.stop_id)
}
inline std::string *Stop::unsafe_arena_release_stop_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.Stop.stop_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stop::unsafe_arena_set_allocated_stop_id(std::string *stop_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.stop_id)
}

// optional .transit_realtime.TranslatedString stop_code = 2;
inline bool Stop::_internal_has_stop_code() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || stop_code_ != nullptr);
  return value;
}
inline bool Stop::has_stop_code() const { return _internal_has_stop_code(); }
inline void Stop::clear_stop_code() {
  if (stop_code_ != nullptr)
    stop_code_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::transit_realtime::TranslatedString &
Stop::_internal_stop_code() const {
  const ::transit_realtime::TranslatedString *p = stop_code_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &Stop::stop_code() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.stop_code)
  return _internal_stop_code();
}
inline void Stop::unsafe_arena_set_allocated_stop_code(
    ::transit_realtime::TranslatedString *stop_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(stop_code_);
  }
  stop_code_ = stop_code;
  if (stop_code) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.stop_code)
}
inline ::transit_realtime::TranslatedString *Stop::release_stop_code() {
  auto temp = unsafe_arena_release_stop_code();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::unsafe_arena_release_stop_code() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.stop_code)
  _has_bits_[0] &= ~0x00000020u;
  ::transit_realtime::TranslatedString *temp = stop_code_;
  stop_code_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::_internal_mutable_stop_code() {
  _has_bits_[0] |= 0x00000020u;
  if (stop_code_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    stop_code_ = p;
  }
  return stop_code_;
}
inline ::transit_realtime::TranslatedString *Stop::mutable_stop_code() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.stop_code)
  return _internal_mutable_stop_code();
}
inline void
Stop::set_allocated_stop_code(::transit_realtime::TranslatedString *stop_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_code_;
  }
  if (stop_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_code);
    if (message_arena != submessage_arena) {
      stop_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  stop_code_ = stop_code;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.stop_code)
}

// optional .transit_realtime.TranslatedString stop_name = 3;
inline bool Stop::_internal_has_stop_name() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || stop_name_ != nullptr);
  return value;
}
inline bool Stop::has_stop_name() const { return _internal_has_stop_name(); }
inline void Stop::clear_stop_name() {
  if (stop_name_ != nullptr)
    stop_name_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::transit_realtime::TranslatedString &
Stop::_internal_stop_name() const {
  const ::transit_realtime::TranslatedString *p = stop_name_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &Stop::stop_name() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.stop_name)
  return _internal_stop_name();
}
inline void Stop::unsafe_arena_set_allocated_stop_name(
    ::transit_realtime::TranslatedString *stop_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(stop_name_);
  }
  stop_name_ = stop_name;
  if (stop_name) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.stop_name)
}
inline ::transit_realtime::TranslatedString *Stop::release_stop_name() {
  auto temp = unsafe_arena_release_stop_name();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::unsafe_arena_release_stop_name() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.stop_name)
  _has_bits_[0] &= ~0x00000040u;
  ::transit_realtime::TranslatedString *temp = stop_name_;
  stop_name_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::_internal_mutable_stop_name() {
  _has_bits_[0] |= 0x00000040u;
  if (stop_name_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    stop_name_ = p;
  }
  return stop_name_;
}
inline ::transit_realtime::TranslatedString *Stop::mutable_stop_name() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.stop_name)
  return _internal_mutable_stop_name();
}
inline void
Stop::set_allocated_stop_name(::transit_realtime::TranslatedString *stop_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_name_;
  }
  if (stop_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_name);
    if (message_arena != submessage_arena) {
      stop_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  stop_name_ = stop_name;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.stop_name)
}

// optional .transit_realtime.TranslatedString tts_stop_name = 4;
inline bool Stop::_internal_has_tts_stop_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || tts_stop_name_ != nullptr);
  return value;
}
inline bool Stop::has_tts_stop_name() const {
  return _internal_has_tts_stop_name();
}
inline void Stop::clear_tts_stop_name() {
  if (tts_stop_name_ != nullptr)
    tts_stop_name_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::transit_realtime::TranslatedString &
Stop::_internal_tts_stop_name() const {
  const ::transit_realtime::TranslatedString *p = tts_stop_name_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &Stop::tts_stop_name() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.tts_stop_name)
  return _internal_tts_stop_name();
}
inline void Stop::unsafe_arena_set_allocated_tts_stop_name(
    ::transit_realtime::TranslatedString *tts_stop_name) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        tts_stop_name_);
  }
  tts_stop_name_ = tts_stop_name;
  if (tts_stop_name) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.tts_stop_name)
}
inline ::transit_realtime::TranslatedString *Stop::release_tts_stop_name() {
  auto temp = unsafe_arena_release_tts_stop_name();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::unsafe_arena_release_tts_stop_name() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.tts_stop_name)
  _has_bits_[0] &= ~0x00000080u;
  ::transit_realtime::TranslatedString *temp = tts_stop_name_;
  tts_stop_name_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::_internal_mutable_tts_stop_name() {
  _has_bits_[0] |= 0x00000080u;
  if (tts_stop_name_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    tts_stop_name_ = p;
  }
  return tts_stop_name_;
}
inline ::transit_realtime::TranslatedString *Stop::mutable_tts_stop_name() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.tts_stop_name)
  return _internal_mutable_tts_stop_name();
}
inline void Stop::set_allocated_tts_stop_name(
    ::transit_realtime::TranslatedString *tts_stop_name) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tts_stop_name_;
  }
  if (tts_stop_name) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tts_stop_name);
    if (message_arena != submessage_arena) {
      tts_stop_name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tts_stop_name, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  tts_stop_name_ = tts_stop_name;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.tts_stop_name)
}

// optional .transit_realtime.TranslatedString stop_desc = 5;
inline bool Stop::_internal_has_stop_desc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || stop_desc_ != nullptr);
  return value;
}
inline bool Stop::has_stop_desc() const { return _internal_has_stop_desc(); }
inline void Stop::clear_stop_desc() {
  if (stop_desc_ != nullptr)
    stop_desc_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::transit_realtime::TranslatedString &
Stop::_internal_stop_desc() const {
  const ::transit_realtime::TranslatedString *p = stop_desc_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &Stop::stop_desc() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.stop_desc)
  return _internal_stop_desc();
}
inline void Stop::unsafe_arena_set_allocated_stop_desc(
    ::transit_realtime::TranslatedString *stop_desc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(stop_desc_);
  }
  stop_desc_ = stop_desc;
  if (stop_desc) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.stop_desc)
}
inline ::transit_realtime::TranslatedString *Stop::release_stop_desc() {
  auto temp = unsafe_arena_release_stop_desc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::unsafe_arena_release_stop_desc() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.stop_desc)
  _has_bits_[0] &= ~0x00000100u;
  ::transit_realtime::TranslatedString *temp = stop_desc_;
  stop_desc_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::_internal_mutable_stop_desc() {
  _has_bits_[0] |= 0x00000100u;
  if (stop_desc_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    stop_desc_ = p;
  }
  return stop_desc_;
}
inline ::transit_realtime::TranslatedString *Stop::mutable_stop_desc() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.stop_desc)
  return _internal_mutable_stop_desc();
}
inline void
Stop::set_allocated_stop_desc(::transit_realtime::TranslatedString *stop_desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_desc_;
  }
  if (stop_desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_desc);
    if (message_arena != submessage_arena) {
      stop_desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_desc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  stop_desc_ = stop_desc;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.stop_desc)
}

// optional float stop_lat = 6;
inline bool Stop::_internal_has_stop_lat() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Stop::has_stop_lat() const { return _internal_has_stop_lat(); }
inline void Stop::clear_stop_lat() {
  stop_lat_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float Stop::_internal_stop_lat() const { return stop_lat_; }
inline float Stop::stop_lat() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.stop_lat)
  return _internal_stop_lat();
}
inline void Stop::_internal_set_stop_lat(float value) {
  _has_bits_[0] |= 0x00000800u;
  stop_lat_ = value;
}
inline void Stop::set_stop_lat(float value) {
  _internal_set_stop_lat(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Stop.stop_lat)
}

// optional float stop_lon = 7;
inline bool Stop::_internal_has_stop_lon() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Stop::has_stop_lon() const { return _internal_has_stop_lon(); }
inline void Stop::clear_stop_lon() {
  stop_lon_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float Stop::_internal_stop_lon() const { return stop_lon_; }
inline float Stop::stop_lon() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.stop_lon)
  return _internal_stop_lon();
}
inline void Stop::_internal_set_stop_lon(float value) {
  _has_bits_[0] |= 0x00001000u;
  stop_lon_ = value;
}
inline void Stop::set_stop_lon(float value) {
  _internal_set_stop_lon(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Stop.stop_lon)
}

// optional string zone_id = 8;
inline bool Stop::_internal_has_zone_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Stop::has_zone_id() const { return _internal_has_zone_id(); }
inline void Stop::clear_zone_id() {
  zone_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string &Stop::zone_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.zone_id)
  return _internal_zone_id();
}
inline void Stop::set_zone_id(const std::string &value) {
  _internal_set_zone_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Stop.zone_id)
}
inline std::string *Stop::mutable_zone_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.zone_id)
  return _internal_mutable_zone_id();
}
inline const std::string &Stop::_internal_zone_id() const {
  return zone_id_.Get();
}
inline void Stop::_internal_set_zone_id(const std::string &value) {
  _has_bits_[0] |= 0x00000002u;
  zone_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void Stop::set_zone_id(std::string &&value) {
  _has_bits_[0] |= 0x00000002u;
  zone_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.Stop.zone_id)
}
inline void Stop::set_zone_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  zone_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.Stop.zone_id)
}
inline void Stop::set_zone_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  zone_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.Stop.zone_id)
}
inline std::string *Stop::_internal_mutable_zone_id() {
  _has_bits_[0] |= 0x00000002u;
  return zone_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *Stop::release_zone_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.zone_id)
  if (!_internal_has_zone_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return zone_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stop::set_allocated_zone_id(std::string *zone_id) {
  if (zone_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  zone_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      zone_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.zone_id)
}
inline std::string *Stop::unsafe_arena_release_zone_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.Stop.zone_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return zone_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stop::unsafe_arena_set_allocated_zone_id(std::string *zone_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (zone_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  zone_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      zone_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.zone_id)
}

// optional .transit_realtime.TranslatedString stop_url = 9;
inline bool Stop::_internal_has_stop_url() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || stop_url_ != nullptr);
  return value;
}
inline bool Stop::has_stop_url() const { return _internal_has_stop_url(); }
inline void Stop::clear_stop_url() {
  if (stop_url_ != nullptr)
    stop_url_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::transit_realtime::TranslatedString &
Stop::_internal_stop_url() const {
  const ::transit_realtime::TranslatedString *p = stop_url_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &Stop::stop_url() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.stop_url)
  return _internal_stop_url();
}
inline void Stop::unsafe_arena_set_allocated_stop_url(
    ::transit_realtime::TranslatedString *stop_url) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(stop_url_);
  }
  stop_url_ = stop_url;
  if (stop_url) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.stop_url)
}
inline ::transit_realtime::TranslatedString *Stop::release_stop_url() {
  auto temp = unsafe_arena_release_stop_url();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::unsafe_arena_release_stop_url() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.stop_url)
  _has_bits_[0] &= ~0x00000200u;
  ::transit_realtime::TranslatedString *temp = stop_url_;
  stop_url_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::_internal_mutable_stop_url() {
  _has_bits_[0] |= 0x00000200u;
  if (stop_url_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    stop_url_ = p;
  }
  return stop_url_;
}
inline ::transit_realtime::TranslatedString *Stop::mutable_stop_url() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.stop_url)
  return _internal_mutable_stop_url();
}
inline void
Stop::set_allocated_stop_url(::transit_realtime::TranslatedString *stop_url) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_url_;
  }
  if (stop_url) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_url);
    if (message_arena != submessage_arena) {
      stop_url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_url, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  stop_url_ = stop_url;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.stop_url)
}

// optional string parent_station = 11;
inline bool Stop::_internal_has_parent_station() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Stop::has_parent_station() const {
  return _internal_has_parent_station();
}
inline void Stop::clear_parent_station() {
  parent_station_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string &Stop::parent_station() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.parent_station)
  return _internal_parent_station();
}
inline void Stop::set_parent_station(const std::string &value) {
  _internal_set_parent_station(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Stop.parent_station)
}
inline std::string *Stop::mutable_parent_station() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.parent_station)
  return _internal_mutable_parent_station();
}
inline const std::string &Stop::_internal_parent_station() const {
  return parent_station_.Get();
}
inline void Stop::_internal_set_parent_station(const std::string &value) {
  _has_bits_[0] |= 0x00000004u;
  parent_station_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void Stop::set_parent_station(std::string &&value) {
  _has_bits_[0] |= 0x00000004u;
  parent_station_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.Stop.parent_station)
}
inline void Stop::set_parent_station(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  parent_station_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.Stop.parent_station)
}
inline void Stop::set_parent_station(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  parent_station_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.Stop.parent_station)
}
inline std::string *Stop::_internal_mutable_parent_station() {
  _has_bits_[0] |= 0x00000004u;
  return parent_station_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *Stop::release_parent_station() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.parent_station)
  if (!_internal_has_parent_station()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return parent_station_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stop::set_allocated_parent_station(std::string *parent_station) {
  if (parent_station != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parent_station_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent_station, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.parent_station)
}
inline std::string *Stop::unsafe_arena_release_parent_station() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.Stop.parent_station)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return parent_station_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
Stop::unsafe_arena_set_allocated_parent_station(std::string *parent_station) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (parent_station != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  parent_station_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent_station, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.parent_station)
}

// optional string stop_timezone = 12;
inline bool Stop::_internal_has_stop_timezone() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Stop::has_stop_timezone() const {
  return _internal_has_stop_timezone();
}
inline void Stop::clear_stop_timezone() {
  stop_timezone_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string &Stop::stop_timezone() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.stop_timezone)
  return _internal_stop_timezone();
}
inline void Stop::set_stop_timezone(const std::string &value) {
  _internal_set_stop_timezone(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Stop.stop_timezone)
}
inline std::string *Stop::mutable_stop_timezone() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.stop_timezone)
  return _internal_mutable_stop_timezone();
}
inline const std::string &Stop::_internal_stop_timezone() const {
  return stop_timezone_.Get();
}
inline void Stop::_internal_set_stop_timezone(const std::string &value) {
  _has_bits_[0] |= 0x00000008u;
  stop_timezone_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void Stop::set_stop_timezone(std::string &&value) {
  _has_bits_[0] |= 0x00000008u;
  stop_timezone_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.Stop.stop_timezone)
}
inline void Stop::set_stop_timezone(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  stop_timezone_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.Stop.stop_timezone)
}
inline void Stop::set_stop_timezone(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000008u;
  stop_timezone_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.Stop.stop_timezone)
}
inline std::string *Stop::_internal_mutable_stop_timezone() {
  _has_bits_[0] |= 0x00000008u;
  return stop_timezone_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *Stop::release_stop_timezone() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.stop_timezone)
  if (!_internal_has_stop_timezone()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return stop_timezone_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stop::set_allocated_stop_timezone(std::string *stop_timezone) {
  if (stop_timezone != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stop_timezone_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_timezone, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.stop_timezone)
}
inline std::string *Stop::unsafe_arena_release_stop_timezone() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.Stop.stop_timezone)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return stop_timezone_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
Stop::unsafe_arena_set_allocated_stop_timezone(std::string *stop_timezone) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stop_timezone != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stop_timezone_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_timezone, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.stop_timezone)
}

// optional .transit_realtime.Stop.WheelchairBoarding wheelchair_boarding = 13
// [default = UNKNOWN];
inline bool Stop::_internal_has_wheelchair_boarding() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Stop::has_wheelchair_boarding() const {
  return _internal_has_wheelchair_boarding();
}
inline void Stop::clear_wheelchair_boarding() {
  wheelchair_boarding_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::transit_realtime::Stop_WheelchairBoarding
Stop::_internal_wheelchair_boarding() const {
  return static_cast<::transit_realtime::Stop_WheelchairBoarding>(
      wheelchair_boarding_);
}
inline ::transit_realtime::Stop_WheelchairBoarding
Stop::wheelchair_boarding() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.wheelchair_boarding)
  return _internal_wheelchair_boarding();
}
inline void Stop::_internal_set_wheelchair_boarding(
    ::transit_realtime::Stop_WheelchairBoarding value) {
  assert(::transit_realtime::Stop_WheelchairBoarding_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  wheelchair_boarding_ = value;
}
inline void Stop::set_wheelchair_boarding(
    ::transit_realtime::Stop_WheelchairBoarding value) {
  _internal_set_wheelchair_boarding(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Stop.wheelchair_boarding)
}

// optional string level_id = 14;
inline bool Stop::_internal_has_level_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Stop::has_level_id() const { return _internal_has_level_id(); }
inline void Stop::clear_level_id() {
  level_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string &Stop::level_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.level_id)
  return _internal_level_id();
}
inline void Stop::set_level_id(const std::string &value) {
  _internal_set_level_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Stop.level_id)
}
inline std::string *Stop::mutable_level_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.level_id)
  return _internal_mutable_level_id();
}
inline const std::string &Stop::_internal_level_id() const {
  return level_id_.Get();
}
inline void Stop::_internal_set_level_id(const std::string &value) {
  _has_bits_[0] |= 0x00000010u;
  level_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void Stop::set_level_id(std::string &&value) {
  _has_bits_[0] |= 0x00000010u;
  level_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.Stop.level_id)
}
inline void Stop::set_level_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  level_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.Stop.level_id)
}
inline void Stop::set_level_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000010u;
  level_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.Stop.level_id)
}
inline std::string *Stop::_internal_mutable_level_id() {
  _has_bits_[0] |= 0x00000010u;
  return level_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *Stop::release_level_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.level_id)
  if (!_internal_has_level_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return level_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stop::set_allocated_level_id(std::string *level_id) {
  if (level_id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  level_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      level_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.level_id)
}
inline std::string *Stop::unsafe_arena_release_level_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.Stop.level_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return level_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Stop::unsafe_arena_set_allocated_level_id(std::string *level_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (level_id != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  level_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      level_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.level_id)
}

// optional .transit_realtime.TranslatedString platform_code = 15;
inline bool Stop::_internal_has_platform_code() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || platform_code_ != nullptr);
  return value;
}
inline bool Stop::has_platform_code() const {
  return _internal_has_platform_code();
}
inline void Stop::clear_platform_code() {
  if (platform_code_ != nullptr)
    platform_code_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::transit_realtime::TranslatedString &
Stop::_internal_platform_code() const {
  const ::transit_realtime::TranslatedString *p = platform_code_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::TranslatedString *>(
                   &::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString &Stop::platform_code() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Stop.platform_code)
  return _internal_platform_code();
}
inline void Stop::unsafe_arena_set_allocated_platform_code(
    ::transit_realtime::TranslatedString *platform_code) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        platform_code_);
  }
  platform_code_ = platform_code;
  if (platform_code) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Stop.platform_code)
}
inline ::transit_realtime::TranslatedString *Stop::release_platform_code() {
  auto temp = unsafe_arena_release_platform_code();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::unsafe_arena_release_platform_code() {
  // @@protoc_insertion_point(field_release:transit_realtime.Stop.platform_code)
  _has_bits_[0] &= ~0x00000400u;
  ::transit_realtime::TranslatedString *temp = platform_code_;
  platform_code_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString *
Stop::_internal_mutable_platform_code() {
  _has_bits_[0] |= 0x00000400u;
  if (platform_code_ == nullptr) {
    auto *p =
        CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    platform_code_ = p;
  }
  return platform_code_;
}
inline ::transit_realtime::TranslatedString *Stop::mutable_platform_code() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Stop.platform_code)
  return _internal_mutable_platform_code();
}
inline void Stop::set_allocated_platform_code(
    ::transit_realtime::TranslatedString *platform_code) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete platform_code_;
  }
  if (platform_code) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(platform_code);
    if (message_arena != submessage_arena) {
      platform_code = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, platform_code, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  platform_code_ = platform_code;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Stop.platform_code)
}

// -------------------------------------------------------------------

// TripModifications_Modification

// optional .transit_realtime.StopSelector start_stop_selector = 1;
inline bool
TripModifications_Modification::_internal_has_start_stop_selector() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || start_stop_selector_ != nullptr);
  return value;
}
inline bool TripModifications_Modification::has_start_stop_selector() const {
  return _internal_has_start_stop_selector();
}
inline void TripModifications_Modification::clear_start_stop_selector() {
  if (start_stop_selector_ != nullptr)
    start_stop_selector_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::StopSelector &
TripModifications_Modification::_internal_start_stop_selector() const {
  const ::transit_realtime::StopSelector *p = start_stop_selector_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::StopSelector *>(
                   &::transit_realtime::_StopSelector_default_instance_);
}
inline const ::transit_realtime::StopSelector &
TripModifications_Modification::start_stop_selector() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.Modification.start_stop_selector)
  return _internal_start_stop_selector();
}
inline void
TripModifications_Modification::unsafe_arena_set_allocated_start_stop_selector(
    ::transit_realtime::StopSelector *start_stop_selector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        start_stop_selector_);
  }
  start_stop_selector_ = start_stop_selector;
  if (start_stop_selector) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripModifications.Modification.start_stop_selector)
}
inline ::transit_realtime::StopSelector *
TripModifications_Modification::release_start_stop_selector() {
  auto temp = unsafe_arena_release_start_stop_selector();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::StopSelector *
TripModifications_Modification::unsafe_arena_release_start_stop_selector() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripModifications.Modification.start_stop_selector)
  _has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::StopSelector *temp = start_stop_selector_;
  start_stop_selector_ = nullptr;
  return temp;
}
inline ::transit_realtime::StopSelector *
TripModifications_Modification::_internal_mutable_start_stop_selector() {
  _has_bits_[0] |= 0x00000002u;
  if (start_stop_selector_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::StopSelector>(GetArena());
    start_stop_selector_ = p;
  }
  return start_stop_selector_;
}
inline ::transit_realtime::StopSelector *
TripModifications_Modification::mutable_start_stop_selector() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.Modification.start_stop_selector)
  return _internal_mutable_start_stop_selector();
}
inline void TripModifications_Modification::set_allocated_start_stop_selector(
    ::transit_realtime::StopSelector *start_stop_selector) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_stop_selector_;
  }
  if (start_stop_selector) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_stop_selector);
    if (message_arena != submessage_arena) {
      start_stop_selector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_stop_selector, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  start_stop_selector_ = start_stop_selector;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripModifications.Modification.start_stop_selector)
}

// optional .transit_realtime.StopSelector end_stop_selector = 2;
inline bool
TripModifications_Modification::_internal_has_end_stop_selector() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || end_stop_selector_ != nullptr);
  return value;
}
inline bool TripModifications_Modification::has_end_stop_selector() const {
  return _internal_has_end_stop_selector();
}
inline void TripModifications_Modification::clear_end_stop_selector() {
  if (end_stop_selector_ != nullptr)
    end_stop_selector_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::transit_realtime::StopSelector &
TripModifications_Modification::_internal_end_stop_selector() const {
  const ::transit_realtime::StopSelector *p = end_stop_selector_;
  return p != nullptr
             ? *p
             : *reinterpret_cast<const ::transit_realtime::StopSelector *>(
                   &::transit_realtime::_StopSelector_default_instance_);
}
inline const ::transit_realtime::StopSelector &
TripModifications_Modification::end_stop_selector() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.Modification.end_stop_selector)
  return _internal_end_stop_selector();
}
inline void
TripModifications_Modification::unsafe_arena_set_allocated_end_stop_selector(
    ::transit_realtime::StopSelector *end_stop_selector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite *>(
        end_stop_selector_);
  }
  end_stop_selector_ = end_stop_selector;
  if (end_stop_selector) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripModifications.Modification.end_stop_selector)
}
inline ::transit_realtime::StopSelector *
TripModifications_Modification::release_end_stop_selector() {
  auto temp = unsafe_arena_release_end_stop_selector();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transit_realtime::StopSelector *
TripModifications_Modification::unsafe_arena_release_end_stop_selector() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripModifications.Modification.end_stop_selector)
  _has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::StopSelector *temp = end_stop_selector_;
  end_stop_selector_ = nullptr;
  return temp;
}
inline ::transit_realtime::StopSelector *
TripModifications_Modification::_internal_mutable_end_stop_selector() {
  _has_bits_[0] |= 0x00000004u;
  if (end_stop_selector_ == nullptr) {
    auto *p = CreateMaybeMessage<::transit_realtime::StopSelector>(GetArena());
    end_stop_selector_ = p;
  }
  return end_stop_selector_;
}
inline ::transit_realtime::StopSelector *
TripModifications_Modification::mutable_end_stop_selector() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.Modification.end_stop_selector)
  return _internal_mutable_end_stop_selector();
}
inline void TripModifications_Modification::set_allocated_end_stop_selector(
    ::transit_realtime::StopSelector *end_stop_selector) {
  ::PROTOBUF_NAMESPACE_ID::Arena *message_arena = GetArena();
  if (message_arena == nullptr) {
    delete end_stop_selector_;
  }
  if (end_stop_selector) {
    ::PROTOBUF_NAMESPACE_ID::Arena *submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(end_stop_selector);
    if (message_arena != submessage_arena) {
      end_stop_selector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_stop_selector, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  end_stop_selector_ = end_stop_selector;
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripModifications.Modification.end_stop_selector)
}

// optional int32 propagated_modification_delay = 3 [default = 0];
inline bool
TripModifications_Modification::_internal_has_propagated_modification_delay()
    const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool
TripModifications_Modification::has_propagated_modification_delay() const {
  return _internal_has_propagated_modification_delay();
}
inline void
TripModifications_Modification::clear_propagated_modification_delay() {
  propagated_modification_delay_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
TripModifications_Modification::_internal_propagated_modification_delay()
    const {
  return propagated_modification_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
TripModifications_Modification::propagated_modification_delay() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.Modification.propagated_modification_delay)
  return _internal_propagated_modification_delay();
}
inline void
TripModifications_Modification::_internal_set_propagated_modification_delay(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  propagated_modification_delay_ = value;
}
inline void TripModifications_Modification::set_propagated_modification_delay(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_propagated_modification_delay(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.Modification.propagated_modification_delay)
}

// repeated .transit_realtime.ReplacementStop replacement_stops = 4;
inline int
TripModifications_Modification::_internal_replacement_stops_size() const {
  return replacement_stops_.size();
}
inline int TripModifications_Modification::replacement_stops_size() const {
  return _internal_replacement_stops_size();
}
inline void TripModifications_Modification::clear_replacement_stops() {
  replacement_stops_.Clear();
}
inline ::transit_realtime::ReplacementStop *
TripModifications_Modification::mutable_replacement_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.Modification.replacement_stops)
  return replacement_stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::ReplacementStop> *
TripModifications_Modification::mutable_replacement_stops() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TripModifications.Modification.replacement_stops)
  return &replacement_stops_;
}
inline const ::transit_realtime::ReplacementStop &
TripModifications_Modification::_internal_replacement_stops(int index) const {
  return replacement_stops_.Get(index);
}
inline const ::transit_realtime::ReplacementStop &
TripModifications_Modification::replacement_stops(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.Modification.replacement_stops)
  return _internal_replacement_stops(index);
}
inline ::transit_realtime::ReplacementStop *
TripModifications_Modification::_internal_add_replacement_stops() {
  return replacement_stops_.Add();
}
inline ::transit_realtime::ReplacementStop *
TripModifications_Modification::add_replacement_stops() {
  // @@protoc_insertion_point(field_add:transit_realtime.TripModifications.Modification.replacement_stops)
  return _internal_add_replacement_stops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::ReplacementStop> &
TripModifications_Modification::replacement_stops() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TripModifications.Modification.replacement_stops)
  return replacement_stops_;
}

// optional string service_alert_id = 5;
inline bool
TripModifications_Modification::_internal_has_service_alert_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TripModifications_Modification::has_service_alert_id() const {
  return _internal_has_service_alert_id();
}
inline void TripModifications_Modification::clear_service_alert_id() {
  service_alert_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &
TripModifications_Modification::service_alert_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.Modification.service_alert_id)
  return _internal_service_alert_id();
}
inline void
TripModifications_Modification::set_service_alert_id(const std::string &value) {
  _internal_set_service_alert_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.Modification.service_alert_id)
}
inline std::string *TripModifications_Modification::mutable_service_alert_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.Modification.service_alert_id)
  return _internal_mutable_service_alert_id();
}
inline const std::string &
TripModifications_Modification::_internal_service_alert_id() const {
  return service_alert_id_.Get();
}
inline void TripModifications_Modification::_internal_set_service_alert_id(
    const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  service_alert_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void
TripModifications_Modification::set_service_alert_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  service_alert_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripModifications.Modification.service_alert_id)
}
inline void
TripModifications_Modification::set_service_alert_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  service_alert_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripModifications.Modification.service_alert_id)
}
inline void
TripModifications_Modification::set_service_alert_id(const char *value,
                                                     size_t size) {
  _has_bits_[0] |= 0x00000001u;
  service_alert_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripModifications.Modification.service_alert_id)
}
inline std::string *
TripModifications_Modification::_internal_mutable_service_alert_id() {
  _has_bits_[0] |= 0x00000001u;
  return service_alert_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripModifications_Modification::release_service_alert_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripModifications.Modification.service_alert_id)
  if (!_internal_has_service_alert_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return service_alert_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TripModifications_Modification::set_allocated_service_alert_id(
    std::string *service_alert_id) {
  if (service_alert_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_alert_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_alert_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripModifications.Modification.service_alert_id)
}
inline std::string *
TripModifications_Modification::unsafe_arena_release_service_alert_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripModifications.Modification.service_alert_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return service_alert_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripModifications_Modification::unsafe_arena_set_allocated_service_alert_id(
    std::string *service_alert_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (service_alert_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  service_alert_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_alert_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripModifications.Modification.service_alert_id)
}

// optional uint64 last_modified_time = 6;
inline bool
TripModifications_Modification::_internal_has_last_modified_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TripModifications_Modification::has_last_modified_time() const {
  return _internal_has_last_modified_time();
}
inline void TripModifications_Modification::clear_last_modified_time() {
  last_modified_time_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
TripModifications_Modification::_internal_last_modified_time() const {
  return last_modified_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64
TripModifications_Modification::last_modified_time() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.Modification.last_modified_time)
  return _internal_last_modified_time();
}
inline void TripModifications_Modification::_internal_set_last_modified_time(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  last_modified_time_ = value;
}
inline void TripModifications_Modification::set_last_modified_time(
    ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_modified_time(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.Modification.last_modified_time)
}

// -------------------------------------------------------------------

// TripModifications_SelectedTrips

// repeated string trip_ids = 1;
inline int TripModifications_SelectedTrips::_internal_trip_ids_size() const {
  return trip_ids_.size();
}
inline int TripModifications_SelectedTrips::trip_ids_size() const {
  return _internal_trip_ids_size();
}
inline void TripModifications_SelectedTrips::clear_trip_ids() {
  trip_ids_.Clear();
}
inline std::string *TripModifications_SelectedTrips::add_trip_ids() {
  // @@protoc_insertion_point(field_add_mutable:transit_realtime.TripModifications.SelectedTrips.trip_ids)
  return _internal_add_trip_ids();
}
inline const std::string &
TripModifications_SelectedTrips::_internal_trip_ids(int index) const {
  return trip_ids_.Get(index);
}
inline const std::string &
TripModifications_SelectedTrips::trip_ids(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.SelectedTrips.trip_ids)
  return _internal_trip_ids(index);
}
inline std::string *
TripModifications_SelectedTrips::mutable_trip_ids(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.SelectedTrips.trip_ids)
  return trip_ids_.Mutable(index);
}
inline void
TripModifications_SelectedTrips::set_trip_ids(int index,
                                              const std::string &value) {
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.SelectedTrips.trip_ids)
  trip_ids_.Mutable(index)->assign(value);
}
inline void TripModifications_SelectedTrips::set_trip_ids(int index,
                                                          std::string &&value) {
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.SelectedTrips.trip_ids)
  trip_ids_.Mutable(index)->assign(std::move(value));
}
inline void TripModifications_SelectedTrips::set_trip_ids(int index,
                                                          const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  trip_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripModifications.SelectedTrips.trip_ids)
}
inline void TripModifications_SelectedTrips::set_trip_ids(int index,
                                                          const char *value,
                                                          size_t size) {
  trip_ids_.Mutable(index)->assign(reinterpret_cast<const char *>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripModifications.SelectedTrips.trip_ids)
}
inline std::string *TripModifications_SelectedTrips::_internal_add_trip_ids() {
  return trip_ids_.Add();
}
inline void
TripModifications_SelectedTrips::add_trip_ids(const std::string &value) {
  trip_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transit_realtime.TripModifications.SelectedTrips.trip_ids)
}
inline void TripModifications_SelectedTrips::add_trip_ids(std::string &&value) {
  trip_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transit_realtime.TripModifications.SelectedTrips.trip_ids)
}
inline void TripModifications_SelectedTrips::add_trip_ids(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  trip_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transit_realtime.TripModifications.SelectedTrips.trip_ids)
}
inline void TripModifications_SelectedTrips::add_trip_ids(const char *value,
                                                          size_t size) {
  trip_ids_.Add()->assign(reinterpret_cast<const char *>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transit_realtime.TripModifications.SelectedTrips.trip_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &
TripModifications_SelectedTrips::trip_ids() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TripModifications.SelectedTrips.trip_ids)
  return trip_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *
TripModifications_SelectedTrips::mutable_trip_ids() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TripModifications.SelectedTrips.trip_ids)
  return &trip_ids_;
}

// optional string shape_id = 2;
inline bool TripModifications_SelectedTrips::_internal_has_shape_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TripModifications_SelectedTrips::has_shape_id() const {
  return _internal_has_shape_id();
}
inline void TripModifications_SelectedTrips::clear_shape_id() {
  shape_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &TripModifications_SelectedTrips::shape_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.SelectedTrips.shape_id)
  return _internal_shape_id();
}
inline void
TripModifications_SelectedTrips::set_shape_id(const std::string &value) {
  _internal_set_shape_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.SelectedTrips.shape_id)
}
inline std::string *TripModifications_SelectedTrips::mutable_shape_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.SelectedTrips.shape_id)
  return _internal_mutable_shape_id();
}
inline const std::string &
TripModifications_SelectedTrips::_internal_shape_id() const {
  return shape_id_.Get();
}
inline void TripModifications_SelectedTrips::_internal_set_shape_id(
    const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void TripModifications_SelectedTrips::set_shape_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.TripModifications.SelectedTrips.shape_id)
}
inline void TripModifications_SelectedTrips::set_shape_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripModifications.SelectedTrips.shape_id)
}
inline void TripModifications_SelectedTrips::set_shape_id(const char *value,
                                                          size_t size) {
  _has_bits_[0] |= 0x00000001u;
  shape_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripModifications.SelectedTrips.shape_id)
}
inline std::string *
TripModifications_SelectedTrips::_internal_mutable_shape_id() {
  _has_bits_[0] |= 0x00000001u;
  return shape_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *TripModifications_SelectedTrips::release_shape_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.TripModifications.SelectedTrips.shape_id)
  if (!_internal_has_shape_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return shape_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripModifications_SelectedTrips::set_allocated_shape_id(std::string *shape_id) {
  if (shape_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shape_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripModifications.SelectedTrips.shape_id)
}
inline std::string *
TripModifications_SelectedTrips::unsafe_arena_release_shape_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.TripModifications.SelectedTrips.shape_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return shape_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
TripModifications_SelectedTrips::unsafe_arena_set_allocated_shape_id(
    std::string *shape_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shape_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  shape_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shape_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripModifications.SelectedTrips.shape_id)
}

// -------------------------------------------------------------------

// TripModifications

// repeated .transit_realtime.TripModifications.SelectedTrips selected_trips =
// 1;
inline int TripModifications::_internal_selected_trips_size() const {
  return selected_trips_.size();
}
inline int TripModifications::selected_trips_size() const {
  return _internal_selected_trips_size();
}
inline void TripModifications::clear_selected_trips() {
  selected_trips_.Clear();
}
inline ::transit_realtime::TripModifications_SelectedTrips *
TripModifications::mutable_selected_trips(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.selected_trips)
  return selected_trips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TripModifications_SelectedTrips> *
TripModifications::mutable_selected_trips() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TripModifications.selected_trips)
  return &selected_trips_;
}
inline const ::transit_realtime::TripModifications_SelectedTrips &
TripModifications::_internal_selected_trips(int index) const {
  return selected_trips_.Get(index);
}
inline const ::transit_realtime::TripModifications_SelectedTrips &
TripModifications::selected_trips(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.selected_trips)
  return _internal_selected_trips(index);
}
inline ::transit_realtime::TripModifications_SelectedTrips *
TripModifications::_internal_add_selected_trips() {
  return selected_trips_.Add();
}
inline ::transit_realtime::TripModifications_SelectedTrips *
TripModifications::add_selected_trips() {
  // @@protoc_insertion_point(field_add:transit_realtime.TripModifications.selected_trips)
  return _internal_add_selected_trips();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TripModifications_SelectedTrips> &
TripModifications::selected_trips() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TripModifications.selected_trips)
  return selected_trips_;
}

// repeated string start_times = 2;
inline int TripModifications::_internal_start_times_size() const {
  return start_times_.size();
}
inline int TripModifications::start_times_size() const {
  return _internal_start_times_size();
}
inline void TripModifications::clear_start_times() { start_times_.Clear(); }
inline std::string *TripModifications::add_start_times() {
  // @@protoc_insertion_point(field_add_mutable:transit_realtime.TripModifications.start_times)
  return _internal_add_start_times();
}
inline const std::string &
TripModifications::_internal_start_times(int index) const {
  return start_times_.Get(index);
}
inline const std::string &TripModifications::start_times(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.start_times)
  return _internal_start_times(index);
}
inline std::string *TripModifications::mutable_start_times(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.start_times)
  return start_times_.Mutable(index);
}
inline void TripModifications::set_start_times(int index,
                                               const std::string &value) {
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.start_times)
  start_times_.Mutable(index)->assign(value);
}
inline void TripModifications::set_start_times(int index, std::string &&value) {
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.start_times)
  start_times_.Mutable(index)->assign(std::move(value));
}
inline void TripModifications::set_start_times(int index, const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  start_times_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripModifications.start_times)
}
inline void TripModifications::set_start_times(int index, const char *value,
                                               size_t size) {
  start_times_.Mutable(index)->assign(reinterpret_cast<const char *>(value),
                                      size);
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripModifications.start_times)
}
inline std::string *TripModifications::_internal_add_start_times() {
  return start_times_.Add();
}
inline void TripModifications::add_start_times(const std::string &value) {
  start_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transit_realtime.TripModifications.start_times)
}
inline void TripModifications::add_start_times(std::string &&value) {
  start_times_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transit_realtime.TripModifications.start_times)
}
inline void TripModifications::add_start_times(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  start_times_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transit_realtime.TripModifications.start_times)
}
inline void TripModifications::add_start_times(const char *value, size_t size) {
  start_times_.Add()->assign(reinterpret_cast<const char *>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transit_realtime.TripModifications.start_times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &
TripModifications::start_times() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TripModifications.start_times)
  return start_times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *
TripModifications::mutable_start_times() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TripModifications.start_times)
  return &start_times_;
}

// repeated string service_dates = 3;
inline int TripModifications::_internal_service_dates_size() const {
  return service_dates_.size();
}
inline int TripModifications::service_dates_size() const {
  return _internal_service_dates_size();
}
inline void TripModifications::clear_service_dates() { service_dates_.Clear(); }
inline std::string *TripModifications::add_service_dates() {
  // @@protoc_insertion_point(field_add_mutable:transit_realtime.TripModifications.service_dates)
  return _internal_add_service_dates();
}
inline const std::string &
TripModifications::_internal_service_dates(int index) const {
  return service_dates_.Get(index);
}
inline const std::string &TripModifications::service_dates(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.service_dates)
  return _internal_service_dates(index);
}
inline std::string *TripModifications::mutable_service_dates(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.service_dates)
  return service_dates_.Mutable(index);
}
inline void TripModifications::set_service_dates(int index,
                                                 const std::string &value) {
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.service_dates)
  service_dates_.Mutable(index)->assign(value);
}
inline void TripModifications::set_service_dates(int index,
                                                 std::string &&value) {
  // @@protoc_insertion_point(field_set:transit_realtime.TripModifications.service_dates)
  service_dates_.Mutable(index)->assign(std::move(value));
}
inline void TripModifications::set_service_dates(int index, const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  service_dates_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transit_realtime.TripModifications.service_dates)
}
inline void TripModifications::set_service_dates(int index, const char *value,
                                                 size_t size) {
  service_dates_.Mutable(index)->assign(reinterpret_cast<const char *>(value),
                                        size);
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.TripModifications.service_dates)
}
inline std::string *TripModifications::_internal_add_service_dates() {
  return service_dates_.Add();
}
inline void TripModifications::add_service_dates(const std::string &value) {
  service_dates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transit_realtime.TripModifications.service_dates)
}
inline void TripModifications::add_service_dates(std::string &&value) {
  service_dates_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transit_realtime.TripModifications.service_dates)
}
inline void TripModifications::add_service_dates(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  service_dates_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transit_realtime.TripModifications.service_dates)
}
inline void TripModifications::add_service_dates(const char *value,
                                                 size_t size) {
  service_dates_.Add()->assign(reinterpret_cast<const char *>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transit_realtime.TripModifications.service_dates)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> &
TripModifications::service_dates() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TripModifications.service_dates)
  return service_dates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> *
TripModifications::mutable_service_dates() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TripModifications.service_dates)
  return &service_dates_;
}

// repeated .transit_realtime.TripModifications.Modification modifications = 4;
inline int TripModifications::_internal_modifications_size() const {
  return modifications_.size();
}
inline int TripModifications::modifications_size() const {
  return _internal_modifications_size();
}
inline void TripModifications::clear_modifications() { modifications_.Clear(); }
inline ::transit_realtime::TripModifications_Modification *
TripModifications::mutable_modifications(int index) {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripModifications.modifications)
  return modifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TripModifications_Modification> *
TripModifications::mutable_modifications() {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TripModifications.modifications)
  return &modifications_;
}
inline const ::transit_realtime::TripModifications_Modification &
TripModifications::_internal_modifications(int index) const {
  return modifications_.Get(index);
}
inline const ::transit_realtime::TripModifications_Modification &
TripModifications::modifications(int index) const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripModifications.modifications)
  return _internal_modifications(index);
}
inline ::transit_realtime::TripModifications_Modification *
TripModifications::_internal_add_modifications() {
  return modifications_.Add();
}
inline ::transit_realtime::TripModifications_Modification *
TripModifications::add_modifications() {
  // @@protoc_insertion_point(field_add:transit_realtime.TripModifications.modifications)
  return _internal_add_modifications();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<
    ::transit_realtime::TripModifications_Modification> &
TripModifications::modifications() const {
  // @@protoc_insertion_point(field_list:transit_realtime.TripModifications.modifications)
  return modifications_;
}

// -------------------------------------------------------------------

// StopSelector

// optional uint32 stop_sequence = 1;
inline bool StopSelector::_internal_has_stop_sequence() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StopSelector::has_stop_sequence() const {
  return _internal_has_stop_sequence();
}
inline void StopSelector::clear_stop_sequence() {
  stop_sequence_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32
StopSelector::_internal_stop_sequence() const {
  return stop_sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopSelector::stop_sequence() const {
  // @@protoc_insertion_point(field_get:transit_realtime.StopSelector.stop_sequence)
  return _internal_stop_sequence();
}
inline void StopSelector::_internal_set_stop_sequence(
    ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  stop_sequence_ = value;
}
inline void
StopSelector::set_stop_sequence(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_sequence(value);
  // @@protoc_insertion_point(field_set:transit_realtime.StopSelector.stop_sequence)
}

// optional string stop_id = 2;
inline bool StopSelector::_internal_has_stop_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StopSelector::has_stop_id() const {
  return _internal_has_stop_id();
}
inline void StopSelector::clear_stop_id() {
  stop_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &StopSelector::stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.StopSelector.stop_id)
  return _internal_stop_id();
}
inline void StopSelector::set_stop_id(const std::string &value) {
  _internal_set_stop_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.StopSelector.stop_id)
}
inline std::string *StopSelector::mutable_stop_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.StopSelector.stop_id)
  return _internal_mutable_stop_id();
}
inline const std::string &StopSelector::_internal_stop_id() const {
  return stop_id_.Get();
}
inline void StopSelector::_internal_set_stop_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void StopSelector::set_stop_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.StopSelector.stop_id)
}
inline void StopSelector::set_stop_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.StopSelector.stop_id)
}
inline void StopSelector::set_stop_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.StopSelector.stop_id)
}
inline std::string *StopSelector::_internal_mutable_stop_id() {
  _has_bits_[0] |= 0x00000001u;
  return stop_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *StopSelector::release_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.StopSelector.stop_id)
  if (!_internal_has_stop_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopSelector::set_allocated_stop_id(std::string *stop_id) {
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.StopSelector.stop_id)
}
inline std::string *StopSelector::unsafe_arena_release_stop_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.StopSelector.stop_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
StopSelector::unsafe_arena_set_allocated_stop_id(std::string *stop_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.StopSelector.stop_id)
}

// -------------------------------------------------------------------

// ReplacementStop

// optional int32 travel_time_to_stop = 1;
inline bool ReplacementStop::_internal_has_travel_time_to_stop() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReplacementStop::has_travel_time_to_stop() const {
  return _internal_has_travel_time_to_stop();
}
inline void ReplacementStop::clear_travel_time_to_stop() {
  travel_time_to_stop_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
ReplacementStop::_internal_travel_time_to_stop() const {
  return travel_time_to_stop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32
ReplacementStop::travel_time_to_stop() const {
  // @@protoc_insertion_point(field_get:transit_realtime.ReplacementStop.travel_time_to_stop)
  return _internal_travel_time_to_stop();
}
inline void ReplacementStop::_internal_set_travel_time_to_stop(
    ::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  travel_time_to_stop_ = value;
}
inline void
ReplacementStop::set_travel_time_to_stop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_travel_time_to_stop(value);
  // @@protoc_insertion_point(field_set:transit_realtime.ReplacementStop.travel_time_to_stop)
}

// optional string stop_id = 2;
inline bool ReplacementStop::_internal_has_stop_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReplacementStop::has_stop_id() const {
  return _internal_has_stop_id();
}
inline void ReplacementStop::clear_stop_id() {
  stop_id_.ClearToEmpty(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string &ReplacementStop::stop_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.ReplacementStop.stop_id)
  return _internal_stop_id();
}
inline void ReplacementStop::set_stop_id(const std::string &value) {
  _internal_set_stop_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.ReplacementStop.stop_id)
}
inline std::string *ReplacementStop::mutable_stop_id() {
  // @@protoc_insertion_point(field_mutable:transit_realtime.ReplacementStop.stop_id)
  return _internal_mutable_stop_id();
}
inline const std::string &ReplacementStop::_internal_stop_id() const {
  return stop_id_.Get();
}
inline void ReplacementStop::_internal_set_stop_id(const std::string &value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
}
inline void ReplacementStop::set_stop_id(std::string &&value) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transit_realtime.ReplacementStop.stop_id)
}
inline void ReplacementStop::set_stop_id(const char *value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transit_realtime.ReplacementStop.stop_id)
}
inline void ReplacementStop::set_stop_id(const char *value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  stop_id_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char *>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transit_realtime.ReplacementStop.stop_id)
}
inline std::string *ReplacementStop::_internal_mutable_stop_id() {
  _has_bits_[0] |= 0x00000001u;
  return stop_id_.Mutable(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline std::string *ReplacementStop::release_stop_id() {
  // @@protoc_insertion_point(field_release:transit_realtime.ReplacementStop.stop_id)
  if (!_internal_has_stop_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.ReleaseNonDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ReplacementStop::set_allocated_stop_id(std::string *stop_id) {
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.SetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.ReplacementStop.stop_id)
}
inline std::string *ReplacementStop::unsafe_arena_release_stop_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:transit_realtime.ReplacementStop.stop_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return stop_id_.UnsafeArenaRelease(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void
ReplacementStop::unsafe_arena_set_allocated_stop_id(std::string *stop_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (stop_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stop_id_.UnsafeArenaSetAllocated(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stop_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.ReplacementStop.stop_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

} // namespace transit_realtime

PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::transit_realtime::FeedHeader_Incrementality>
    : ::std::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor<::transit_realtime::FeedHeader_Incrementality>() {
  return ::transit_realtime::FeedHeader_Incrementality_descriptor();
}
template <>
struct is_proto_enum<
    ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship>
    : ::std::true_type {};
template <>
inline const EnumDescriptor *GetEnumDescriptor<
    ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship>() {
  return ::transit_realtime::
      TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::VehiclePosition_VehicleStopStatus>
    : ::std::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor<::transit_realtime::VehiclePosition_VehicleStopStatus>() {
  return ::transit_realtime::VehiclePosition_VehicleStopStatus_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::VehiclePosition_CongestionLevel>
    : ::std::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor<::transit_realtime::VehiclePosition_CongestionLevel>() {
  return ::transit_realtime::VehiclePosition_CongestionLevel_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::VehiclePosition_OccupancyStatus>
    : ::std::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor<::transit_realtime::VehiclePosition_OccupancyStatus>() {
  return ::transit_realtime::VehiclePosition_OccupancyStatus_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::Alert_Cause> : ::std::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor<::transit_realtime::Alert_Cause>() {
  return ::transit_realtime::Alert_Cause_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::Alert_Effect> : ::std::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor<::transit_realtime::Alert_Effect>() {
  return ::transit_realtime::Alert_Effect_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::Alert_SeverityLevel>
    : ::std::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor<::transit_realtime::Alert_SeverityLevel>() {
  return ::transit_realtime::Alert_SeverityLevel_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::TripDescriptor_ScheduleRelationship>
    : ::std::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor<::transit_realtime::TripDescriptor_ScheduleRelationship>() {
  return ::transit_realtime::TripDescriptor_ScheduleRelationship_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::VehicleDescriptor_WheelchairAccessible>
    : ::std::true_type {};
template <>
inline const EnumDescriptor *GetEnumDescriptor<
    ::transit_realtime::VehicleDescriptor_WheelchairAccessible>() {
  return ::transit_realtime::
      VehicleDescriptor_WheelchairAccessible_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::Stop_WheelchairBoarding>
    : ::std::true_type {};
template <>
inline const EnumDescriptor *
GetEnumDescriptor<::transit_realtime::Stop_WheelchairBoarding>() {
  return ::transit_realtime::Stop_WheelchairBoarding_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gtfs_2drealtime_2eproto
